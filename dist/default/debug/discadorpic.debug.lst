

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue May 02 21:19:46 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext2,local,class=CONST,delta=2
    21                           	psect	swtext3,local,class=CONST,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.41
    43                           ; Generated 25/01/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F628A Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  008C                     	;# 
   104  008E                     	;# 
   105  0092                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009F                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  008C                     	;# 
   141  008E                     	;# 
   142  0092                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009A                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009F                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  008C                     	;# 
   178  008E                     	;# 
   179  0092                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009F                     	;# 
   187                           
   188                           	psect	strings
   189  0400                     __pstrings:	
   190  0400                     stringtab:	
   191  0400                     __stringtab:	
   192                           
   193                           ;	String table - string pointers are 1 byte each
   194  0400  1BFF               	btfsc	btemp+1,7
   195  0401  2C0A               	ljmp	stringcode
   196  0402  1383               	bcf	3,7
   197  0403  187F               	btfsc	btemp+1,0
   198  0404  1783               	bsf	3,7
   199  0405  0800               	movf	0,w
   200  0406  0A84               	incf	4,f
   201  0407  1903               	skipnz
   202  0408  0AFF               	incf	btemp+1,f
   203  0409  0008               	return
   204  040A                     stringcode:	
   205  040A                     stringdir:	
   206  040A  3004               	movlw	high stringdir
   207  040B  008A               	movwf	10
   208  040C  0804               	movf	4,w
   209  040D  0A84               	incf	4,f
   210  040E  0782               	addwf	2,f
   211  040F                     __stringbase:	
   212  040F  3400               	retlw	0
   213  0410                     __end_of__stringtab:	
   214  0410                     _linha:	
   215  0410  3402               	retlw	2
   216  0411  3404               	retlw	4
   217  0412  3440               	retlw	64
   218  0413  3480               	retlw	128
   219  0414                     __end_of_linha:	
   220  0006                     _PORTB	set	6
   221  0005                     _PORTA	set	5
   222  001F                     _CMCON	set	31
   223  005F                     _GIE	set	95
   224  0018                     _CARRY	set	24
   225  0035                     _RB5	set	53
   226  0036                     _RB6	set	54
   227  0037                     _RB7	set	55
   228  0028                     _RA0	set	40
   229  0033                     _RB3	set	51
   230  0034                     _RB4	set	52
   231  009D                     _EECON2	set	157
   232  009A                     _EEDATA	set	154
   233  009C                     _EECON1	set	156
   234  009B                     _EEADR	set	155
   235  0086                     _TRISB	set	134
   236  0085                     _TRISA	set	133
   237  04E2                     _WREN	set	1250
   238  04E0                     _RD	set	1248
   239  04E1                     _WR	set	1249
   240  0414                     STR_7:	
   241  0414  3441               	retlw	65	;'A'
   242  0415  3472               	retlw	114	;'r'
   243  0416  346D               	retlw	109	;'m'
   244  0417  3461               	retlw	97	;'a'
   245  0418  347A               	retlw	122	;'z'
   246  0419  3465               	retlw	101	;'e'
   247  041A  346E               	retlw	110	;'n'
   248  041B  3461               	retlw	97	;'a'
   249  041C  346E               	retlw	110	;'n'
   250  041D  3464               	retlw	100	;'d'
   251  041E  346F               	retlw	111	;'o'
   252  041F  342E               	retlw	46	;'.'
   253  0420  342E               	retlw	46	;'.'
   254  0421  342E               	retlw	46	;'.'
   255  0422  3400               	retlw	0
   256  0423                     STR_10:	
   257  0423  3444               	retlw	68	;'D'
   258  0424  3465               	retlw	101	;'e'
   259  0425  3473               	retlw	115	;'s'
   260  0426  346C               	retlw	108	;'l'
   261  0427  3469               	retlw	105	;'i'
   262  0428  3467               	retlw	103	;'g'
   263  0429  3461               	retlw	97	;'a'
   264  042A  346E               	retlw	110	;'n'
   265  042B  3464               	retlw	100	;'d'
   266  042C  346F               	retlw	111	;'o'
   267  042D  342E               	retlw	46	;'.'
   268  042E  342E               	retlw	46	;'.'
   269  042F  342E               	retlw	46	;'.'
   270  0430  3400               	retlw	0
   271  0431                     STR_5:	
   272  0431  3444               	retlw	68	;'D'
   273  0432  3469               	retlw	105	;'i'
   274  0433  3467               	retlw	103	;'g'
   275  0434  3469               	retlw	105	;'i'
   276  0435  3474               	retlw	116	;'t'
   277  0436  3465               	retlw	101	;'e'
   278  0437  3420               	retlw	32	;' '
   279  0438  344E               	retlw	78	;'N'
   280  0439  3475               	retlw	117	;'u'
   281  043A  346D               	retlw	109	;'m'
   282  043B  3465               	retlw	101	;'e'
   283  043C  3472               	retlw	114	;'r'
   284  043D  346F               	retlw	111	;'o'
   285  043E  3400               	retlw	0
   286  043F                     STR_9:	
   287  043F  3443               	retlw	67	;'C'
   288  0440  3468               	retlw	104	;'h'
   289  0441  3461               	retlw	97	;'a'
   290  0442  346D               	retlw	109	;'m'
   291  0443  3461               	retlw	97	;'a'
   292  0444  346E               	retlw	110	;'n'
   293  0445  3464               	retlw	100	;'d'
   294  0446  346F               	retlw	111	;'o'
   295  0447  342E               	retlw	46	;'.'
   296  0448  342E               	retlw	46	;'.'
   297  0449  342E               	retlw	46	;'.'
   298  044A  3400               	retlw	0
   299  044B                     STR_3:	
   300  044B  3444               	retlw	68	;'D'
   301  044C  3469               	retlw	105	;'i'
   302  044D  3467               	retlw	103	;'g'
   303  044E  3469               	retlw	105	;'i'
   304  044F  3474               	retlw	116	;'t'
   305  0450  3465               	retlw	101	;'e'
   306  0451  3420               	retlw	32	;' '
   307  0452  344E               	retlw	78	;'N'
   308  0453  346F               	retlw	111	;'o'
   309  0454  346D               	retlw	109	;'m'
   310  0455  3465               	retlw	101	;'e'
   311  0456  3400               	retlw	0
   312  0457                     STR_4:	
   313  0457  3423               	retlw	35	;'#'
   314  0458  3423               	retlw	35	;'#'
   315  0459  3423               	retlw	35	;'#'
   316  045A  3423               	retlw	35	;'#'
   317  045B  3423               	retlw	35	;'#'
   318  045C  3423               	retlw	35	;'#'
   319  045D  3423               	retlw	35	;'#'
   320  045E  3423               	retlw	35	;'#'
   321  045F  3423               	retlw	35	;'#'
   322  0460  3400               	retlw	0
   323  0461                     STR_2:	
   324  0461  3441               	retlw	65	;'A'
   325  0462  3464               	retlw	100	;'d'
   326  0463  3469               	retlw	105	;'i'
   327  0464  3463               	retlw	99	;'c'
   328  0465  3469               	retlw	105	;'i'
   329  0466  346F               	retlw	111	;'o'
   330  0467  346E               	retlw	110	;'n'
   331  0468  3461               	retlw	97	;'a'
   332  0469  3472               	retlw	114	;'r'
   333  046A  3400               	retlw	0
   334  046B                     STR_8:	
   335  046B  3453               	retlw	83	;'S'
   336  046C  3461               	retlw	97	;'a'
   337  046D  346C               	retlw	108	;'l'
   338  046E  3476               	retlw	118	;'v'
   339  046F  346F               	retlw	111	;'o'
   340  0470  3421               	retlw	33	;'!'
   341  0471  3400               	retlw	0
   342  0472                     STR_1:	
   343  0472  3444               	retlw	68	;'D'
   344  0473  3469               	retlw	105	;'i'
   345  0474  3473               	retlw	115	;'s'
   346  0475  3463               	retlw	99	;'c'
   347  0476  3461               	retlw	97	;'a'
   348  0477  3472               	retlw	114	;'r'
   349  0478  3400               	retlw	0
   350  0457                     
   351                           ; #config settings
   352  0000                     
   353                           	psect	cinit
   354  0011                     start_initialization:	
   355  0011                     __initialization:	
   356                           
   357                           ; Clear objects allocated to BITCOMMON
   358  0011  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   359                           
   360                           ; Clear objects allocated to COMMON
   361  0012  01F9               	clrf	__pbssCOMMON& (0+127)
   362                           
   363                           ; Clear objects allocated to BANK0
   364  0013  1383               	bcf	3,7	;select IRP bank0
   365  0014  303E               	movlw	low __pbssBANK0
   366  0015  0084               	movwf	4
   367  0016  3056               	movlw	low (__pbssBANK0+24)
   368  0017  26AF               	fcall	clear_ram0
   369  0018                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372  0018                     __end_of__initialization:	
   373  0018  0183               	clrf	3
   374  0019  2CFC               	ljmp	_main	;jump to C main() function
   375                           
   376                           	psect	bitbssCOMMON
   377  03C0                     __pbitbssCOMMON:	
   378  03C0                     buscar@achou:	
   379  03C0                     	ds	1
   380  03C1                     _modo:	
   381  03C1                     	ds	1
   382                           
   383                           	psect	bssCOMMON
   384  0079                     __pbssCOMMON:	
   385  0079                     _quantidade:	
   386  0079                     	ds	1
   387                           
   388                           	psect	bssBANK0
   389  003E                     __pbssBANK0:	
   390  003E                     _numero:	
   391  003E                     	ds	10
   392  0048                     _estado:	
   393  0048                     	ds	2
   394  004A                     _endereco:	
   395  004A                     	ds	1
   396  004B                     _entrada:	
   397  004B                     	ds	1
   398  004C                     _nome:	
   399  004C                     	ds	10
   400                           
   401                           	psect	clrtext
   402  06AF                     clear_ram0:	
   403                           ;	Called with FSR containing the base address, and
   404                           ;	W with the last address+1
   405                           
   406  06AF  0064               	clrwdt	;clear the watchdog before getting into this loop
   407  06B0                     clrloop0:	
   408  06B0  0180               	clrf	0	;clear RAM location pointed to by FSR
   409  06B1  0A84               	incf	4,f	;increment pointer
   410  06B2  0604               	xorwf	4,w	;XOR with final address
   411  06B3  1903               	btfsc	3,2	;have we reached the end yet?
   412  06B4  3400               	retlw	0	;all done for this memory range, return
   413  06B5  0604               	xorwf	4,w	;XOR again to restore value
   414  06B6  2EB0               	goto	clrloop0	;do the next byte
   415                           
   416                           	psect	cstackCOMMON
   417  0070                     __pcstackCOMMON:	
   418  0070                     ?_lcd_init:	
   419  0070                     ?_lcd_cmd:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_eeprom_read:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_maquina:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_discar:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_adicionar:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_digitarNumero:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_digitarNome:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_buscar:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_chamar:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_armazenar:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_desligar:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_desativaModo:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_ativaModo:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_lcd_dat:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_interrupcao:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_interrupcao:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_lcd_wr:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_main:	
   471                           ; 1 bytes @ 0x0
   472                           
   473                           
   474                           ; 2 bytes @ 0x0
   475  0070                     	ds	4
   476  0074                     ??_eeprom_read:	
   477  0074                     ?_eeprom_write:	
   478                           ; 1 bytes @ 0x4
   479                           
   480  0074                     ??_desativaModo:	
   481                           ; 1 bytes @ 0x4
   482                           
   483  0074                     ??_ativaModo:	
   484                           ; 1 bytes @ 0x4
   485                           
   486  0074                     ?_atraso_ms:	
   487                           ; 1 bytes @ 0x4
   488                           
   489  0074                     ??_lcd_wr:	
   490                           ; 1 bytes @ 0x4
   491                           
   492  0074                     ?___bmul:	
   493                           ; 1 bytes @ 0x4
   494                           
   495  0074                     eeprom_write@value:	
   496                           ; 1 bytes @ 0x4
   497                           
   498  0074                     ___bmul@multiplicand:	
   499                           ; 1 bytes @ 0x4
   500                           
   501  0074                     atraso_ms@valor:	
   502                           ; 1 bytes @ 0x4
   503                           
   504                           
   505                           ; 2 bytes @ 0x4
   506  0074                     	ds	1
   507  0075                     ??_eeprom_write:	
   508  0075                     ??___bmul:	
   509                           ; 1 bytes @ 0x5
   510                           
   511  0075                     lcd_wr@val:	
   512                           ; 1 bytes @ 0x5
   513                           
   514  0075                     eeprom_read@addr:	
   515                           ; 1 bytes @ 0x5
   516                           
   517                           
   518                           ; 1 bytes @ 0x5
   519  0075                     	ds	1
   520  0076                     ??_buscar:	
   521  0076                     ??_atraso_ms:	
   522                           ; 1 bytes @ 0x6
   523                           
   524  0076                     lcd_wr@i:	
   525                           ; 1 bytes @ 0x6
   526                           
   527  0076                     eeprom_write@addr:	
   528                           ; 1 bytes @ 0x6
   529                           
   530  0076                     ___bmul@product:	
   531                           ; 1 bytes @ 0x6
   532                           
   533                           
   534                           ; 1 bytes @ 0x6
   535  0076                     	ds	1
   536  0077                     ??_lcd_cmd:	
   537  0077                     ??_lcd_dat:	
   538                           ; 1 bytes @ 0x7
   539                           
   540  0077                     lcd_cmd@val:	
   541                           ; 1 bytes @ 0x7
   542                           
   543  0077                     lcd_dat@val:	
   544                           ; 1 bytes @ 0x7
   545                           
   546  0077                     ___bmul@multiplier:	
   547                           ; 1 bytes @ 0x7
   548                           
   549                           
   550                           ; 1 bytes @ 0x7
   551  0077                     	ds	1
   552  0078                     ??_lcd_init:	
   553  0078                     ??_chamar:	
   554                           ; 1 bytes @ 0x8
   555                           
   556                           
   557                           	psect	cstackBANK0
   558  0020                     __pcstackBANK0:	
   559                           ; 1 bytes @ 0x8
   560                           
   561  0020                     buscar@num:	
   562  0020                     atraso_ms@i:	
   563                           ; 2 bytes @ 0x0
   564                           
   565                           
   566                           ; 2 bytes @ 0x0
   567  0020                     	ds	2
   568  0022                     atraso_ms@j:	
   569  0022                     buscar@i_147:	
   570                           ; 1 bytes @ 0x2
   571                           
   572                           
   573                           ; 2 bytes @ 0x2
   574  0022                     	ds	1
   575  0023                     ?_lcd_str:	
   576  0023                     ?_tc_tecla:	
   577                           ; 1 bytes @ 0x3
   578                           
   579  0023                     lcd_str@str:	
   580                           ; 1 bytes @ 0x3
   581                           
   582  0023                     tc_tecla@timeout:	
   583                           ; 2 bytes @ 0x3
   584                           
   585                           
   586                           ; 2 bytes @ 0x3
   587  0023                     	ds	1
   588  0024                     buscar@end:	
   589                           
   590                           ; 1 bytes @ 0x4
   591  0024                     	ds	1
   592  0025                     ??_lcd_str:	
   593  0025                     ??_tc_tecla:	
   594                           ; 1 bytes @ 0x5
   595                           
   596  0025                     buscar@i:	
   597                           ; 1 bytes @ 0x5
   598                           
   599                           
   600                           ; 2 bytes @ 0x5
   601  0025                     	ds	1
   602  0026                     lcd_str@i:	
   603                           
   604                           ; 1 bytes @ 0x6
   605  0026                     	ds	1
   606  0027                     ??_desligar:	
   607  0027                     tc_tecla@tmp:	
   608                           ; 1 bytes @ 0x7
   609                           
   610                           
   611                           ; 1 bytes @ 0x7
   612  0027                     	ds	1
   613  0028                     tc_tecla@to:	
   614                           
   615                           ; 2 bytes @ 0x8
   616  0028                     	ds	2
   617  002A                     tc_tecla@i:	
   618                           
   619                           ; 1 bytes @ 0xA
   620  002A                     	ds	1
   621  002B                     tc_tecla@ret:	
   622                           
   623                           ; 1 bytes @ 0xB
   624  002B                     	ds	1
   625  002C                     ??_discar:	
   626  002C                     ??_adicionar:	
   627                           ; 1 bytes @ 0xC
   628                           
   629  002C                     ??_digitarNumero:	
   630                           ; 1 bytes @ 0xC
   631                           
   632  002C                     ??_armazenar:	
   633                           ; 1 bytes @ 0xC
   634                           
   635  002C                     ?_tc_letra:	
   636                           ; 1 bytes @ 0xC
   637                           
   638  002C                     tc_letra@timeout:	
   639                           ; 1 bytes @ 0xC
   640                           
   641                           
   642                           ; 2 bytes @ 0xC
   643  002C                     	ds	1
   644  002D                     digitarNumero@cont:	
   645  002D                     armazenar@i:	
   646                           ; 2 bytes @ 0xD
   647                           
   648                           
   649                           ; 2 bytes @ 0xD
   650  002D                     	ds	1
   651  002E                     ??_tc_letra:	
   652                           
   653                           ; 1 bytes @ 0xE
   654  002E                     	ds	1
   655  002F                     armazenar@i_151:	
   656  002F                     tc_letra@i:	
   657                           ; 2 bytes @ 0xF
   658                           
   659                           
   660                           ; 2 bytes @ 0xF
   661  002F                     	ds	2
   662  0031                     tc_letra@i_200:	
   663                           
   664                           ; 2 bytes @ 0x11
   665  0031                     	ds	2
   666  0033                     tc_letra@num2:	
   667                           
   668                           ; 1 bytes @ 0x13
   669  0033                     	ds	1
   670  0034                     tc_letra@ret:	
   671                           
   672                           ; 1 bytes @ 0x14
   673  0034                     	ds	1
   674  0035                     tc_letra@num:	
   675                           
   676                           ; 1 bytes @ 0x15
   677  0035                     	ds	1
   678  0036                     tc_letra@cont:	
   679                           
   680                           ; 2 bytes @ 0x16
   681  0036                     	ds	2
   682  0038                     ??_digitarNome:	
   683                           
   684                           ; 1 bytes @ 0x18
   685  0038                     	ds	1
   686  0039                     digitarNome@cont:	
   687                           
   688                           ; 2 bytes @ 0x19
   689  0039                     	ds	2
   690  003B                     ??_maquina:	
   691                           
   692                           ; 1 bytes @ 0x1B
   693  003B                     	ds	1
   694  003C                     ??_main:	
   695                           
   696                           ; 1 bytes @ 0x1C
   697  003C                     	ds	1
   698  003D                     main@val:	
   699                           
   700                           ; 1 bytes @ 0x1D
   701  003D                     	ds	1
   702                           
   703                           	psect	maintext
   704  04FC                     __pmaintext:	
   705 ;;
   706 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   707 ;;
   708 ;; *************** function _main *****************
   709 ;; Defined at:
   710 ;;		line 39 in file "main.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;		None
   713 ;; Auto vars:     Size  Location     Type
   714 ;;  val             1   29[BANK0 ] unsigned char 
   715 ;;  tmp             1    0        unsigned char 
   716 ;;  i               1    0        unsigned char 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  2   66[None  ] int 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : B00/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   726 ;;      Params:         0       0       0       0
   727 ;;      Locals:         0       1       0       0
   728 ;;      Temps:          0       1       0       0
   729 ;;      Totals:         0       2       0       0
   730 ;;Total ram usage:        2 bytes
   731 ;; Hardware stack levels required when called:    6
   732 ;; This function calls:
   733 ;;		_eeprom_read
   734 ;;		_eeprom_write
   735 ;;		_lcd_cmd
   736 ;;		_lcd_init
   737 ;;		_maquina
   738 ;; This function is called by:
   739 ;;		Startup code after reset
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           
   744                           ;psect for function _main
   745  04FC                     _main:	
   746                           
   747                           ;main.c: 40: unsigned char i, tmp;
   748                           ;main.c: 42: CMCON = 0x07;
   749                           
   750                           ;incstack = 0
   751                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   752  04FC  3007               	movlw	7
   753  04FD  1283               	bcf	3,5	;RP0=0, select bank0
   754  04FE  1303               	bcf	3,6	;RP1=0, select bank0
   755  04FF  009F               	movwf	31	;volatile
   756                           
   757                           ;main.c: 43: TRISA = 0x30;
   758  0500  3030               	movlw	48
   759  0501  1683               	bsf	3,5	;RP0=1, select bank1
   760  0502  1303               	bcf	3,6	;RP1=0, select bank1
   761  0503  0085               	movwf	5	;volatile
   762                           
   763                           ;main.c: 44: TRISB = 0xE7;
   764  0504  30E7               	movlw	231
   765  0505  0086               	movwf	6	;volatile
   766                           
   767                           ;main.c: 46: PORTA = 0xFE;
   768  0506  30FE               	movlw	254
   769  0507  1283               	bcf	3,5	;RP0=0, select bank0
   770  0508  1303               	bcf	3,6	;RP1=0, select bank0
   771  0509  0085               	movwf	5	;volatile
   772                           
   773                           ;main.c: 47: PORTB = 0x00;
   774  050A  0186               	clrf	6	;volatile
   775                           
   776                           ;main.c: 48: lcd_init();
   777  050B  2526               	fcall	_lcd_init
   778                           
   779                           ;main.c: 49: lcd_cmd(0x01);
   780  050C  3001               	movlw	1
   781  050D  2636               	fcall	_lcd_cmd
   782                           
   783                           ;main.c: 51: unsigned char val = eeprom_read(0x0);
   784  050E  3000               	movlw	0
   785  050F  267E               	fcall	_eeprom_read
   786  0510  1283               	bcf	3,5	;RP0=0, select bank0
   787  0511  1303               	bcf	3,6	;RP1=0, select bank0
   788  0512  00BC               	movwf	??_main
   789  0513  083C               	movf	??_main,w
   790  0514  00BD               	movwf	main@val
   791                           
   792                           ;main.c: 52: if (val = 255) {
   793  0515  30FF               	movlw	255
   794  0516  00BC               	movwf	??_main
   795  0517  083C               	movf	??_main,w
   796  0518  00BD               	movwf	main@val
   797                           
   798                           ;main.c: 53: eeprom_write(0x0, 0x1);
   799  0519  01F4               	clrf	eeprom_write@value
   800  051A  0AF4               	incf	eeprom_write@value,f
   801  051B  3000               	movlw	0
   802  051C  25BD               	fcall	_eeprom_write
   803                           
   804                           ;main.c: 54: endereco = eeprom_read(0x0);
   805  051D  3000               	movlw	0
   806  051E  267E               	fcall	_eeprom_read
   807  051F  1283               	bcf	3,5	;RP0=0, select bank0
   808  0520  1303               	bcf	3,6	;RP1=0, select bank0
   809  0521  00BC               	movwf	??_main
   810  0522  083C               	movf	??_main,w
   811  0523  00CA               	movwf	_endereco
   812  0524                     l2501:	
   813                           ;main.c: 55: }
   814                           ;main.c: 57: while (1) {
   815                           
   816                           
   817                           ;main.c: 58: maquina();
   818  0524  24A6               	fcall	_maquina
   819  0525  2D24               	goto	l2501
   820  0526                     __end_of_main:	
   821                           ;main.c: 59: }
   822                           ;main.c: 60: return 0;
   823                           ;	Return value of _main is never used
   824                           
   825                           
   826                           	psect	text1
   827  04A6                     __ptext1:	
   828 ;; *************** function _maquina *****************
   829 ;; Defined at:
   830 ;;		line 67 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   844 ;;      Params:         0       0       0       0
   845 ;;      Locals:         0       0       0       0
   846 ;;      Temps:          0       1       0       0
   847 ;;      Totals:         0       1       0       0
   848 ;;Total ram usage:        1 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; Hardware stack levels required when called:    5
   851 ;; This function calls:
   852 ;;		_adicionar
   853 ;;		_armazenar
   854 ;;		_buscar
   855 ;;		_chamar
   856 ;;		_desligar
   857 ;;		_digitarNome
   858 ;;		_digitarNumero
   859 ;;		_discar
   860 ;;		_eeprom_read
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _maquina
   868  04A6                     _maquina:	
   869                           
   870                           ;main.c: 68: endereco = eeprom_read(0x0);
   871                           
   872                           ;incstack = 0
   873                           ; Regs used in _maquina: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   874  04A6  3000               	movlw	0
   875  04A7  267E               	fcall	_eeprom_read
   876  04A8  1283               	bcf	3,5	;RP0=0, select bank0
   877  04A9  1303               	bcf	3,6	;RP1=0, select bank0
   878  04AA  00BB               	movwf	??_maquina
   879  04AB  083B               	movf	??_maquina,w
   880  04AC  00CA               	movwf	_endereco
   881                           
   882                           ;main.c: 69: switch (estado) {
   883  04AD  2CBE               	goto	l2475
   884  04AE                     l2457:	
   885                           ;main.c: 70: case 0:
   886                           
   887                           
   888                           ;main.c: 71: discar();
   889  04AE  2479               	fcall	_discar
   890                           
   891                           ;main.c: 72: break;
   892  04AF  0008               	return
   893  04B0                     l2459:	
   894                           ;main.c: 73: case 1:
   895                           
   896                           
   897                           ;main.c: 74: adicionar();
   898  04B0  24D1               	fcall	_adicionar
   899                           
   900                           ;main.c: 75: break;
   901  04B1  0008               	return
   902  04B2                     l2461:	
   903                           ;main.c: 76: case 2:
   904                           
   905                           
   906                           ;main.c: 77: digitarNumero();
   907  04B2  201A               	fcall	_digitarNumero
   908                           
   909                           ;main.c: 78: break;
   910  04B3  0008               	return
   911  04B4                     l2463:	
   912                           ;main.c: 79: case 3:
   913                           
   914                           
   915                           ;main.c: 80: digitarNome();
   916  04B4  22BF               	fcall	_digitarNome
   917                           
   918                           ;main.c: 81: break;
   919  04B5  0008               	return
   920  04B6                     l2465:	
   921                           ;main.c: 82: case 7:
   922                           
   923                           
   924                           ;main.c: 83: buscar();
   925  04B6  2219               	fcall	_buscar
   926                           
   927                           ;main.c: 84: break;
   928  04B7  0008               	return
   929  04B8                     l2467:	
   930                           ;main.c: 85: case 5:
   931                           
   932                           
   933                           ;main.c: 86: chamar();
   934  04B8  2599               	fcall	_chamar
   935                           
   936                           ;main.c: 87: break;
   937  04B9  0008               	return
   938  04BA                     l2469:	
   939                           ;main.c: 88: case 4:
   940                           
   941                           
   942                           ;main.c: 89: armazenar();
   943  04BA  2364               	fcall	_armazenar
   944                           
   945                           ;main.c: 90: break;
   946  04BB  0008               	return
   947  04BC                     l2471:	
   948                           ;main.c: 91: case 6:
   949                           
   950                           
   951                           ;main.c: 92: desligar();
   952  04BC  25DF               	fcall	_desligar
   953                           
   954                           ;main.c: 96: }
   955                           
   956                           ;main.c: 95: break;
   957                           
   958                           ;main.c: 94: default:
   959                           
   960                           ;main.c: 93: break;
   961  04BD  0008               	return
   962  04BE                     l2475:	
   963                           
   964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   965                           ; Switch size 1, requested type "space"
   966                           ; Number of cases is 1, Range of values is 0 to 0
   967                           ; switch strategies available:
   968                           ; Name         Instructions Cycles
   969                           ; simple_byte            4     3 (average)
   970                           ; direct_byte            7     6 (fixed)
   971                           ; jumptable            260     6 (fixed)
   972                           ;	Chosen strategy is simple_byte
   973  04BE  1283               	bcf	3,5	;RP0=0, select bank0
   974  04BF  1303               	bcf	3,6	;RP1=0, select bank0
   975  04C0  0849               	movf	_estado+1,w
   976  04C1  3A00               	xorlw	0	; case 0
   977  04C2  1903               	skipnz
   978  04C3  2CC5               	goto	l2583
   979  04C4  2CD0               	goto	l88
   980  04C5                     l2583:	
   981                           
   982                           ; Switch size 1, requested type "space"
   983                           ; Number of cases is 8, Range of values is 0 to 7
   984                           ; switch strategies available:
   985                           ; Name         Instructions Cycles
   986                           ; direct_byte           14     6 (fixed)
   987                           ; simple_byte           25    13 (average)
   988                           ; jumptable            260     6 (fixed)
   989                           ;	Chosen strategy is direct_byte
   990  04C5  0848               	movf	_estado,w
   991  04C6  0084               	movwf	4
   992  04C7  3008               	movlw	8
   993  04C8  0204               	subwf	4,w
   994  04C9  1803               	skipnc
   995  04CA  0008               	return
   996  04CB  3003               	movlw	high S2585
   997  04CC  008A               	movwf	10
   998  04CD  30F2               	movlw	low S2585
   999  04CE  0704               	addwf	4,w
  1000  04CF  0082               	movwf	2
  1001  04D0                     l88:	
  1002  04D0  0008               	return
  1003  04D1                     __end_of_maquina:	
  1004                           
  1005                           	psect	swtext1
  1006  03F2                     __pswtext1:	
  1007  03F2                     S2585:	
  1008  03F2  2CAE               	ljmp	l2457
  1009  03F3  2CB0               	ljmp	l2459
  1010  03F4  2CB2               	ljmp	l2461
  1011  03F5  2CB4               	ljmp	l2463
  1012  03F6  2CBA               	ljmp	l2469
  1013  03F7  2CB8               	ljmp	l2467
  1014  03F8  2CBC               	ljmp	l2471
  1015  03F9  2CB6               	ljmp	l2465
  1016                           
  1017                           	psect	text2
  1018  0479                     __ptext2:	
  1019 ;; *************** function _discar *****************
  1020 ;; Defined at:
  1021 ;;		line 99 in file "main.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1035 ;;      Params:         0       0       0       0
  1036 ;;      Locals:         0       0       0       0
  1037 ;;      Temps:          0       1       0       0
  1038 ;;      Totals:         0       1       0       0
  1039 ;;Total ram usage:        1 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    4
  1042 ;; This function calls:
  1043 ;;		_desativaModo
  1044 ;;		_lcd_cmd
  1045 ;;		_lcd_str
  1046 ;;		_tc_tecla
  1047 ;; This function is called by:
  1048 ;;		_maquina
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           
  1053                           ;psect for function _discar
  1054  0479                     _discar:	
  1055                           
  1056                           ;main.c: 100: lcd_cmd(0x01);
  1057                           
  1058                           ;incstack = 0
  1059                           ; Regs used in _discar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1060  0479  3001               	movlw	1
  1061  047A  2636               	fcall	_lcd_cmd
  1062                           
  1063                           ;main.c: 101: lcd_cmd(0x80);
  1064  047B  3080               	movlw	128
  1065  047C  2636               	fcall	_lcd_cmd
  1066                           
  1067                           ;main.c: 102: lcd_str("Discar");
  1068  047D  3063               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1069  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1070  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0480  00A3               	movwf	lcd_str@str
  1072  0481  3080               	movlw	128
  1073  0482  00A4               	movwf	lcd_str@str+1
  1074  0483  25FE               	fcall	_lcd_str
  1075                           
  1076                           ;main.c: 103: entrada = tc_tecla(0);
  1077  0484  3000               	movlw	0
  1078  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1079  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1080  0487  00A3               	movwf	tc_tecla@timeout
  1081  0488  00A4               	movwf	tc_tecla@timeout+1
  1082  0489  2171               	fcall	_tc_tecla
  1083  048A  1283               	bcf	3,5	;RP0=0, select bank0
  1084  048B  1303               	bcf	3,6	;RP1=0, select bank0
  1085  048C  00AC               	movwf	??_discar
  1086  048D  082C               	movf	??_discar,w
  1087  048E  00CB               	movwf	_entrada
  1088                           
  1089                           ;main.c: 105: switch (entrada) {
  1090  048F  2C9D               	goto	l2273
  1091  0490                     l2265:	
  1092                           ;main.c: 106: case '*':
  1093                           
  1094                           
  1095                           ;main.c: 107: estado = 1;
  1096  0490  3001               	movlw	1
  1097  0491  00C8               	movwf	_estado
  1098  0492  3000               	movlw	0
  1099  0493  00C9               	movwf	_estado+1
  1100                           
  1101                           ;main.c: 108: break;
  1102  0494  0008               	return
  1103  0495                     l2267:	
  1104                           ;main.c: 109: case '#':
  1105                           
  1106                           
  1107                           ;main.c: 110: desativaModo();
  1108  0495  26B7               	fcall	_desativaModo
  1109                           
  1110                           ;main.c: 111: estado = 2;
  1111  0496  3002               	movlw	2
  1112  0497  1283               	bcf	3,5	;RP0=0, select bank0
  1113  0498  1303               	bcf	3,6	;RP1=0, select bank0
  1114  0499  00C8               	movwf	_estado
  1115  049A  3000               	movlw	0
  1116  049B  00C9               	movwf	_estado+1
  1117                           
  1118                           ;main.c: 115: }
  1119                           
  1120                           ;main.c: 114: break;
  1121                           
  1122                           ;main.c: 113: default:
  1123                           
  1124                           ;main.c: 112: break;
  1125  049C  0008               	return
  1126  049D                     l2273:	
  1127  049D  084B               	movf	_entrada,w
  1128                           
  1129                           ; Switch size 1, requested type "space"
  1130                           ; Number of cases is 2, Range of values is 35 to 42
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte            7     4 (average)
  1134                           ; direct_byte           17     9 (fixed)
  1135                           ; jumptable            263     9 (fixed)
  1136                           ;	Chosen strategy is simple_byte
  1137  049E  3A23               	xorlw	35	; case 35
  1138  049F  1903               	skipnz
  1139  04A0  2C95               	goto	l2267
  1140  04A1  3A09               	xorlw	9	; case 42
  1141  04A2  1903               	skipnz
  1142  04A3  2C90               	goto	l2265
  1143  04A4  2CA5               	goto	l96
  1144  04A5                     l96:	
  1145  04A5  0008               	return
  1146  04A6                     __end_of_discar:	
  1147                           
  1148                           	psect	text3
  1149  06B7                     __ptext3:	
  1150 ;; *************** function _desativaModo *****************
  1151 ;; Defined at:
  1152 ;;		line 142 in file "main.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		None
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1166 ;;      Params:         0       0       0       0
  1167 ;;      Locals:         0       0       0       0
  1168 ;;      Temps:          0       0       0       0
  1169 ;;      Totals:         0       0       0       0
  1170 ;;Total ram usage:        0 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    1
  1173 ;; This function calls:
  1174 ;;		Nothing
  1175 ;; This function is called by:
  1176 ;;		_discar
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _desativaModo
  1182  06B7                     _desativaModo:	
  1183                           
  1184                           ;main.c: 143: modo = 0b0;
  1185                           
  1186                           ;incstack = 0
  1187                           ; Regs used in _desativaModo: []
  1188  06B7  10F8               	bcf	_modo/(0+8),_modo& (0+7)
  1189  06B8  0008               	return
  1190  06B9                     __end_of_desativaModo:	
  1191                           
  1192                           	psect	text4
  1193  001A                     __ptext4:	
  1194 ;; *************** function _digitarNumero *****************
  1195 ;; Defined at:
  1196 ;;		line 177 in file "main.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;		None
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  cont            2   13[BANK0 ] int 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  1    wreg      void 
  1203 ;; Registers used:
  1204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/0
  1207 ;;		On exit  : 0/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1210 ;;      Params:         0       0       0       0
  1211 ;;      Locals:         0       2       0       0
  1212 ;;      Temps:          0       1       0       0
  1213 ;;      Totals:         0       3       0       0
  1214 ;;Total ram usage:        3 bytes
  1215 ;; Hardware stack levels used:    1
  1216 ;; Hardware stack levels required when called:    4
  1217 ;; This function calls:
  1218 ;;		_lcd_cmd
  1219 ;;		_lcd_dat
  1220 ;;		_lcd_str
  1221 ;;		_tc_tecla
  1222 ;; This function is called by:
  1223 ;;		_maquina
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function _digitarNumero
  1229  001A                     _digitarNumero:	
  1230                           
  1231                           ;main.c: 178: lcd_cmd(0x01);
  1232                           
  1233                           ;incstack = 0
  1234                           ; Regs used in _digitarNumero: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1235  001A  3001               	movlw	1
  1236  001B  2636               	fcall	_lcd_cmd
  1237                           
  1238                           ;main.c: 179: lcd_cmd(0x80);
  1239  001C  3080               	movlw	128
  1240  001D  2636               	fcall	_lcd_cmd
  1241                           
  1242                           ;main.c: 180: lcd_str("Digite Numero");
  1243  001E  3022               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1244  001F  1283               	bcf	3,5	;RP0=0, select bank0
  1245  0020  1303               	bcf	3,6	;RP1=0, select bank0
  1246  0021  00A3               	movwf	lcd_str@str
  1247  0022  3080               	movlw	128
  1248  0023  00A4               	movwf	lcd_str@str+1
  1249  0024  25FE               	fcall	_lcd_str
  1250                           
  1251                           ;main.c: 181: lcd_cmd(0xC0);
  1252  0025  30C0               	movlw	192
  1253  0026  2636               	fcall	_lcd_cmd
  1254                           
  1255                           ;main.c: 182: lcd_str("#########");
  1256  0027  3048               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1257  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1259  002A  00A3               	movwf	lcd_str@str
  1260  002B  3080               	movlw	128
  1261  002C  00A4               	movwf	lcd_str@str+1
  1262  002D  25FE               	fcall	_lcd_str
  1263                           
  1264                           ;main.c: 183: lcd_cmd(0xC0);
  1265  002E  30C0               	movlw	192
  1266  002F  2636               	fcall	_lcd_cmd
  1267                           
  1268                           ;main.c: 184: entrada = ' ';
  1269  0030  3020               	movlw	32
  1270  0031  1283               	bcf	3,5	;RP0=0, select bank0
  1271  0032  1303               	bcf	3,6	;RP1=0, select bank0
  1272  0033  00AC               	movwf	??_digitarNumero
  1273  0034  082C               	movf	??_digitarNumero,w
  1274  0035  00CB               	movwf	_entrada
  1275                           
  1276                           ;main.c: 186: int cont = 0;
  1277  0036  01AD               	clrf	digitarNumero@cont
  1278  0037  01AE               	clrf	digitarNumero@cont+1
  1279                           
  1280                           ;main.c: 187: while (entrada != '#' && cont < 9) {
  1281  0038  2871               	goto	l2319
  1282  0039                     l2303:	
  1283                           
  1284                           ;main.c: 188: entrada = tc_tecla(0);
  1285  0039  3000               	movlw	0
  1286  003A  1283               	bcf	3,5	;RP0=0, select bank0
  1287  003B  1303               	bcf	3,6	;RP1=0, select bank0
  1288  003C  00A3               	movwf	tc_tecla@timeout
  1289  003D  00A4               	movwf	tc_tecla@timeout+1
  1290  003E  2171               	fcall	_tc_tecla
  1291  003F  1283               	bcf	3,5	;RP0=0, select bank0
  1292  0040  1303               	bcf	3,6	;RP1=0, select bank0
  1293  0041  00AC               	movwf	??_digitarNumero
  1294  0042  082C               	movf	??_digitarNumero,w
  1295  0043  00CB               	movwf	_entrada
  1296                           
  1297                           ;main.c: 189: if (entrada == '*' && cont > 0) {
  1298  0044  302A               	movlw	42
  1299  0045  064B               	xorwf	_entrada,w
  1300  0046  1D03               	btfss	3,2
  1301  0047  285F               	goto	l2313
  1302  0048  082E               	movf	digitarNumero@cont+1,w
  1303  0049  3A80               	xorlw	128
  1304  004A  00FF               	movwf	127
  1305  004B  3080               	movlw	128
  1306  004C  027F               	subwf	127,w
  1307  004D  1D03               	skipz
  1308  004E  2851               	goto	u1695
  1309  004F  3001               	movlw	1
  1310  0050  022D               	subwf	digitarNumero@cont,w
  1311  0051                     u1695:	
  1312  0051  1C03               	skipc
  1313  0052  285F               	goto	l2313
  1314                           
  1315                           ;main.c: 190: cont--;
  1316  0053  30FF               	movlw	255
  1317  0054  1283               	bcf	3,5	;RP0=0, select bank0
  1318  0055  1303               	bcf	3,6	;RP1=0, select bank0
  1319  0056  07AD               	addwf	digitarNumero@cont,f
  1320  0057  1803               	skipnc
  1321  0058  0AAE               	incf	digitarNumero@cont+1,f
  1322  0059  30FF               	movlw	255
  1323  005A  07AE               	addwf	digitarNumero@cont+1,f
  1324                           
  1325                           ;main.c: 191: lcd_cmd(0xC0 + cont);
  1326  005B  082D               	movf	digitarNumero@cont,w
  1327  005C  3EC0               	addlw	192
  1328  005D  2636               	fcall	_lcd_cmd
  1329                           
  1330                           ;main.c: 192: continue;
  1331  005E  2871               	goto	l2319
  1332  005F                     l2313:	
  1333                           
  1334                           ;main.c: 193: }
  1335                           ;main.c: 194: numero[cont] = entrada;
  1336  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1337  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1338  0061  084B               	movf	_entrada,w
  1339  0062  00AC               	movwf	??_digitarNumero
  1340  0063  082D               	movf	digitarNumero@cont,w
  1341  0064  3E3E               	addlw	(low (_numero| 0))& (0+255)
  1342  0065  0084               	movwf	4
  1343  0066  082C               	movf	??_digitarNumero,w
  1344  0067  1383               	bcf	3,7	;select IRP bank0
  1345  0068  0080               	movwf	0
  1346                           
  1347                           ;main.c: 195: cont++;
  1348  0069  3001               	movlw	1
  1349  006A  07AD               	addwf	digitarNumero@cont,f
  1350  006B  1803               	skipnc
  1351  006C  0AAE               	incf	digitarNumero@cont+1,f
  1352  006D  3000               	movlw	0
  1353  006E  07AE               	addwf	digitarNumero@cont+1,f
  1354                           
  1355                           ;main.c: 196: lcd_dat(entrada);
  1356  006F  084B               	movf	_entrada,w
  1357  0070  261C               	fcall	_lcd_dat
  1358  0071                     l2319:	
  1359  0071  3023               	movlw	35
  1360  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1361  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1362  0074  064B               	xorwf	_entrada,w
  1363  0075  1903               	btfsc	3,2
  1364  0076  2882               	goto	l2323
  1365  0077  082E               	movf	digitarNumero@cont+1,w
  1366  0078  3A80               	xorlw	128
  1367  0079  00FF               	movwf	127
  1368  007A  3080               	movlw	128
  1369  007B  027F               	subwf	127,w
  1370  007C  1D03               	skipz
  1371  007D  2880               	goto	u1715
  1372  007E  3009               	movlw	9
  1373  007F  022D               	subwf	digitarNumero@cont,w
  1374  0080                     u1715:	
  1375  0080  1C03               	skipc
  1376  0081  2839               	goto	l2303
  1377  0082                     l2323:	
  1378                           
  1379                           ;main.c: 197: }
  1380                           ;main.c: 198: if (cont < 9) {
  1381  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0084  082E               	movf	digitarNumero@cont+1,w
  1384  0085  3A80               	xorlw	128
  1385  0086  00FF               	movwf	127
  1386  0087  3080               	movlw	128
  1387  0088  027F               	subwf	127,w
  1388  0089  1D03               	skipz
  1389  008A  288D               	goto	u1725
  1390  008B  3009               	movlw	9
  1391  008C  022D               	subwf	digitarNumero@cont,w
  1392  008D                     u1725:	
  1393  008D  1803               	skipnc
  1394  008E  28B7               	goto	l2335
  1395                           
  1396                           ;main.c: 199: for (; cont < 9; cont++) {
  1397  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0091  082E               	movf	digitarNumero@cont+1,w
  1400  0092  3A80               	xorlw	128
  1401  0093  00FF               	movwf	127
  1402  0094  3080               	movlw	128
  1403  0095  027F               	subwf	127,w
  1404  0096  1D03               	skipz
  1405  0097  289A               	goto	u1735
  1406  0098  3009               	movlw	9
  1407  0099  022D               	subwf	digitarNumero@cont,w
  1408  009A                     u1735:	
  1409  009A  1803               	btfsc	3,0
  1410  009B  28B7               	goto	l2335
  1411  009C                     l2329:	
  1412                           
  1413                           ;main.c: 200: numero[cont] = '#';
  1414  009C  3023               	movlw	35
  1415  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1416  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1417  009F  00AC               	movwf	??_digitarNumero
  1418  00A0  082D               	movf	digitarNumero@cont,w
  1419  00A1  3E3E               	addlw	(low (_numero| 0))& (0+255)
  1420  00A2  0084               	movwf	4
  1421  00A3  082C               	movf	??_digitarNumero,w
  1422  00A4  1383               	bcf	3,7	;select IRP bank0
  1423  00A5  0080               	movwf	0
  1424  00A6  3001               	movlw	1
  1425  00A7  07AD               	addwf	digitarNumero@cont,f
  1426  00A8  1803               	skipnc
  1427  00A9  0AAE               	incf	digitarNumero@cont+1,f
  1428  00AA  3000               	movlw	0
  1429  00AB  07AE               	addwf	digitarNumero@cont+1,f
  1430  00AC  082E               	movf	digitarNumero@cont+1,w
  1431  00AD  3A80               	xorlw	128
  1432  00AE  00FF               	movwf	127
  1433  00AF  3080               	movlw	128
  1434  00B0  027F               	subwf	127,w
  1435  00B1  1D03               	skipz
  1436  00B2  28B5               	goto	u1745
  1437  00B3  3009               	movlw	9
  1438  00B4  022D               	subwf	digitarNumero@cont,w
  1439  00B5                     u1745:	
  1440  00B5  1C03               	skipc
  1441  00B6  289C               	goto	l2329
  1442  00B7                     l2335:	
  1443                           
  1444                           ;main.c: 201: }
  1445                           ;main.c: 202: }
  1446                           ;main.c: 203: numero[9] = '\0';
  1447  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1448  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1449  00B9  01C7               	clrf	_numero+9
  1450                           
  1451                           ;main.c: 204: if (modo) {
  1452  00BA  1CF8               	btfss	_modo/(0+8),_modo& (0+7)
  1453  00BB  28C1               	goto	l2341
  1454                           
  1455                           ;main.c: 205: estado = 4;
  1456  00BC  3004               	movlw	4
  1457  00BD  00C8               	movwf	_estado
  1458  00BE  3000               	movlw	0
  1459  00BF  00C9               	movwf	_estado+1
  1460                           
  1461                           ;main.c: 206: } else {
  1462  00C0  0008               	return
  1463  00C1                     l2341:	
  1464                           
  1465                           ;main.c: 207: estado = 7;
  1466  00C1  3007               	movlw	7
  1467  00C2  00C8               	movwf	_estado
  1468  00C3  3000               	movlw	0
  1469  00C4  00C9               	movwf	_estado+1
  1470  00C5  0008               	return
  1471  00C6                     __end_of_digitarNumero:	
  1472                           
  1473                           	psect	text5
  1474  02BF                     __ptext5:	
  1475 ;; *************** function _digitarNome *****************
  1476 ;; Defined at:
  1477 ;;		line 146 in file "main.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;  cont            2   25[BANK0 ] int 
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1491 ;;      Params:         0       0       0       0
  1492 ;;      Locals:         0       2       0       0
  1493 ;;      Temps:          0       1       0       0
  1494 ;;      Totals:         0       3       0       0
  1495 ;;Total ram usage:        3 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    4
  1498 ;; This function calls:
  1499 ;;		_lcd_cmd
  1500 ;;		_lcd_dat
  1501 ;;		_lcd_str
  1502 ;;		_tc_letra
  1503 ;; This function is called by:
  1504 ;;		_maquina
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function _digitarNome
  1510  02BF                     _digitarNome:	
  1511                           
  1512                           ;main.c: 147: lcd_cmd(0x01);
  1513                           
  1514                           ;incstack = 0
  1515                           ; Regs used in _digitarNome: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1516  02BF  3001               	movlw	1
  1517  02C0  2636               	fcall	_lcd_cmd
  1518                           
  1519                           ;main.c: 148: lcd_cmd(0x80);
  1520  02C1  3080               	movlw	128
  1521  02C2  2636               	fcall	_lcd_cmd
  1522                           
  1523                           ;main.c: 149: lcd_str("Digite Nome");
  1524  02C3  303C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1525  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  1526  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  1527  02C6  00A3               	movwf	lcd_str@str
  1528  02C7  3080               	movlw	128
  1529  02C8  00A4               	movwf	lcd_str@str+1
  1530  02C9  25FE               	fcall	_lcd_str
  1531                           
  1532                           ;main.c: 150: lcd_cmd(0xC0);
  1533  02CA  30C0               	movlw	192
  1534  02CB  2636               	fcall	_lcd_cmd
  1535                           
  1536                           ;main.c: 151: lcd_str("#########");
  1537  02CC  3048               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1538  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  1539  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  1540  02CF  00A3               	movwf	lcd_str@str
  1541  02D0  3080               	movlw	128
  1542  02D1  00A4               	movwf	lcd_str@str+1
  1543  02D2  25FE               	fcall	_lcd_str
  1544                           
  1545                           ;main.c: 152: lcd_cmd(0xC0);
  1546  02D3  30C0               	movlw	192
  1547  02D4  2636               	fcall	_lcd_cmd
  1548                           
  1549                           ;main.c: 154: entrada = ' ';
  1550  02D5  3020               	movlw	32
  1551  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1552  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1553  02D8  00B8               	movwf	??_digitarNome
  1554  02D9  0838               	movf	??_digitarNome,w
  1555  02DA  00CB               	movwf	_entrada
  1556                           
  1557                           ;main.c: 155: int cont = 0;
  1558  02DB  01B9               	clrf	digitarNome@cont
  1559  02DC  01BA               	clrf	digitarNome@cont+1
  1560                           
  1561                           ;main.c: 156: while (entrada != '#' && cont < 9) {
  1562  02DD  2B16               	goto	l2371
  1563  02DE                     l2355:	
  1564                           
  1565                           ;main.c: 157: entrada = tc_letra(0);
  1566  02DE  3000               	movlw	0
  1567  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1568  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  1569  02E1  00AC               	movwf	tc_letra@timeout
  1570  02E2  00AD               	movwf	tc_letra@timeout+1
  1571  02E3  20C6               	fcall	_tc_letra
  1572  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1573  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1574  02E6  00B8               	movwf	??_digitarNome
  1575  02E7  0838               	movf	??_digitarNome,w
  1576  02E8  00CB               	movwf	_entrada
  1577                           
  1578                           ;main.c: 158: if (entrada == '*' && cont > 0) {
  1579  02E9  302A               	movlw	42
  1580  02EA  064B               	xorwf	_entrada,w
  1581  02EB  1D03               	btfss	3,2
  1582  02EC  2B04               	goto	l2365
  1583  02ED  083A               	movf	digitarNome@cont+1,w
  1584  02EE  3A80               	xorlw	128
  1585  02EF  00FF               	movwf	127
  1586  02F0  3080               	movlw	128
  1587  02F1  027F               	subwf	127,w
  1588  02F2  1D03               	skipz
  1589  02F3  2AF6               	goto	u1775
  1590  02F4  3001               	movlw	1
  1591  02F5  0239               	subwf	digitarNome@cont,w
  1592  02F6                     u1775:	
  1593  02F6  1C03               	skipc
  1594  02F7  2B04               	goto	l2365
  1595                           
  1596                           ;main.c: 159: cont--;
  1597  02F8  30FF               	movlw	255
  1598  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1599  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  1600  02FB  07B9               	addwf	digitarNome@cont,f
  1601  02FC  1803               	skipnc
  1602  02FD  0ABA               	incf	digitarNome@cont+1,f
  1603  02FE  30FF               	movlw	255
  1604  02FF  07BA               	addwf	digitarNome@cont+1,f
  1605                           
  1606                           ;main.c: 161: lcd_cmd(0xC0 + cont);
  1607  0300  0839               	movf	digitarNome@cont,w
  1608  0301  3EC0               	addlw	192
  1609  0302  2636               	fcall	_lcd_cmd
  1610                           
  1611                           ;main.c: 162: continue;
  1612  0303  2B16               	goto	l2371
  1613  0304                     l2365:	
  1614                           
  1615                           ;main.c: 163: }
  1616                           ;main.c: 164: nome[cont] = entrada;
  1617  0304  1283               	bcf	3,5	;RP0=0, select bank0
  1618  0305  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0306  084B               	movf	_entrada,w
  1620  0307  00B8               	movwf	??_digitarNome
  1621  0308  0839               	movf	digitarNome@cont,w
  1622  0309  3E4C               	addlw	(low (_nome| 0))& (0+255)
  1623  030A  0084               	movwf	4
  1624  030B  0838               	movf	??_digitarNome,w
  1625  030C  1383               	bcf	3,7	;select IRP bank0
  1626  030D  0080               	movwf	0
  1627                           
  1628                           ;main.c: 165: cont++;
  1629  030E  3001               	movlw	1
  1630  030F  07B9               	addwf	digitarNome@cont,f
  1631  0310  1803               	skipnc
  1632  0311  0ABA               	incf	digitarNome@cont+1,f
  1633  0312  3000               	movlw	0
  1634  0313  07BA               	addwf	digitarNome@cont+1,f
  1635                           
  1636                           ;main.c: 166: lcd_dat(entrada);
  1637  0314  084B               	movf	_entrada,w
  1638  0315  261C               	fcall	_lcd_dat
  1639  0316                     l2371:	
  1640  0316  3023               	movlw	35
  1641  0317  1283               	bcf	3,5	;RP0=0, select bank0
  1642  0318  1303               	bcf	3,6	;RP1=0, select bank0
  1643  0319  064B               	xorwf	_entrada,w
  1644  031A  1903               	btfsc	3,2
  1645  031B  2B27               	goto	l2375
  1646  031C  083A               	movf	digitarNome@cont+1,w
  1647  031D  3A80               	xorlw	128
  1648  031E  00FF               	movwf	127
  1649  031F  3080               	movlw	128
  1650  0320  027F               	subwf	127,w
  1651  0321  1D03               	skipz
  1652  0322  2B25               	goto	u1795
  1653  0323  3009               	movlw	9
  1654  0324  0239               	subwf	digitarNome@cont,w
  1655  0325                     u1795:	
  1656  0325  1C03               	skipc
  1657  0326  2ADE               	goto	l2355
  1658  0327                     l2375:	
  1659                           
  1660                           ;main.c: 167: }
  1661                           ;main.c: 168: if (cont < 9) {
  1662  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1664  0329  083A               	movf	digitarNome@cont+1,w
  1665  032A  3A80               	xorlw	128
  1666  032B  00FF               	movwf	127
  1667  032C  3080               	movlw	128
  1668  032D  027F               	subwf	127,w
  1669  032E  1D03               	skipz
  1670  032F  2B32               	goto	u1805
  1671  0330  3009               	movlw	9
  1672  0331  0239               	subwf	digitarNome@cont,w
  1673  0332                     u1805:	
  1674  0332  1803               	skipnc
  1675  0333  2B5C               	goto	l2387
  1676                           
  1677                           ;main.c: 169: for (; cont < 9; cont++) {
  1678  0334  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0335  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0336  083A               	movf	digitarNome@cont+1,w
  1681  0337  3A80               	xorlw	128
  1682  0338  00FF               	movwf	127
  1683  0339  3080               	movlw	128
  1684  033A  027F               	subwf	127,w
  1685  033B  1D03               	skipz
  1686  033C  2B3F               	goto	u1815
  1687  033D  3009               	movlw	9
  1688  033E  0239               	subwf	digitarNome@cont,w
  1689  033F                     u1815:	
  1690  033F  1803               	btfsc	3,0
  1691  0340  2B5C               	goto	l2387
  1692  0341                     l2381:	
  1693                           
  1694                           ;main.c: 170: nome[cont] = '#';
  1695  0341  3023               	movlw	35
  1696  0342  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0343  1303               	bcf	3,6	;RP1=0, select bank0
  1698  0344  00B8               	movwf	??_digitarNome
  1699  0345  0839               	movf	digitarNome@cont,w
  1700  0346  3E4C               	addlw	(low (_nome| 0))& (0+255)
  1701  0347  0084               	movwf	4
  1702  0348  0838               	movf	??_digitarNome,w
  1703  0349  1383               	bcf	3,7	;select IRP bank0
  1704  034A  0080               	movwf	0
  1705  034B  3001               	movlw	1
  1706  034C  07B9               	addwf	digitarNome@cont,f
  1707  034D  1803               	skipnc
  1708  034E  0ABA               	incf	digitarNome@cont+1,f
  1709  034F  3000               	movlw	0
  1710  0350  07BA               	addwf	digitarNome@cont+1,f
  1711  0351  083A               	movf	digitarNome@cont+1,w
  1712  0352  3A80               	xorlw	128
  1713  0353  00FF               	movwf	127
  1714  0354  3080               	movlw	128
  1715  0355  027F               	subwf	127,w
  1716  0356  1D03               	skipz
  1717  0357  2B5A               	goto	u1825
  1718  0358  3009               	movlw	9
  1719  0359  0239               	subwf	digitarNome@cont,w
  1720  035A                     u1825:	
  1721  035A  1C03               	skipc
  1722  035B  2B41               	goto	l2381
  1723  035C                     l2387:	
  1724                           
  1725                           ;main.c: 171: }
  1726                           ;main.c: 172: }
  1727                           ;main.c: 173: nome[9] = '\0';
  1728  035C  1283               	bcf	3,5	;RP0=0, select bank0
  1729  035D  1303               	bcf	3,6	;RP1=0, select bank0
  1730  035E  01D5               	clrf	_nome+9
  1731                           
  1732                           ;main.c: 174: estado = 2;
  1733  035F  3002               	movlw	2
  1734  0360  00C8               	movwf	_estado
  1735  0361  3000               	movlw	0
  1736  0362  00C9               	movwf	_estado+1
  1737  0363  0008               	return
  1738  0364                     __end_of_digitarNome:	
  1739                           
  1740                           	psect	text6
  1741  00C6                     __ptext6:	
  1742 ;; *************** function _tc_letra *****************
  1743 ;; Defined at:
  1744 ;;		line 55 in file "teclado.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  timeout         2   12[BANK0 ] unsigned int 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  i               2   17[BANK0 ] int 
  1749 ;;  i               2   15[BANK0 ] int 
  1750 ;;  cont            2   22[BANK0 ] int 
  1751 ;;  num             1   21[BANK0 ] unsigned char 
  1752 ;;  ret             1   20[BANK0 ] unsigned char 
  1753 ;;  num2            1   19[BANK0 ] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      unsigned char 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1763 ;;      Params:         0       2       0       0
  1764 ;;      Locals:         0       9       0       0
  1765 ;;      Temps:          0       1       0       0
  1766 ;;      Totals:         0      12       0       0
  1767 ;;Total ram usage:       12 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    3
  1770 ;; This function calls:
  1771 ;;		_tc_tecla
  1772 ;; This function is called by:
  1773 ;;		_digitarNome
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           
  1778                           ;psect for function _tc_letra
  1779  00C6                     _tc_letra:	
  1780                           
  1781                           ;teclado.c: 56: unsigned char num = tc_tecla(0);
  1782                           
  1783                           ;incstack = 0
  1784                           ; Regs used in _tc_letra: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1785  00C6  3000               	movlw	0
  1786  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1787  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1788  00C9  00A3               	movwf	tc_tecla@timeout
  1789  00CA  00A4               	movwf	tc_tecla@timeout+1
  1790  00CB  2171               	fcall	_tc_tecla
  1791  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1792  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1793  00CE  00AE               	movwf	??_tc_letra
  1794  00CF  082E               	movf	??_tc_letra,w
  1795  00D0  00B5               	movwf	tc_letra@num
  1796                           
  1797                           ;teclado.c: 57: unsigned char num2;
  1798                           ;teclado.c: 58: unsigned char ret;
  1799                           ;teclado.c: 59: int cont = 0;
  1800  00D1  01B6               	clrf	tc_letra@cont
  1801  00D2  01B7               	clrf	tc_letra@cont+1
  1802                           
  1803                           ;teclado.c: 60: switch (num) {
  1804  00D3  292E               	goto	l2221
  1805  00D4                     l2187:	
  1806                           ;teclado.c: 65: case '2':
  1807                           
  1808                           ;teclado.c: 64: break;
  1809                           
  1810                           ;teclado.c: 63: case '1':
  1811                           
  1812                           ;teclado.c: 62: return;
  1813                           
  1814                           ;teclado.c: 61: case '0':
  1815                           
  1816                           
  1817                           ;teclado.c: 66: case '3':
  1818                           ;teclado.c: 67: case '4':
  1819                           ;teclado.c: 68: case '5':
  1820                           ;teclado.c: 69: case '6':
  1821                           ;teclado.c: 70: case '8':
  1822                           ;teclado.c: 71: for (int i = 1; i < 3; i++){
  1823  00D4  3001               	movlw	1
  1824  00D5  00AF               	movwf	tc_letra@i
  1825  00D6  3000               	movlw	0
  1826  00D7  00B0               	movwf	tc_letra@i+1
  1827  00D8                     L10:	
  1828  00D8  0830               	movf	tc_letra@i+1,w
  1829  00D9  3A80               	xorlw	128
  1830  00DA  00FF               	movwf	127
  1831  00DB  3080               	movlw	128
  1832  00DC  027F               	subwf	127,w
  1833  00DD  1D03               	skipz
  1834  00DE  28E1               	goto	u1625
  1835  00DF  3003               	movlw	3
  1836  00E0  022F               	subwf	tc_letra@i,w
  1837  00E1                     u1625:	
  1838  00E1  1803               	btfsc	3,0
  1839  00E2  295E               	goto	l2245
  1840                           
  1841                           ;teclado.c: 72: num2 = tc_tecla(200);
  1842  00E3  30C8               	movlw	200
  1843  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  1844  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  1845  00E6  00A3               	movwf	tc_tecla@timeout
  1846  00E7  3000               	movlw	0
  1847  00E8  00A4               	movwf	tc_tecla@timeout+1
  1848  00E9  2171               	fcall	_tc_tecla
  1849  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1850  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1851  00EC  00AE               	movwf	??_tc_letra
  1852  00ED  082E               	movf	??_tc_letra,w
  1853  00EE  00B3               	movwf	tc_letra@num2
  1854                           
  1855                           ;teclado.c: 73: if(num == num2){
  1856  00EF  0835               	movf	tc_letra@num,w
  1857  00F0  0633               	xorwf	tc_letra@num2,w
  1858  00F1  1D03               	skipz
  1859  00F2  295E               	goto	l2245
  1860                           
  1861                           ;teclado.c: 74: cont++;
  1862  00F3  3001               	movlw	1
  1863  00F4  07B6               	addwf	tc_letra@cont,f
  1864  00F5  1803               	skipnc
  1865  00F6  0AB7               	incf	tc_letra@cont+1,f
  1866  00F7  3000               	movlw	0
  1867  00F8  07B7               	addwf	tc_letra@cont+1,f
  1868                           
  1869                           ;teclado.c: 75: } else break;
  1870  00F9  3001               	movlw	1
  1871  00FA  07AF               	addwf	tc_letra@i,f
  1872  00FB  1803               	skipnc
  1873  00FC  0AB0               	incf	tc_letra@i+1,f
  1874  00FD  3000               	movlw	0
  1875  00FE  07B0               	addwf	tc_letra@i+1,f
  1876  00FF  28D8               	goto	L10
  1877  0100                     l2203:	
  1878                           ;teclado.c: 78: case '7':
  1879                           
  1880                           ;teclado.c: 76: }
  1881                           ;teclado.c: 77: break;
  1882                           
  1883                           
  1884                           ;teclado.c: 79: case '9':
  1885                           ;teclado.c: 80: for (int i = 1; i < 4; i++){
  1886  0100  3001               	movlw	1
  1887  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0103  00B1               	movwf	tc_letra@i_200
  1890  0104  3000               	movlw	0
  1891  0105  00B2               	movwf	tc_letra@i_200+1
  1892  0106                     L11:	
  1893  0106  0832               	movf	tc_letra@i_200+1,w
  1894  0107  3A80               	xorlw	128
  1895  0108  00FF               	movwf	127
  1896  0109  3080               	movlw	128
  1897  010A  027F               	subwf	127,w
  1898  010B  1D03               	skipz
  1899  010C  290F               	goto	u1655
  1900  010D  3004               	movlw	4
  1901  010E  0231               	subwf	tc_letra@i_200,w
  1902  010F                     u1655:	
  1903  010F  1803               	btfsc	3,0
  1904  0110  295E               	goto	l2245
  1905                           
  1906                           ;teclado.c: 81: num2 = tc_tecla(200);
  1907  0111  30C8               	movlw	200
  1908  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1909  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0114  00A3               	movwf	tc_tecla@timeout
  1911  0115  3000               	movlw	0
  1912  0116  00A4               	movwf	tc_tecla@timeout+1
  1913  0117  2171               	fcall	_tc_tecla
  1914  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1915  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1916  011A  00AE               	movwf	??_tc_letra
  1917  011B  082E               	movf	??_tc_letra,w
  1918  011C  00B3               	movwf	tc_letra@num2
  1919                           
  1920                           ;teclado.c: 82: if(num == num2){
  1921  011D  0835               	movf	tc_letra@num,w
  1922  011E  0633               	xorwf	tc_letra@num2,w
  1923  011F  1D03               	skipz
  1924  0120  295E               	goto	l2245
  1925                           
  1926                           ;teclado.c: 83: cont++;
  1927  0121  3001               	movlw	1
  1928  0122  07B6               	addwf	tc_letra@cont,f
  1929  0123  1803               	skipnc
  1930  0124  0AB7               	incf	tc_letra@cont+1,f
  1931  0125  3000               	movlw	0
  1932  0126  07B7               	addwf	tc_letra@cont+1,f
  1933                           
  1934                           ;teclado.c: 84: } else break;
  1935  0127  3001               	movlw	1
  1936  0128  07B1               	addwf	tc_letra@i_200,f
  1937  0129  1803               	skipnc
  1938  012A  0AB2               	incf	tc_letra@i_200+1,f
  1939  012B  3000               	movlw	0
  1940  012C  07B2               	addwf	tc_letra@i_200+1,f
  1941  012D  2906               	goto	L11
  1942  012E                     l2221:	
  1943                           ;teclado.c: 93: }
  1944                           
  1945                           ;teclado.c: 92: break;
  1946                           
  1947                           ;teclado.c: 91: default:
  1948                           
  1949                           ;teclado.c: 90: break;
  1950                           
  1951                           ;teclado.c: 89: case '#':
  1952                           
  1953                           ;teclado.c: 88: break;
  1954                           
  1955                           ;teclado.c: 87: case '*':
  1956                           
  1957                           ;teclado.c: 85: }
  1958                           ;teclado.c: 86: break;
  1959                           
  1960  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1961  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1962  0130  0835               	movf	tc_letra@num,w
  1963                           
  1964                           ; Switch size 1, requested type "space"
  1965                           ; Number of cases is 12, Range of values is 35 to 57
  1966                           ; switch strategies available:
  1967                           ; Name         Instructions Cycles
  1968                           ; direct_byte           32     9 (fixed)
  1969                           ; simple_byte           37    19 (average)
  1970                           ; jumptable            263     9 (fixed)
  1971                           ;	Chosen strategy is direct_byte
  1972  0131  3EDD               	addlw	-35
  1973  0132  1C03               	skipc
  1974  0133  295E               	goto	l2245
  1975  0134  0084               	movwf	4
  1976  0135  3017               	movlw	23
  1977  0136  0204               	subwf	4,w
  1978  0137  1803               	skipnc
  1979  0138  295E               	goto	l2245
  1980  0139  3006               	movlw	high S2587
  1981  013A  008A               	movwf	10
  1982  013B  3050               	movlw	low S2587
  1983  013C  0704               	addwf	4,w
  1984  013D  0082               	movwf	2
  1985                           
  1986                           ;teclado.c: 94: switch (num) {
  1987  013E  295E               	goto	l2245
  1988  013F                     l2223:	
  1989                           ;teclado.c: 95: case '1':
  1990                           
  1991                           
  1992                           ;teclado.c: 96: ret = 0x20;
  1993  013F  3020               	movlw	32
  1994  0140  295A               	goto	L9
  1995  0141                     l2225:	
  1996                           ;teclado.c: 98: case '2':
  1997                           
  1998                           ;teclado.c: 97: break;
  1999                           
  2000                           
  2001                           ;teclado.c: 99: ret = 0x41 + cont;
  2002  0141  0836               	movf	tc_letra@cont,w
  2003  0142  3E41               	addlw	65
  2004  0143  295A               	goto	L9
  2005  0144                     l2227:	
  2006                           ;teclado.c: 101: case '3':
  2007                           
  2008                           ;teclado.c: 100: break;
  2009                           
  2010                           
  2011                           ;teclado.c: 102: ret = 0x44 + cont;
  2012  0144  0836               	movf	tc_letra@cont,w
  2013  0145  3E44               	addlw	68
  2014  0146  295A               	goto	L9
  2015  0147                     l2229:	
  2016                           ;teclado.c: 104: case '4':
  2017                           
  2018                           ;teclado.c: 103: break;
  2019                           
  2020                           
  2021                           ;teclado.c: 105: ret = 0x47 + cont;
  2022  0147  0836               	movf	tc_letra@cont,w
  2023  0148  3E47               	addlw	71
  2024  0149  295A               	goto	L9
  2025  014A                     l2231:	
  2026                           ;teclado.c: 107: case '5':
  2027                           
  2028                           ;teclado.c: 106: break;
  2029                           
  2030                           
  2031                           ;teclado.c: 108: ret = 0x4A + cont;
  2032  014A  0836               	movf	tc_letra@cont,w
  2033  014B  3E4A               	addlw	74
  2034  014C  295A               	goto	L9
  2035  014D                     l2233:	
  2036                           ;teclado.c: 110: case '6':
  2037                           
  2038                           ;teclado.c: 109: break;
  2039                           
  2040                           
  2041                           ;teclado.c: 111: ret = 0x4D + cont;
  2042  014D  0836               	movf	tc_letra@cont,w
  2043  014E  3E4D               	addlw	77
  2044  014F  295A               	goto	L9
  2045  0150                     l2235:	
  2046                           ;teclado.c: 113: case '7':
  2047                           
  2048                           ;teclado.c: 112: break;
  2049                           
  2050                           
  2051                           ;teclado.c: 114: ret = 0x50 + cont;
  2052  0150  0836               	movf	tc_letra@cont,w
  2053  0151  3E50               	addlw	80
  2054  0152  295A               	goto	L9
  2055  0153                     l2237:	
  2056                           ;teclado.c: 116: case '8':
  2057                           
  2058                           ;teclado.c: 115: break;
  2059                           
  2060                           
  2061                           ;teclado.c: 117: ret = 0x54 + cont;
  2062  0153  0836               	movf	tc_letra@cont,w
  2063  0154  3E54               	addlw	84
  2064  0155  295A               	goto	L9
  2065  0156                     l2239:	
  2066                           ;teclado.c: 119: case '9':
  2067                           
  2068                           ;teclado.c: 118: break;
  2069                           
  2070                           
  2071                           ;teclado.c: 120: ret = 0x57 + cont;
  2072  0156  0836               	movf	tc_letra@cont,w
  2073  0157  3E57               	addlw	87
  2074  0158  295A               	goto	L9
  2075  0159                     l2241:	
  2076                           ;teclado.c: 122: case '*':
  2077                           
  2078                           ;teclado.c: 121: break;
  2079                           
  2080                           
  2081                           ;teclado.c: 123: case '#':
  2082                           ;teclado.c: 124: ret = num;
  2083  0159  0835               	movf	tc_letra@num,w
  2084  015A                     L9:	
  2085  015A  00AE               	movwf	??_tc_letra
  2086  015B  082E               	movf	??_tc_letra,w
  2087  015C  00B4               	movwf	tc_letra@ret
  2088                           
  2089                           ;teclado.c: 128: }
  2090                           
  2091                           ;teclado.c: 127: break;
  2092                           
  2093                           ;teclado.c: 126: default:
  2094                           
  2095                           ;teclado.c: 125: break;
  2096  015D  296E               	goto	l2247
  2097  015E                     l2245:	
  2098  015E  1283               	bcf	3,5	;RP0=0, select bank0
  2099  015F  1303               	bcf	3,6	;RP1=0, select bank0
  2100  0160  0835               	movf	tc_letra@num,w
  2101                           
  2102                           ; Switch size 1, requested type "space"
  2103                           ; Number of cases is 11, Range of values is 35 to 57
  2104                           ; switch strategies available:
  2105                           ; Name         Instructions Cycles
  2106                           ; direct_byte           32     9 (fixed)
  2107                           ; simple_byte           34    18 (average)
  2108                           ; jumptable            263     9 (fixed)
  2109                           ;	Chosen strategy is direct_byte
  2110  0161  3EDD               	addlw	-35
  2111  0162  1C03               	skipc
  2112  0163  296E               	goto	l2247
  2113  0164  0084               	movwf	4
  2114  0165  3017               	movlw	23
  2115  0166  0204               	subwf	4,w
  2116  0167  1803               	skipnc
  2117  0168  296E               	goto	l2247
  2118  0169  3006               	movlw	high S2589
  2119  016A  008A               	movwf	10
  2120  016B  3067               	movlw	low S2589
  2121  016C  0704               	addwf	4,w
  2122  016D  0082               	movwf	2
  2123  016E                     l2247:	
  2124                           
  2125                           ;teclado.c: 129: return ret;
  2126  016E  0834               	movf	tc_letra@ret,w
  2127  016F  0008               	return
  2128  0170                     l259:	
  2129  0170  0008               	return
  2130  0171                     __end_of_tc_letra:	
  2131                           
  2132                           	psect	swtext2
  2133  0650                     __pswtext2:	
  2134  0650                     S2587:	
  2135  0650  295E               	ljmp	l2245
  2136  0651  295E               	ljmp	l2245
  2137  0652  295E               	ljmp	l2245
  2138  0653  295E               	ljmp	l2245
  2139  0654  295E               	ljmp	l2245
  2140  0655  295E               	ljmp	l2245
  2141  0656  295E               	ljmp	l2245
  2142  0657  295E               	ljmp	l2245
  2143  0658  295E               	ljmp	l2245
  2144  0659  295E               	ljmp	l2245
  2145  065A  295E               	ljmp	l2245
  2146  065B  295E               	ljmp	l2245
  2147  065C  295E               	ljmp	l2245
  2148  065D  2970               	ljmp	l259
  2149  065E  295E               	ljmp	l2245
  2150  065F  28D4               	ljmp	l2187
  2151  0660  28D4               	ljmp	l2187
  2152  0661  28D4               	ljmp	l2187
  2153  0662  28D4               	ljmp	l2187
  2154  0663  28D4               	ljmp	l2187
  2155  0664  2900               	ljmp	l2203
  2156  0665  28D4               	ljmp	l2187
  2157  0666  2900               	ljmp	l2203
  2158                           
  2159                           	psect	swtext3
  2160  0667                     __pswtext3:	
  2161  0667                     S2589:	
  2162  0667  2959               	ljmp	l2241
  2163  0668  296E               	ljmp	l2247
  2164  0669  296E               	ljmp	l2247
  2165  066A  296E               	ljmp	l2247
  2166  066B  296E               	ljmp	l2247
  2167  066C  296E               	ljmp	l2247
  2168  066D  296E               	ljmp	l2247
  2169  066E  2959               	ljmp	l2241
  2170  066F  296E               	ljmp	l2247
  2171  0670  296E               	ljmp	l2247
  2172  0671  296E               	ljmp	l2247
  2173  0672  296E               	ljmp	l2247
  2174  0673  296E               	ljmp	l2247
  2175  0674  296E               	ljmp	l2247
  2176  0675  293F               	ljmp	l2223
  2177  0676  2941               	ljmp	l2225
  2178  0677  2944               	ljmp	l2227
  2179  0678  2947               	ljmp	l2229
  2180  0679  294A               	ljmp	l2231
  2181  067A  294D               	ljmp	l2233
  2182  067B  2950               	ljmp	l2235
  2183  067C  2953               	ljmp	l2237
  2184  067D  2956               	ljmp	l2239
  2185                           
  2186                           	psect	text7
  2187  05DF                     __ptext7:	
  2188 ;; *************** function _desligar *****************
  2189 ;; Defined at:
  2190 ;;		line 282 in file "main.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;		None
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2204 ;;      Params:         0       0       0       0
  2205 ;;      Locals:         0       0       0       0
  2206 ;;      Temps:          0       3       0       0
  2207 ;;      Totals:         0       3       0       0
  2208 ;;Total ram usage:        3 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    4
  2211 ;; This function calls:
  2212 ;;		_lcd_cmd
  2213 ;;		_lcd_str
  2214 ;; This function is called by:
  2215 ;;		_maquina
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           
  2220                           ;psect for function _desligar
  2221  05DF                     _desligar:	
  2222                           
  2223                           ;main.c: 283: lcd_cmd(0x01);
  2224                           
  2225                           ;incstack = 0
  2226                           ; Regs used in _desligar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2227  05DF  3001               	movlw	1
  2228  05E0  2636               	fcall	_lcd_cmd
  2229                           
  2230                           ;main.c: 284: lcd_cmd(0x80);
  2231  05E1  3080               	movlw	128
  2232  05E2  2636               	fcall	_lcd_cmd
  2233                           
  2234                           ;main.c: 285: lcd_str("Desligando...");
  2235  05E3  3014               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2236  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  2237  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  2238  05E6  00A3               	movwf	lcd_str@str
  2239  05E7  3080               	movlw	128
  2240  05E8  00A4               	movwf	lcd_str@str+1
  2241  05E9  25FE               	fcall	_lcd_str
  2242                           
  2243                           ;main.c: 287: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2244  05EA  3006               	movlw	6
  2245  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  2246  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  2247  05ED  00A9               	movwf	??_desligar+2
  2248  05EE  3013               	movlw	19
  2249  05EF  00A8               	movwf	??_desligar+1
  2250  05F0  30AD               	movlw	173
  2251  05F1  00A7               	movwf	??_desligar
  2252  05F2                     u1887:	
  2253  05F2  0BA7               	decfsz	??_desligar,f
  2254  05F3  2DF2               	goto	u1887
  2255  05F4  0BA8               	decfsz	??_desligar+1,f
  2256  05F5  2DF2               	goto	u1887
  2257  05F6  0BA9               	decfsz	??_desligar+2,f
  2258  05F7  2DF2               	goto	u1887
  2259  05F8  0000               	nop
  2260                           
  2261                           ;main.c: 288: estado = 0;
  2262  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  2263  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  2264  05FB  01C8               	clrf	_estado
  2265  05FC  01C9               	clrf	_estado+1
  2266  05FD  0008               	return
  2267  05FE                     __end_of_desligar:	
  2268                           
  2269                           	psect	text8
  2270  0599                     __ptext8:	
  2271 ;; *************** function _chamar *****************
  2272 ;; Defined at:
  2273 ;;		line 270 in file "main.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;		None
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       0       0       0
  2288 ;;      Locals:         0       0       0       0
  2289 ;;      Temps:          0       0       0       0
  2290 ;;      Totals:         0       0       0       0
  2291 ;;Total ram usage:        0 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		_lcd_cmd
  2296 ;;		_lcd_str
  2297 ;;		_tc_tecla
  2298 ;; This function is called by:
  2299 ;;		_maquina
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           
  2304                           ;psect for function _chamar
  2305  0599                     _chamar:	
  2306                           
  2307                           ;main.c: 271: lcd_cmd(0x01);
  2308                           
  2309                           ;incstack = 0
  2310                           ; Regs used in _chamar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2311  0599  3001               	movlw	1
  2312  059A  2636               	fcall	_lcd_cmd
  2313                           
  2314                           ;main.c: 272: lcd_cmd(0x80);
  2315  059B  3080               	movlw	128
  2316  059C  2636               	fcall	_lcd_cmd
  2317                           
  2318                           ;main.c: 273: lcd_str("Chamando...");
  2319  059D  3030               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2320  059E  1283               	bcf	3,5	;RP0=0, select bank0
  2321  059F  1303               	bcf	3,6	;RP1=0, select bank0
  2322  05A0  00A3               	movwf	lcd_str@str
  2323  05A1  3080               	movlw	128
  2324  05A2  00A4               	movwf	lcd_str@str+1
  2325  05A3  25FE               	fcall	_lcd_str
  2326                           
  2327                           ;main.c: 274: lcd_cmd(0xC0);
  2328  05A4  30C0               	movlw	192
  2329  05A5  2636               	fcall	_lcd_cmd
  2330                           
  2331                           ;main.c: 275: lcd_str(nome);
  2332  05A6  304C               	movlw	(low (_nome| 0))& (0+255)
  2333  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  2334  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  2335  05A9  00A3               	movwf	lcd_str@str
  2336  05AA  3000               	movlw	0
  2337  05AB  00A4               	movwf	lcd_str@str+1
  2338  05AC  25FE               	fcall	_lcd_str
  2339  05AD                     l2397:	
  2340                           ;main.c: 277: while (tc_tecla(0) != '#');
  2341                           
  2342  05AD  3000               	movlw	0
  2343  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  2344  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  2345  05B0  00A3               	movwf	tc_tecla@timeout
  2346  05B1  00A4               	movwf	tc_tecla@timeout+1
  2347  05B2  2171               	fcall	_tc_tecla
  2348  05B3  3A23               	xorlw	35
  2349  05B4  1D03               	skipz
  2350  05B5  2DAD               	goto	l2397
  2351                           
  2352                           ;main.c: 279: estado = 6;
  2353  05B6  3006               	movlw	6
  2354  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2355  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2356  05B9  00C8               	movwf	_estado
  2357  05BA  3000               	movlw	0
  2358  05BB  00C9               	movwf	_estado+1
  2359  05BC  0008               	return
  2360  05BD                     __end_of_chamar:	
  2361                           
  2362                           	psect	text9
  2363  0219                     __ptext9:	
  2364 ;; *************** function _buscar *****************
  2365 ;; Defined at:
  2366 ;;		line 211 in file "main.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;		None
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  i               2    2[BANK0 ] int 
  2371 ;;  num             2    0[BANK0 ] int 
  2372 ;;  i               2    5[BANK0 ] int 
  2373 ;;  end             1    4[BANK0 ] unsigned char 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  1    wreg      void 
  2376 ;; Registers used:
  2377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2383 ;;      Params:         0       0       0       0
  2384 ;;      Locals:         0       7       0       0
  2385 ;;      Temps:          2       0       0       0
  2386 ;;      Totals:         2       7       0       0
  2387 ;;Total ram usage:        9 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    2
  2390 ;; This function calls:
  2391 ;;		_eeprom_read
  2392 ;; This function is called by:
  2393 ;;		_maquina
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           
  2398                           ;psect for function _buscar
  2399  0219                     _buscar:	
  2400                           
  2401                           ;main.c: 212: unsigned char end = 0x1;
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _buscar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2405  0219  1283               	bcf	3,5	;RP0=0, select bank0
  2406  021A  1303               	bcf	3,6	;RP1=0, select bank0
  2407  021B  01A4               	clrf	buscar@end
  2408  021C  0AA4               	incf	buscar@end,f
  2409  021D                     l1847:	
  2410                           ;main.c: 213: static bit achou = 0b0;
  2411                           ;main.c: 214: while (end < endereco) {
  2412                           
  2413  021D  084A               	movf	_endereco,w
  2414  021E  0224               	subwf	buscar@end,w
  2415  021F  1803               	btfsc	3,0
  2416  0220  2A9B               	goto	l152
  2417                           
  2418                           ;main.c: 215: achou = 0b1;
  2419  0221  1478               	bsf	buscar@achou/(0+8),buscar@achou& (0+7)
  2420                           
  2421                           ;main.c: 216: for (int i = 0; i < 9 && numero[i] != '\0'; i++) {
  2422  0222  01A5               	clrf	buscar@i
  2423  0223  01A6               	clrf	buscar@i+1
  2424  0224  2A47               	goto	l1819
  2425  0225                     l1811:	
  2426                           
  2427                           ;main.c: 217: int num = eeprom_read(end + i);
  2428  0225  0825               	movf	buscar@i,w
  2429  0226  0724               	addwf	buscar@end,w
  2430  0227  267E               	fcall	_eeprom_read
  2431  0228  00F6               	movwf	??_buscar
  2432  0229  01F7               	clrf	??_buscar+1
  2433  022A  0876               	movf	??_buscar,w
  2434  022B  1283               	bcf	3,5	;RP0=0, select bank0
  2435  022C  1303               	bcf	3,6	;RP1=0, select bank0
  2436  022D  00A0               	movwf	buscar@num
  2437  022E  0877               	movf	??_buscar+1,w
  2438  022F  00A1               	movwf	buscar@num+1
  2439                           
  2440                           ;main.c: 218: if (num != numero[i]) {
  2441  0230  0825               	movf	buscar@i,w
  2442  0231  3E3E               	addlw	(low (_numero| 0))& (0+255)
  2443  0232  0084               	movwf	4
  2444  0233  1383               	bcf	3,7	;select IRP bank0
  2445  0234  0800               	movf	0,w
  2446  0235  00F6               	movwf	??_buscar
  2447  0236  01F7               	clrf	??_buscar+1
  2448  0237  0821               	movf	buscar@num+1,w
  2449  0238  0677               	xorwf	??_buscar+1,w
  2450  0239  1D03               	skipz
  2451  023A  2A3D               	goto	u1225
  2452  023B  0820               	movf	buscar@num,w
  2453  023C  0676               	xorwf	??_buscar,w
  2454  023D                     u1225:	
  2455  023D  1903               	skipnz
  2456  023E  2A41               	goto	l1817
  2457                           
  2458                           ;main.c: 219: achou = 0b0;
  2459  023F  1078               	bcf	buscar@achou/(0+8),buscar@achou& (0+7)
  2460                           
  2461                           ;main.c: 220: break;
  2462  0240  2A5B               	goto	l1823
  2463  0241                     l1817:	
  2464  0241  3001               	movlw	1
  2465  0242  07A5               	addwf	buscar@i,f
  2466  0243  1803               	skipnc
  2467  0244  0AA6               	incf	buscar@i+1,f
  2468  0245  3000               	movlw	0
  2469  0246  07A6               	addwf	buscar@i+1,f
  2470  0247                     l1819:	
  2471  0247  0826               	movf	buscar@i+1,w
  2472  0248  3A80               	xorlw	128
  2473  0249  00FF               	movwf	127
  2474  024A  3080               	movlw	128
  2475  024B  027F               	subwf	127,w
  2476  024C  1D03               	skipz
  2477  024D  2A50               	goto	u1235
  2478  024E  3009               	movlw	9
  2479  024F  0225               	subwf	buscar@i,w
  2480  0250                     u1235:	
  2481  0250  1803               	skipnc
  2482  0251  2A5B               	goto	l1823
  2483  0252  1283               	bcf	3,5	;RP0=0, select bank0
  2484  0253  1303               	bcf	3,6	;RP1=0, select bank0
  2485  0254  0825               	movf	buscar@i,w
  2486  0255  3E3E               	addlw	(low (_numero| 0))& (0+255)
  2487  0256  0084               	movwf	4
  2488  0257  1383               	bcf	3,7	;select IRP bank0
  2489  0258  0800               	movf	0,w
  2490  0259  1D03               	btfss	3,2
  2491  025A  2A25               	goto	l1811
  2492  025B                     l1823:	
  2493                           
  2494                           ;main.c: 221: }
  2495                           ;main.c: 222: }
  2496                           ;main.c: 223: end += 9;
  2497  025B  3009               	movlw	9
  2498  025C  00F6               	movwf	??_buscar
  2499  025D  0876               	movf	??_buscar,w
  2500  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2501  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2502  0260  07A4               	addwf	buscar@end,f
  2503                           
  2504                           ;main.c: 224: if (achou) {
  2505  0261  1C78               	btfss	buscar@achou/(0+8),buscar@achou& (0+7)
  2506  0262  2A96               	goto	l1845
  2507                           
  2508                           ;main.c: 225: for (int i = 0; i < 10; i++) {
  2509  0263  01A2               	clrf	buscar@i_147
  2510  0264  01A3               	clrf	buscar@i_147+1
  2511  0265  0823               	movf	buscar@i_147+1,w
  2512  0266  3A80               	xorlw	128
  2513  0267  00FF               	movwf	127
  2514  0268  3080               	movlw	128
  2515  0269  027F               	subwf	127,w
  2516  026A  1D03               	skipz
  2517  026B  2A6E               	goto	u1265
  2518  026C  300A               	movlw	10
  2519  026D  0222               	subwf	buscar@i_147,w
  2520  026E                     u1265:	
  2521  026E  1803               	btfsc	3,0
  2522  026F  2A92               	goto	l1841
  2523  0270                     l1833:	
  2524                           
  2525                           ;main.c: 226: nome[i] = eeprom_read(end);
  2526  0270  1283               	bcf	3,5	;RP0=0, select bank0
  2527  0271  1303               	bcf	3,6	;RP1=0, select bank0
  2528  0272  0824               	movf	buscar@end,w
  2529  0273  267E               	fcall	_eeprom_read
  2530  0274  00F6               	movwf	??_buscar
  2531  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2532  0276  1303               	bcf	3,6	;RP1=0, select bank0
  2533  0277  0822               	movf	buscar@i_147,w
  2534  0278  3E4C               	addlw	(low (_nome| 0))& (0+255)
  2535  0279  0084               	movwf	4
  2536  027A  0876               	movf	??_buscar,w
  2537  027B  1383               	bcf	3,7	;select IRP bank0
  2538  027C  0080               	movwf	0
  2539                           
  2540                           ;main.c: 227: end++;
  2541  027D  3001               	movlw	1
  2542  027E  00F6               	movwf	??_buscar
  2543  027F  0876               	movf	??_buscar,w
  2544  0280  07A4               	addwf	buscar@end,f
  2545  0281  3001               	movlw	1
  2546  0282  07A2               	addwf	buscar@i_147,f
  2547  0283  1803               	skipnc
  2548  0284  0AA3               	incf	buscar@i_147+1,f
  2549  0285  3000               	movlw	0
  2550  0286  07A3               	addwf	buscar@i_147+1,f
  2551  0287  0823               	movf	buscar@i_147+1,w
  2552  0288  3A80               	xorlw	128
  2553  0289  00FF               	movwf	127
  2554  028A  3080               	movlw	128
  2555  028B  027F               	subwf	127,w
  2556  028C  1D03               	skipz
  2557  028D  2A90               	goto	u1275
  2558  028E  300A               	movlw	10
  2559  028F  0222               	subwf	buscar@i_147,w
  2560  0290                     u1275:	
  2561  0290  1C03               	skipc
  2562  0291  2A70               	goto	l1833
  2563  0292                     l1841:	
  2564                           
  2565                           ;main.c: 228: }
  2566                           ;main.c: 229: nome[9] = '\0';
  2567  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2568  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2569  0294  01D5               	clrf	_nome+9
  2570                           
  2571                           ;main.c: 230: break;
  2572  0295  2A9B               	goto	l152
  2573  0296                     l1845:	
  2574                           ;main.c: 231: } else end += 10;
  2575                           
  2576  0296  300A               	movlw	10
  2577  0297  00F6               	movwf	??_buscar
  2578  0298  0876               	movf	??_buscar,w
  2579  0299  07A4               	addwf	buscar@end,f
  2580  029A  2A1D               	goto	l1847
  2581  029B                     l152:	
  2582                           
  2583                           ;main.c: 232: }
  2584                           ;main.c: 233: if (!achou) {
  2585  029B  1878               	btfsc	buscar@achou/(0+8),buscar@achou& (0+7)
  2586  029C  2ABA               	goto	l1853
  2587                           
  2588                           ;main.c: 234: nome[0] = 'u';
  2589  029D  3075               	movlw	117
  2590  029E  00F6               	movwf	??_buscar
  2591  029F  0876               	movf	??_buscar,w
  2592  02A0  00CC               	movwf	_nome
  2593                           
  2594                           ;main.c: 235: nome[1] = 'n';
  2595  02A1  306E               	movlw	110
  2596  02A2  00F6               	movwf	??_buscar
  2597  02A3  0876               	movf	??_buscar,w
  2598  02A4  00CD               	movwf	_nome+1
  2599                           
  2600                           ;main.c: 236: nome[2] = 'k';
  2601  02A5  306B               	movlw	107
  2602  02A6  00F6               	movwf	??_buscar
  2603  02A7  0876               	movf	??_buscar,w
  2604  02A8  00CE               	movwf	_nome+2
  2605                           
  2606                           ;main.c: 237: nome[3] = 'n';
  2607  02A9  306E               	movlw	110
  2608  02AA  00F6               	movwf	??_buscar
  2609  02AB  0876               	movf	??_buscar,w
  2610  02AC  00CF               	movwf	_nome+3
  2611                           
  2612                           ;main.c: 238: nome[4] = 'o';
  2613  02AD  306F               	movlw	111
  2614  02AE  00F6               	movwf	??_buscar
  2615  02AF  0876               	movf	??_buscar,w
  2616  02B0  00D0               	movwf	_nome+4
  2617                           
  2618                           ;main.c: 239: nome[5] = 'w';
  2619  02B1  3077               	movlw	119
  2620  02B2  00F6               	movwf	??_buscar
  2621  02B3  0876               	movf	??_buscar,w
  2622  02B4  00D1               	movwf	_nome+5
  2623                           
  2624                           ;main.c: 240: nome[6] = 'n';
  2625  02B5  306E               	movlw	110
  2626  02B6  00F6               	movwf	??_buscar
  2627  02B7  0876               	movf	??_buscar,w
  2628  02B8  00D2               	movwf	_nome+6
  2629                           
  2630                           ;main.c: 241: nome[7] = '\0';
  2631  02B9  01D3               	clrf	_nome+7
  2632  02BA                     l1853:	
  2633                           
  2634                           ;main.c: 243: }
  2635                           ;main.c: 244: estado = 5;
  2636  02BA  3005               	movlw	5
  2637  02BB  00C8               	movwf	_estado
  2638  02BC  3000               	movlw	0
  2639  02BD  00C9               	movwf	_estado+1
  2640  02BE  0008               	return
  2641  02BF                     __end_of_buscar:	
  2642                           
  2643                           	psect	text10
  2644  067E                     __ptext10:	
  2645 ;; *************** function _eeprom_read *****************
  2646 ;; Defined at:
  2647 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic\eeread.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  addr            1    wreg     unsigned char 
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  addr            1    5[COMMON] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      unsigned char 
  2654 ;; Registers used:
  2655 ;;		wreg, status,2, status,0
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2661 ;;      Params:         0       0       0       0
  2662 ;;      Locals:         1       0       0       0
  2663 ;;      Temps:          1       0       0       0
  2664 ;;      Totals:         2       0       0       0
  2665 ;;Total ram usage:        2 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    1
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_main
  2672 ;;		_maquina
  2673 ;;		_buscar
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           
  2678                           ;psect for function _eeprom_read
  2679  067E                     _eeprom_read:	
  2680                           
  2681                           ;incstack = 0
  2682                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  2683                           ;eeprom_read@addr stored from wreg
  2684  067E  00F5               	movwf	eeprom_read@addr
  2685  067F                     l307:	
  2686  067F  0064               	clrwdt	;# 
  2687  0680  1683               	bsf	3,5	;RP0=1, select bank1
  2688  0681  1303               	bcf	3,6	;RP1=0, select bank1
  2689  0682  189C               	btfsc	28,1	;volsfr
  2690  0683  2E7F               	goto	l307
  2691  0684  0875               	movf	eeprom_read@addr,w
  2692  0685  009B               	movwf	27	;volatile
  2693  0686  303F               	movlw	63
  2694  0687  00F4               	movwf	??_eeprom_read
  2695  0688  0874               	movf	??_eeprom_read,w
  2696  0689  059C               	andwf	28,f	;volsfr
  2697  068A  141C               	bsf	28,0	;volsfr
  2698  068B  1003               	clrc
  2699  068C  181C               	btfsc	28,0	;volsfr
  2700  068D  1403               	setc
  2701  068E  3000               	movlw	0
  2702  068F  1803               	skipnc
  2703  0690  3001               	movlw	1
  2704  0691  081A               	movf	26,w	;volatile
  2705  0692  0008               	return
  2706  0693                     __end_of_eeprom_read:	
  2707                           
  2708                           	psect	text11
  2709  0364                     __ptext11:	
  2710 ;; *************** function _armazenar *****************
  2711 ;; Defined at:
  2712 ;;		line 247 in file "main.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  i               2   15[BANK0 ] int 
  2717 ;;  i               2   13[BANK0 ] int 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2727 ;;      Params:         0       0       0       0
  2728 ;;      Locals:         0       4       0       0
  2729 ;;      Temps:          0       1       0       0
  2730 ;;      Totals:         0       5       0       0
  2731 ;;Total ram usage:        5 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    4
  2734 ;; This function calls:
  2735 ;;		_eeprom_write
  2736 ;;		_lcd_cmd
  2737 ;;		_lcd_str
  2738 ;;		_tc_tecla
  2739 ;; This function is called by:
  2740 ;;		_maquina
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _armazenar
  2746  0364                     _armazenar:	
  2747                           
  2748                           ;main.c: 248: lcd_cmd(0x01);
  2749                           
  2750                           ;incstack = 0
  2751                           ; Regs used in _armazenar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2752  0364  3001               	movlw	1
  2753  0365  2636               	fcall	_lcd_cmd
  2754                           
  2755                           ;main.c: 249: lcd_cmd(0x80);
  2756  0366  3080               	movlw	128
  2757  0367  2636               	fcall	_lcd_cmd
  2758                           
  2759                           ;main.c: 250: lcd_str("Armazenando...");
  2760  0368  3005               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2761  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2762  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2763  036B  00A3               	movwf	lcd_str@str
  2764  036C  3080               	movlw	128
  2765  036D  00A4               	movwf	lcd_str@str+1
  2766  036E  25FE               	fcall	_lcd_str
  2767                           
  2768                           ;main.c: 252: for (int i = 0; i < 9; i++) {
  2769  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2770  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0371  01AD               	clrf	armazenar@i
  2772  0372  01AE               	clrf	armazenar@i+1
  2773  0373  082E               	movf	armazenar@i+1,w
  2774  0374  3A80               	xorlw	128
  2775  0375  00FF               	movwf	127
  2776  0376  3080               	movlw	128
  2777  0377  027F               	subwf	127,w
  2778  0378  1D03               	skipz
  2779  0379  2B7C               	goto	u1845
  2780  037A  3009               	movlw	9
  2781  037B  022D               	subwf	armazenar@i,w
  2782  037C                     u1845:	
  2783  037C  1803               	btfsc	3,0
  2784  037D  2BA1               	goto	l2419
  2785  037E                     l2411:	
  2786                           
  2787                           ;main.c: 253: eeprom_write(endereco, numero[i]);
  2788  037E  1283               	bcf	3,5	;RP0=0, select bank0
  2789  037F  1303               	bcf	3,6	;RP1=0, select bank0
  2790  0380  082D               	movf	armazenar@i,w
  2791  0381  3E3E               	addlw	(low (_numero| 0))& (0+255)
  2792  0382  0084               	movwf	4
  2793  0383  1383               	bcf	3,7	;select IRP bank0
  2794  0384  0800               	movf	0,w
  2795  0385  00AC               	movwf	??_armazenar
  2796  0386  082C               	movf	??_armazenar,w
  2797  0387  00F4               	movwf	eeprom_write@value
  2798  0388  084A               	movf	_endereco,w
  2799  0389  25BD               	fcall	_eeprom_write
  2800                           
  2801                           ;main.c: 254: endereco++;
  2802  038A  3001               	movlw	1
  2803  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2804  038C  1303               	bcf	3,6	;RP1=0, select bank0
  2805  038D  00AC               	movwf	??_armazenar
  2806  038E  082C               	movf	??_armazenar,w
  2807  038F  07CA               	addwf	_endereco,f
  2808  0390  3001               	movlw	1
  2809  0391  07AD               	addwf	armazenar@i,f
  2810  0392  1803               	skipnc
  2811  0393  0AAE               	incf	armazenar@i+1,f
  2812  0394  3000               	movlw	0
  2813  0395  07AE               	addwf	armazenar@i+1,f
  2814  0396  082E               	movf	armazenar@i+1,w
  2815  0397  3A80               	xorlw	128
  2816  0398  00FF               	movwf	127
  2817  0399  3080               	movlw	128
  2818  039A  027F               	subwf	127,w
  2819  039B  1D03               	skipz
  2820  039C  2B9F               	goto	u1855
  2821  039D  3009               	movlw	9
  2822  039E  022D               	subwf	armazenar@i,w
  2823  039F                     u1855:	
  2824  039F  1C03               	skipc
  2825  03A0  2B7E               	goto	l2411
  2826  03A1                     l2419:	
  2827                           
  2828                           ;main.c: 255: }
  2829                           ;main.c: 256: for (int i = 0; i < 9; i++) {
  2830  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2831  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2832  03A3  01AF               	clrf	armazenar@i_151
  2833  03A4  01B0               	clrf	armazenar@i_151+1
  2834  03A5  0830               	movf	armazenar@i_151+1,w
  2835  03A6  3A80               	xorlw	128
  2836  03A7  00FF               	movwf	127
  2837  03A8  3080               	movlw	128
  2838  03A9  027F               	subwf	127,w
  2839  03AA  1D03               	skipz
  2840  03AB  2BAE               	goto	u1865
  2841  03AC  3009               	movlw	9
  2842  03AD  022F               	subwf	armazenar@i_151,w
  2843  03AE                     u1865:	
  2844  03AE  1803               	btfsc	3,0
  2845  03AF  2BD3               	goto	l2433
  2846  03B0                     l2425:	
  2847                           
  2848                           ;main.c: 257: eeprom_write(endereco, nome[i]);
  2849  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2850  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2851  03B2  082F               	movf	armazenar@i_151,w
  2852  03B3  3E4C               	addlw	(low (_nome| 0))& (0+255)
  2853  03B4  0084               	movwf	4
  2854  03B5  1383               	bcf	3,7	;select IRP bank0
  2855  03B6  0800               	movf	0,w
  2856  03B7  00AC               	movwf	??_armazenar
  2857  03B8  082C               	movf	??_armazenar,w
  2858  03B9  00F4               	movwf	eeprom_write@value
  2859  03BA  084A               	movf	_endereco,w
  2860  03BB  25BD               	fcall	_eeprom_write
  2861                           
  2862                           ;main.c: 258: endereco++;
  2863  03BC  3001               	movlw	1
  2864  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  2865  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2866  03BF  00AC               	movwf	??_armazenar
  2867  03C0  082C               	movf	??_armazenar,w
  2868  03C1  07CA               	addwf	_endereco,f
  2869  03C2  3001               	movlw	1
  2870  03C3  07AF               	addwf	armazenar@i_151,f
  2871  03C4  1803               	skipnc
  2872  03C5  0AB0               	incf	armazenar@i_151+1,f
  2873  03C6  3000               	movlw	0
  2874  03C7  07B0               	addwf	armazenar@i_151+1,f
  2875  03C8  0830               	movf	armazenar@i_151+1,w
  2876  03C9  3A80               	xorlw	128
  2877  03CA  00FF               	movwf	127
  2878  03CB  3080               	movlw	128
  2879  03CC  027F               	subwf	127,w
  2880  03CD  1D03               	skipz
  2881  03CE  2BD1               	goto	u1875
  2882  03CF  3009               	movlw	9
  2883  03D0  022F               	subwf	armazenar@i_151,w
  2884  03D1                     u1875:	
  2885  03D1  1C03               	skipc
  2886  03D2  2BB0               	goto	l2425
  2887  03D3                     l2433:	
  2888                           
  2889                           ;main.c: 259: }
  2890                           ;main.c: 260: eeprom_write(0x0, endereco);
  2891  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2892  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2893  03D5  084A               	movf	_endereco,w
  2894  03D6  00AC               	movwf	??_armazenar
  2895  03D7  082C               	movf	??_armazenar,w
  2896  03D8  00F4               	movwf	eeprom_write@value
  2897  03D9  3000               	movlw	0
  2898  03DA  25BD               	fcall	_eeprom_write
  2899                           
  2900                           ;main.c: 263: lcd_cmd(0x01);
  2901  03DB  3001               	movlw	1
  2902  03DC  2636               	fcall	_lcd_cmd
  2903                           
  2904                           ;main.c: 264: lcd_cmd(0x80);
  2905  03DD  3080               	movlw	128
  2906  03DE  2636               	fcall	_lcd_cmd
  2907                           
  2908                           ;main.c: 265: lcd_str("Salvo!");
  2909  03DF  305C               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2910  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2911  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2912  03E2  00A3               	movwf	lcd_str@str
  2913  03E3  3080               	movlw	128
  2914  03E4  00A4               	movwf	lcd_str@str+1
  2915  03E5  25FE               	fcall	_lcd_str
  2916                           
  2917                           ;main.c: 266: tc_tecla(200);
  2918  03E6  30C8               	movlw	200
  2919  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2920  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2921  03E9  00A3               	movwf	tc_tecla@timeout
  2922  03EA  3000               	movlw	0
  2923  03EB  00A4               	movwf	tc_tecla@timeout+1
  2924  03EC  2171               	fcall	_tc_tecla
  2925                           
  2926                           ;main.c: 267: estado = 0;
  2927  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2928  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2929  03EF  01C8               	clrf	_estado
  2930  03F0  01C9               	clrf	_estado+1
  2931  03F1  0008               	return
  2932  03F2                     __end_of_armazenar:	
  2933                           
  2934                           	psect	text12
  2935  05BD                     __ptext12:	
  2936 ;; *************** function _eeprom_write *****************
  2937 ;; Defined at:
  2938 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic\eewrite.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  addr            1    wreg     unsigned char 
  2941 ;;  value           1    4[COMMON] unsigned char 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  addr            1    6[COMMON] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2953 ;;      Params:         1       0       0       0
  2954 ;;      Locals:         1       0       0       0
  2955 ;;      Temps:          1       0       0       0
  2956 ;;      Totals:         3       0       0       0
  2957 ;;Total ram usage:        3 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    1
  2960 ;; This function calls:
  2961 ;;		Nothing
  2962 ;; This function is called by:
  2963 ;;		_main
  2964 ;;		_armazenar
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function _eeprom_write
  2970  05BD                     _eeprom_write:	
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2974                           ;eeprom_write@addr stored from wreg
  2975  05BD  00F6               	movwf	eeprom_write@addr
  2976  05BE                     l329:	
  2977  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  2978  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  2979  05C0  189C               	btfsc	28,1	;volsfr
  2980  05C1  2DBE               	goto	l329
  2981  05C2  0876               	movf	eeprom_write@addr,w
  2982  05C3  009B               	movwf	27	;volatile
  2983  05C4  0874               	movf	eeprom_write@value,w
  2984  05C5  009A               	movwf	26	;volatile
  2985  05C6  303F               	movlw	63
  2986  05C7  00F5               	movwf	??_eeprom_write
  2987  05C8  0875               	movf	??_eeprom_write,w
  2988  05C9  059C               	andwf	28,f	;volsfr
  2989  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  2990  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  2991  05CC  1003               	bcf	3,0	;volatile
  2992  05CD  1B8B               	btfsc	11,7	;volatile
  2993  05CE  1403               	bsf	3,0	;volatile
  2994  05CF  138B               	bcf	11,7	;volatile
  2995  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  2996  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  2997  05D2  151C               	bsf	28,2	;volsfr
  2998  05D3  3055               	movlw	85
  2999  05D4  009D               	movwf	29	;volsfr
  3000  05D5  30AA               	movlw	170
  3001  05D6  009D               	movwf	29	;volsfr
  3002  05D7  149C               	bsf	28,1	;volsfr
  3003  05D8  111C               	bcf	28,2	;volsfr
  3004  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  3005  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  3006  05DB  1C03               	btfss	3,0	;volatile
  3007  05DC  0008               	return
  3008  05DD  178B               	bsf	11,7	;volatile
  3009  05DE  0008               	return
  3010  05DF                     __end_of_eeprom_write:	
  3011                           
  3012                           	psect	text13
  3013  04D1                     __ptext13:	
  3014 ;; *************** function _adicionar *****************
  3015 ;; Defined at:
  3016 ;;		line 119 in file "main.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3030 ;;      Params:         0       0       0       0
  3031 ;;      Locals:         0       0       0       0
  3032 ;;      Temps:          0       1       0       0
  3033 ;;      Totals:         0       1       0       0
  3034 ;;Total ram usage:        1 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    4
  3037 ;; This function calls:
  3038 ;;		_ativaModo
  3039 ;;		_lcd_cmd
  3040 ;;		_lcd_str
  3041 ;;		_tc_tecla
  3042 ;; This function is called by:
  3043 ;;		_maquina
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           
  3048                           ;psect for function _adicionar
  3049  04D1                     _adicionar:	
  3050                           
  3051                           ;main.c: 120: lcd_cmd(0x01);
  3052                           
  3053                           ;incstack = 0
  3054                           ; Regs used in _adicionar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3055  04D1  3001               	movlw	1
  3056  04D2  2636               	fcall	_lcd_cmd
  3057                           
  3058                           ;main.c: 121: lcd_cmd(0x80);
  3059  04D3  3080               	movlw	128
  3060  04D4  2636               	fcall	_lcd_cmd
  3061                           
  3062                           ;main.c: 122: lcd_str("Adicionar");
  3063  04D5  3052               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3064  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  3065  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  3066  04D8  00A3               	movwf	lcd_str@str
  3067  04D9  3080               	movlw	128
  3068  04DA  00A4               	movwf	lcd_str@str+1
  3069  04DB  25FE               	fcall	_lcd_str
  3070                           
  3071                           ;main.c: 123: entrada = tc_tecla(0);
  3072  04DC  3000               	movlw	0
  3073  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  3074  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  3075  04DF  00A3               	movwf	tc_tecla@timeout
  3076  04E0  00A4               	movwf	tc_tecla@timeout+1
  3077  04E1  2171               	fcall	_tc_tecla
  3078  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  3079  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  3080  04E4  00AC               	movwf	??_adicionar
  3081  04E5  082C               	movf	??_adicionar,w
  3082  04E6  00CB               	movwf	_entrada
  3083                           
  3084                           ;main.c: 125: switch (entrada) {
  3085  04E7  2CF3               	goto	l2289
  3086  04E8                     l2281:	
  3087                           ;main.c: 126: case '*':
  3088                           
  3089                           
  3090                           ;main.c: 127: estado = 0;
  3091  04E8  01C8               	clrf	_estado
  3092  04E9  01C9               	clrf	_estado+1
  3093                           
  3094                           ;main.c: 128: break;
  3095  04EA  0008               	return
  3096  04EB                     l2283:	
  3097                           ;main.c: 129: case '#':
  3098                           
  3099                           
  3100                           ;main.c: 130: ativaModo();
  3101  04EB  26B9               	fcall	_ativaModo
  3102                           
  3103                           ;main.c: 131: estado = 3;
  3104  04EC  3003               	movlw	3
  3105  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  3106  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  3107  04EF  00C8               	movwf	_estado
  3108  04F0  3000               	movlw	0
  3109  04F1  00C9               	movwf	_estado+1
  3110                           
  3111                           ;main.c: 135: }
  3112                           
  3113                           ;main.c: 134: break;
  3114                           
  3115                           ;main.c: 133: default:
  3116                           
  3117                           ;main.c: 132: break;
  3118  04F2  0008               	return
  3119  04F3                     l2289:	
  3120  04F3  084B               	movf	_entrada,w
  3121                           
  3122                           ; Switch size 1, requested type "space"
  3123                           ; Number of cases is 2, Range of values is 35 to 42
  3124                           ; switch strategies available:
  3125                           ; Name         Instructions Cycles
  3126                           ; simple_byte            7     4 (average)
  3127                           ; direct_byte           17     9 (fixed)
  3128                           ; jumptable            263     9 (fixed)
  3129                           ;	Chosen strategy is simple_byte
  3130  04F4  3A23               	xorlw	35	; case 35
  3131  04F5  1903               	skipnz
  3132  04F6  2CEB               	goto	l2283
  3133  04F7  3A09               	xorlw	9	; case 42
  3134  04F8  1903               	skipnz
  3135  04F9  2CE8               	goto	l2281
  3136  04FA  2CFB               	goto	l104
  3137  04FB                     l104:	
  3138  04FB  0008               	return
  3139  04FC                     __end_of_adicionar:	
  3140                           
  3141                           	psect	text14
  3142  0171                     __ptext14:	
  3143 ;; *************** function _tc_tecla *****************
  3144 ;; Defined at:
  3145 ;;		line 7 in file "teclado.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  timeout         2    3[BANK0 ] unsigned int 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  to              2    8[BANK0 ] unsigned int 
  3150 ;;  ret             1   11[BANK0 ] unsigned char 
  3151 ;;  i               1   10[BANK0 ] unsigned char 
  3152 ;;  tmp             1    7[BANK0 ] unsigned char 
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      unsigned char 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3162 ;;      Params:         0       2       0       0
  3163 ;;      Locals:         0       5       0       0
  3164 ;;      Temps:          0       2       0       0
  3165 ;;      Totals:         0       9       0       0
  3166 ;;Total ram usage:        9 bytes
  3167 ;; Hardware stack levels used:    1
  3168 ;; Hardware stack levels required when called:    2
  3169 ;; This function calls:
  3170 ;;		___bmul
  3171 ;;		_atraso_ms
  3172 ;; This function is called by:
  3173 ;;		_discar
  3174 ;;		_adicionar
  3175 ;;		_digitarNumero
  3176 ;;		_armazenar
  3177 ;;		_chamar
  3178 ;;		_tc_letra
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           
  3183                           ;psect for function _tc_tecla
  3184  0171                     _tc_tecla:	
  3185                           
  3186                           ;teclado.c: 8: unsigned int to = 0;
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _tc_tecla: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3190  0171  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0172  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0173  01A8               	clrf	tc_tecla@to
  3193  0174  01A9               	clrf	tc_tecla@to+1
  3194                           
  3195                           ;teclado.c: 9: unsigned char i;
  3196                           ;teclado.c: 10: unsigned char ret = 0;
  3197  0175  01AB               	clrf	tc_tecla@ret
  3198                           
  3199                           ;teclado.c: 11: unsigned char tmp = PORTA;
  3200  0176  0805               	movf	5,w	;volatile
  3201  0177  00A5               	movwf	??_tc_tecla
  3202  0178  0825               	movf	??_tc_tecla,w
  3203  0179  00A7               	movwf	tc_tecla@tmp
  3204                           
  3205                           ;teclado.c: 13: while (((to < timeout) || (!timeout))&&(!ret)) {
  3206  017A  29E8               	goto	l2125
  3207  017B                     l2081:	
  3208                           
  3209                           ;teclado.c: 14: for (i = 0; i < 4; i++) {
  3210  017B  01AA               	clrf	tc_tecla@i
  3211  017C  3004               	movlw	4
  3212  017D  022A               	subwf	tc_tecla@i,w
  3213  017E  1803               	btfsc	3,0
  3214  017F  29DB               	goto	l2121
  3215  0180                     l2087:	
  3216                           
  3217                           ;teclado.c: 15: PORTA |= linha[i];
  3218  0180  082A               	movf	tc_tecla@i,w
  3219  0181  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
  3220  0182  0084               	movwf	4
  3221  0183  240A               	fcall	stringdir
  3222  0184  00A5               	movwf	??_tc_tecla
  3223  0185  0825               	movf	??_tc_tecla,w
  3224  0186  0485               	iorwf	5,f	;volatile
  3225                           
  3226                           ;teclado.c: 16: if (RB7) {
  3227  0187  1F86               	btfss	6,7	;volatile
  3228  0188  299C               	goto	l226
  3229                           
  3230                           ;teclado.c: 17: atraso_ms(20);
  3231  0189  3014               	movlw	20
  3232  018A  00F4               	movwf	atraso_ms@valor
  3233  018B  3000               	movlw	0
  3234  018C  00F5               	movwf	atraso_ms@valor+1
  3235  018D  254D               	fcall	_atraso_ms
  3236                           
  3237                           ;teclado.c: 18: if (RB7) {
  3238  018E  1283               	bcf	3,5	;RP0=0, select bank0
  3239  018F  1303               	bcf	3,6	;RP1=0, select bank0
  3240  0190  1F86               	btfss	6,7	;volatile
  3241  0191  299C               	goto	l226
  3242  0192                     l228:	
  3243                           ;teclado.c: 19: while (RB7);
  3244                           
  3245  0192  1B86               	btfsc	6,7	;volatile
  3246  0193  2992               	goto	l228
  3247                           
  3248                           ;teclado.c: 20: ret = 1 + (i * 3);
  3249  0194  3003               	movlw	3
  3250  0195  00A5               	movwf	??_tc_tecla
  3251  0196  0825               	movf	??_tc_tecla,w
  3252  0197  00F4               	movwf	___bmul@multiplicand
  3253  0198  082A               	movf	tc_tecla@i,w
  3254  0199  2693               	fcall	___bmul
  3255  019A  3E01               	addlw	1
  3256  019B  29C5               	goto	L13
  3257  019C                     l226:	
  3258                           ;teclado.c: 21: break;
  3259                           
  3260                           
  3261                           ;teclado.c: 22: }
  3262                           ;teclado.c: 23: };
  3263                           ;teclado.c: 24: if (RB6) {
  3264  019C  1F06               	btfss	6,6	;volatile
  3265  019D  29B1               	goto	l231
  3266                           
  3267                           ;teclado.c: 25: atraso_ms(20);
  3268  019E  3014               	movlw	20
  3269  019F  00F4               	movwf	atraso_ms@valor
  3270  01A0  3000               	movlw	0
  3271  01A1  00F5               	movwf	atraso_ms@valor+1
  3272  01A2  254D               	fcall	_atraso_ms
  3273                           
  3274                           ;teclado.c: 26: if (RB6) {
  3275  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  3276  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  3277  01A5  1F06               	btfss	6,6	;volatile
  3278  01A6  29B1               	goto	l231
  3279  01A7                     l233:	
  3280                           ;teclado.c: 27: while (RB6);
  3281                           
  3282  01A7  1B06               	btfsc	6,6	;volatile
  3283  01A8  29A7               	goto	l233
  3284                           
  3285                           ;teclado.c: 28: ret = 2 + (i * 3);
  3286  01A9  3003               	movlw	3
  3287  01AA  00A5               	movwf	??_tc_tecla
  3288  01AB  0825               	movf	??_tc_tecla,w
  3289  01AC  00F4               	movwf	___bmul@multiplicand
  3290  01AD  082A               	movf	tc_tecla@i,w
  3291  01AE  2693               	fcall	___bmul
  3292  01AF  3E02               	addlw	2
  3293  01B0  29C5               	goto	L13
  3294  01B1                     l231:	
  3295                           ;teclado.c: 29: break;
  3296                           
  3297                           
  3298                           ;teclado.c: 30: }
  3299                           ;teclado.c: 31: };
  3300                           ;teclado.c: 32: if (RB5) {
  3301  01B1  1E86               	btfss	6,5	;volatile
  3302  01B2  29CB               	goto	l2115
  3303                           
  3304                           ;teclado.c: 33: atraso_ms(20);
  3305  01B3  3014               	movlw	20
  3306  01B4  00F4               	movwf	atraso_ms@valor
  3307  01B5  3000               	movlw	0
  3308  01B6  00F5               	movwf	atraso_ms@valor+1
  3309  01B7  254D               	fcall	_atraso_ms
  3310                           
  3311                           ;teclado.c: 34: if (RB5) {
  3312  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  3313  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  3314  01BA  1E86               	btfss	6,5	;volatile
  3315  01BB  29CB               	goto	l2115
  3316  01BC                     l238:	
  3317                           ;teclado.c: 35: while (RB5);
  3318                           
  3319  01BC  1A86               	btfsc	6,5	;volatile
  3320  01BD  29BC               	goto	l238
  3321                           
  3322                           ;teclado.c: 36: ret = 3 + (i * 3);
  3323  01BE  3003               	movlw	3
  3324  01BF  00A5               	movwf	??_tc_tecla
  3325  01C0  0825               	movf	??_tc_tecla,w
  3326  01C1  00F4               	movwf	___bmul@multiplicand
  3327  01C2  082A               	movf	tc_tecla@i,w
  3328  01C3  2693               	fcall	___bmul
  3329  01C4  3E03               	addlw	3
  3330  01C5                     L13:	
  3331  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  3332  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  3333  01C7  00A6               	movwf	??_tc_tecla+1
  3334  01C8  0826               	movf	??_tc_tecla+1,w
  3335  01C9  00AB               	movwf	tc_tecla@ret
  3336                           
  3337                           ;teclado.c: 37: break;
  3338  01CA  29DB               	goto	l2121
  3339  01CB                     l2115:	
  3340                           
  3341                           ;teclado.c: 38: }
  3342                           ;teclado.c: 39: };
  3343                           ;teclado.c: 40: PORTA &= ~linha[i];
  3344  01CB  082A               	movf	tc_tecla@i,w
  3345  01CC  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
  3346  01CD  0084               	movwf	4
  3347  01CE  240A               	fcall	stringdir
  3348  01CF  3AFF               	xorlw	255
  3349  01D0  00A5               	movwf	??_tc_tecla
  3350  01D1  0825               	movf	??_tc_tecla,w
  3351  01D2  0585               	andwf	5,f	;volatile
  3352  01D3  3001               	movlw	1
  3353  01D4  00A5               	movwf	??_tc_tecla
  3354  01D5  0825               	movf	??_tc_tecla,w
  3355  01D6  07AA               	addwf	tc_tecla@i,f
  3356  01D7  3004               	movlw	4
  3357  01D8  022A               	subwf	tc_tecla@i,w
  3358  01D9  1C03               	skipc
  3359  01DA  2980               	goto	l2087
  3360  01DB                     l2121:	
  3361                           
  3362                           ;teclado.c: 41: };
  3363                           ;teclado.c: 42: atraso_ms(5);
  3364  01DB  3005               	movlw	5
  3365  01DC  00F4               	movwf	atraso_ms@valor
  3366  01DD  3000               	movlw	0
  3367  01DE  00F5               	movwf	atraso_ms@valor+1
  3368  01DF  254D               	fcall	_atraso_ms
  3369                           
  3370                           ;teclado.c: 43: to += 5;
  3371  01E0  3005               	movlw	5
  3372  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  3373  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  3374  01E3  07A8               	addwf	tc_tecla@to,f
  3375  01E4  1803               	skipnc
  3376  01E5  0AA9               	incf	tc_tecla@to+1,f
  3377  01E6  3000               	movlw	0
  3378  01E7  07A9               	addwf	tc_tecla@to+1,f
  3379  01E8                     l2125:	
  3380  01E8  0824               	movf	tc_tecla@timeout+1,w
  3381  01E9  0229               	subwf	tc_tecla@to+1,w
  3382  01EA  1D03               	skipz
  3383  01EB  29EE               	goto	u1545
  3384  01EC  0823               	movf	tc_tecla@timeout,w
  3385  01ED  0228               	subwf	tc_tecla@to,w
  3386  01EE                     u1545:	
  3387  01EE  1C03               	skipc
  3388  01EF  29F4               	goto	l2129
  3389  01F0  0823               	movf	tc_tecla@timeout,w
  3390  01F1  0424               	iorwf	tc_tecla@timeout+1,w
  3391  01F2  1D03               	btfss	3,2
  3392  01F3  29F7               	goto	l2131
  3393  01F4                     l2129:	
  3394  01F4  082B               	movf	tc_tecla@ret,w
  3395  01F5  1903               	btfsc	3,2
  3396  01F6  297B               	goto	l2081
  3397  01F7                     l2131:	
  3398                           
  3399                           ;teclado.c: 44: }
  3400                           ;teclado.c: 46: if (!ret)ret = 255;
  3401  01F7  082B               	movf	tc_tecla@ret,w
  3402  01F8  1D03               	btfss	3,2
  3403  01F9  29FC               	goto	l2135
  3404  01FA  30FF               	movlw	255
  3405  01FB  2A0D               	goto	L16
  3406  01FC                     l2135:	
  3407                           
  3408                           ;teclado.c: 47: else if (ret == 10)ret = 0x2A;
  3409  01FC  300A               	movlw	10
  3410  01FD  062B               	xorwf	tc_tecla@ret,w
  3411  01FE  1D03               	btfss	3,2
  3412  01FF  2A02               	goto	l2139
  3413  0200  302A               	movlw	42
  3414  0201  2A0D               	goto	L16
  3415  0202                     l2139:	
  3416                           
  3417                           ;teclado.c: 48: else if (ret == 11)ret = 0x30;
  3418  0202  300B               	movlw	11
  3419  0203  062B               	xorwf	tc_tecla@ret,w
  3420  0204  1D03               	btfss	3,2
  3421  0205  2A08               	goto	l2143
  3422  0206  3030               	movlw	48
  3423  0207  2A0D               	goto	L16
  3424  0208                     l2143:	
  3425                           
  3426                           ;teclado.c: 49: else if (ret == 12)ret = 0x23;
  3427  0208  300C               	movlw	12
  3428  0209  062B               	xorwf	tc_tecla@ret,w
  3429  020A  1D03               	btfss	3,2
  3430  020B  2A11               	goto	l2147
  3431  020C  3023               	movlw	35
  3432  020D                     L16:	
  3433  020D  00A5               	movwf	??_tc_tecla
  3434  020E  0825               	movf	??_tc_tecla,w
  3435  020F  00AB               	movwf	tc_tecla@ret
  3436  0210  2A15               	goto	l2149
  3437  0211                     l2147:	
  3438                           
  3439                           ;teclado.c: 50: else ret += 0x30;
  3440  0211  3030               	movlw	48
  3441  0212  00A5               	movwf	??_tc_tecla
  3442  0213  0825               	movf	??_tc_tecla,w
  3443  0214  07AB               	addwf	tc_tecla@ret,f
  3444  0215                     l2149:	
  3445                           
  3446                           ;teclado.c: 51: PORTA = tmp;
  3447  0215  0827               	movf	tc_tecla@tmp,w
  3448  0216  0085               	movwf	5	;volatile
  3449                           
  3450                           ;teclado.c: 52: return ret;
  3451  0217  082B               	movf	tc_tecla@ret,w
  3452  0218  0008               	return
  3453  0219                     __end_of_tc_tecla:	
  3454                           
  3455                           	psect	text15
  3456  0693                     __ptext15:	
  3457 ;; *************** function ___bmul *****************
  3458 ;; Defined at:
  3459 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  multiplier      1    wreg     unsigned char 
  3462 ;;  multiplicand    1    4[COMMON] unsigned char 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  multiplier      1    7[COMMON] unsigned char 
  3465 ;;  product         1    6[COMMON] unsigned char 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      unsigned char 
  3468 ;; Registers used:
  3469 ;;		wreg, status,2, status,0
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3475 ;;      Params:         1       0       0       0
  3476 ;;      Locals:         2       0       0       0
  3477 ;;      Temps:          1       0       0       0
  3478 ;;      Totals:         4       0       0       0
  3479 ;;Total ram usage:        4 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    1
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_tc_tecla
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           
  3490                           ;psect for function ___bmul
  3491  0693                     ___bmul:	
  3492                           
  3493                           ;incstack = 0
  3494                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3495                           ;___bmul@multiplier stored from wreg
  3496  0693  00F7               	movwf	___bmul@multiplier
  3497  0694  01F6               	clrf	___bmul@product
  3498  0695                     l1453:	
  3499  0695  1C77               	btfss	___bmul@multiplier,0
  3500  0696  2E9B               	goto	l1457
  3501  0697  0874               	movf	___bmul@multiplicand,w
  3502  0698  00F5               	movwf	??___bmul
  3503  0699  0875               	movf	??___bmul,w
  3504  069A  07F6               	addwf	___bmul@product,f
  3505  069B                     l1457:	
  3506  069B  1003               	clrc
  3507  069C  0DF4               	rlf	___bmul@multiplicand,f
  3508  069D  1003               	clrc
  3509  069E  0CF7               	rrf	___bmul@multiplier,f
  3510  069F  0877               	movf	___bmul@multiplier,w
  3511  06A0  1D03               	btfss	3,2
  3512  06A1  2E95               	goto	l1453
  3513  06A2  0876               	movf	___bmul@product,w
  3514  06A3  0008               	return
  3515  06A4                     __end_of___bmul:	
  3516                           
  3517                           	psect	text16
  3518  05FE                     __ptext16:	
  3519 ;; *************** function _lcd_str *****************
  3520 ;; Defined at:
  3521 ;;		line 85 in file "lcd.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  str             2    3[BANK0 ] PTR const unsigned char 
  3524 ;;		 -> STR_10(14), STR_9(12), STR_8(7), STR_7(15), 
  3525 ;;		 -> STR_6(10), STR_5(14), nome(10), STR_4(10), 
  3526 ;;		 -> STR_3(12), STR_2(10), STR_1(7), 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;  i               1    6[BANK0 ] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3538 ;;      Params:         0       2       0       0
  3539 ;;      Locals:         0       1       0       0
  3540 ;;      Temps:          0       1       0       0
  3541 ;;      Totals:         0       4       0       0
  3542 ;;Total ram usage:        4 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    3
  3545 ;; This function calls:
  3546 ;;		_lcd_dat
  3547 ;; This function is called by:
  3548 ;;		_discar
  3549 ;;		_adicionar
  3550 ;;		_digitarNome
  3551 ;;		_digitarNumero
  3552 ;;		_armazenar
  3553 ;;		_chamar
  3554 ;;		_desligar
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _lcd_str
  3560  05FE                     _lcd_str:	
  3561                           
  3562                           ;lcd.c: 87: unsigned char i=0;
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in _lcd_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3566  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  3567  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  3568  0600  01A6               	clrf	lcd_str@i
  3569  0601                     l2181:	
  3570                           ;lcd.c: 89: while(str[i])
  3571                           
  3572  0601  0826               	movf	lcd_str@i,w
  3573  0602  0723               	addwf	lcd_str@str,w
  3574  0603  0084               	movwf	4
  3575  0604  0824               	movf	lcd_str@str+1,w
  3576  0605  1803               	skipnc
  3577  0606  0A24               	incf	lcd_str@str+1,w
  3578  0607  00FF               	movwf	127
  3579  0608  2400               	fcall	stringtab
  3580  0609  3A00               	xorlw	0
  3581  060A  1903               	btfsc	3,2
  3582  060B  0008               	return
  3583                           
  3584                           ;lcd.c: 90: {
  3585                           ;lcd.c: 91: lcd_dat(str[i]);
  3586  060C  0826               	movf	lcd_str@i,w
  3587  060D  0723               	addwf	lcd_str@str,w
  3588  060E  0084               	movwf	4
  3589  060F  0824               	movf	lcd_str@str+1,w
  3590  0610  1803               	skipnc
  3591  0611  0A24               	incf	lcd_str@str+1,w
  3592  0612  00FF               	movwf	127
  3593  0613  2400               	fcall	stringtab
  3594  0614  261C               	fcall	_lcd_dat
  3595                           
  3596                           ;lcd.c: 92: i++;
  3597  0615  3001               	movlw	1
  3598  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0618  00A5               	movwf	??_lcd_str
  3601  0619  0825               	movf	??_lcd_str,w
  3602  061A  07A6               	addwf	lcd_str@i,f
  3603  061B  2E01               	goto	l2181
  3604  061C                     __end_of_lcd_str:	
  3605                           
  3606                           	psect	text17
  3607  061C                     __ptext17:	
  3608 ;; *************** function _lcd_dat *****************
  3609 ;; Defined at:
  3610 ;;		line 55 in file "lcd.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  val             1    wreg     unsigned char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  val             1    7[COMMON] unsigned char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      void 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, pclath, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3624 ;;      Params:         0       0       0       0
  3625 ;;      Locals:         1       0       0       0
  3626 ;;      Temps:          0       0       0       0
  3627 ;;      Totals:         1       0       0       0
  3628 ;;Total ram usage:        1 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    2
  3631 ;; This function calls:
  3632 ;;		_atraso_ms
  3633 ;;		_lcd_wr
  3634 ;; This function is called by:
  3635 ;;		_digitarNome
  3636 ;;		_digitarNumero
  3637 ;;		_lcd_str
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _lcd_dat
  3643  061C                     _lcd_dat:	
  3644                           
  3645                           ;incstack = 0
  3646                           ; Regs used in _lcd_dat: [wreg+status,2+status,0+pclath+cstack]
  3647                           ;lcd_dat@val stored from wreg
  3648  061C  00F7               	movwf	lcd_dat@val
  3649                           
  3650                           ;lcd.c: 57: RA0=1;
  3651  061D  1283               	bcf	3,5	;RP0=0, select bank0
  3652  061E  1303               	bcf	3,6	;RP1=0, select bank0
  3653  061F  1405               	bsf	5,0	;volatile
  3654                           
  3655                           ;lcd.c: 58: lcd_wr(val);
  3656  0620  0877               	movf	lcd_dat@val,w
  3657  0621  2574               	fcall	_lcd_wr
  3658                           
  3659                           ;lcd.c: 59: RB3=1;
  3660  0622  1283               	bcf	3,5	;RP0=0, select bank0
  3661  0623  1303               	bcf	3,6	;RP1=0, select bank0
  3662  0624  1586               	bsf	6,3	;volatile
  3663                           
  3664                           ;lcd.c: 60: atraso_ms(3);
  3665  0625  3003               	movlw	3
  3666  0626  00F4               	movwf	atraso_ms@valor
  3667  0627  3000               	movlw	0
  3668  0628  00F5               	movwf	atraso_ms@valor+1
  3669  0629  254D               	fcall	_atraso_ms
  3670                           
  3671                           ;lcd.c: 61: RA0=0;
  3672  062A  1283               	bcf	3,5	;RP0=0, select bank0
  3673  062B  1303               	bcf	3,6	;RP1=0, select bank0
  3674  062C  1005               	bcf	5,0	;volatile
  3675                           
  3676                           ;lcd.c: 62: atraso_ms(3);
  3677  062D  3003               	movlw	3
  3678  062E  00F4               	movwf	atraso_ms@valor
  3679  062F  3000               	movlw	0
  3680  0630  00F5               	movwf	atraso_ms@valor+1
  3681  0631  254D               	fcall	_atraso_ms
  3682                           
  3683                           ;lcd.c: 63: RA0=1;
  3684  0632  1283               	bcf	3,5	;RP0=0, select bank0
  3685  0633  1303               	bcf	3,6	;RP1=0, select bank0
  3686  0634  1405               	bsf	5,0	;volatile
  3687  0635  0008               	return
  3688  0636                     __end_of_lcd_dat:	
  3689                           
  3690                           	psect	text18
  3691  06B9                     __ptext18:	
  3692 ;; *************** function _ativaModo *****************
  3693 ;; Defined at:
  3694 ;;		line 138 in file "main.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		None
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3708 ;;      Params:         0       0       0       0
  3709 ;;      Locals:         0       0       0       0
  3710 ;;      Temps:          0       0       0       0
  3711 ;;      Totals:         0       0       0       0
  3712 ;;Total ram usage:        0 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    1
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_adicionar
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           
  3723                           ;psect for function _ativaModo
  3724  06B9                     _ativaModo:	
  3725                           
  3726                           ;main.c: 139: modo = 0b1;
  3727                           
  3728                           ;incstack = 0
  3729                           ; Regs used in _ativaModo: []
  3730  06B9  14F8               	bsf	_modo/(0+8),_modo& (0+7)
  3731  06BA  0008               	return
  3732  06BB                     __end_of_ativaModo:	
  3733                           
  3734                           	psect	text19
  3735  0526                     __ptext19:	
  3736 ;; *************** function _lcd_init *****************
  3737 ;; Defined at:
  3738 ;;		line 66 in file "lcd.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;		None
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;		None
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      void 
  3745 ;; Registers used:
  3746 ;;		wreg, status,2, status,0, pclath, cstack
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3752 ;;      Params:         0       0       0       0
  3753 ;;      Locals:         0       0       0       0
  3754 ;;      Temps:          0       0       0       0
  3755 ;;      Totals:         0       0       0       0
  3756 ;;Total ram usage:        0 bytes
  3757 ;; Hardware stack levels used:    1
  3758 ;; Hardware stack levels required when called:    3
  3759 ;; This function calls:
  3760 ;;		_atraso_ms
  3761 ;;		_lcd_cmd
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           
  3768                           ;psect for function _lcd_init
  3769  0526                     _lcd_init:	
  3770                           
  3771                           ;lcd.c: 68: RA0=0;
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  3775  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3776  0527  1303               	bcf	3,6	;RP1=0, select bank0
  3777  0528  1005               	bcf	5,0	;volatile
  3778                           
  3779                           ;lcd.c: 69: RB3=0;
  3780  0529  1186               	bcf	6,3	;volatile
  3781                           
  3782                           ;lcd.c: 70: atraso_ms(20);
  3783  052A  3014               	movlw	20
  3784  052B  00F4               	movwf	atraso_ms@valor
  3785  052C  3000               	movlw	0
  3786  052D  00F5               	movwf	atraso_ms@valor+1
  3787  052E  254D               	fcall	_atraso_ms
  3788                           
  3789                           ;lcd.c: 71: RA0=1;
  3790  052F  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0530  1303               	bcf	3,6	;RP1=0, select bank0
  3792  0531  1405               	bsf	5,0	;volatile
  3793                           
  3794                           ;lcd.c: 73: lcd_cmd(0x30);
  3795  0532  3030               	movlw	48
  3796  0533  2636               	fcall	_lcd_cmd
  3797                           
  3798                           ;lcd.c: 74: atraso_ms(5);
  3799  0534  3005               	movlw	5
  3800  0535  00F4               	movwf	atraso_ms@valor
  3801  0536  3000               	movlw	0
  3802  0537  00F5               	movwf	atraso_ms@valor+1
  3803  0538  254D               	fcall	_atraso_ms
  3804                           
  3805                           ;lcd.c: 75: lcd_cmd(0x30);
  3806  0539  3030               	movlw	48
  3807  053A  2636               	fcall	_lcd_cmd
  3808                           
  3809                           ;lcd.c: 76: atraso_ms(1);
  3810  053B  3001               	movlw	1
  3811  053C  00F4               	movwf	atraso_ms@valor
  3812  053D  3000               	movlw	0
  3813  053E  00F5               	movwf	atraso_ms@valor+1
  3814  053F  254D               	fcall	_atraso_ms
  3815                           
  3816                           ;lcd.c: 77: lcd_cmd(0x38);
  3817  0540  3038               	movlw	56
  3818  0541  2636               	fcall	_lcd_cmd
  3819                           
  3820                           ;lcd.c: 78: lcd_cmd(0x08);
  3821  0542  3008               	movlw	8
  3822  0543  2636               	fcall	_lcd_cmd
  3823                           
  3824                           ;lcd.c: 79: lcd_cmd(0x0F);
  3825  0544  300F               	movlw	15
  3826  0545  2636               	fcall	_lcd_cmd
  3827                           
  3828                           ;lcd.c: 80: lcd_cmd(0x01);
  3829  0546  3001               	movlw	1
  3830  0547  2636               	fcall	_lcd_cmd
  3831                           
  3832                           ;lcd.c: 81: lcd_cmd(0x38);
  3833  0548  3038               	movlw	56
  3834  0549  2636               	fcall	_lcd_cmd
  3835                           
  3836                           ;lcd.c: 82: lcd_cmd(0x80);
  3837  054A  3080               	movlw	128
  3838  054B  2636               	fcall	_lcd_cmd
  3839  054C  0008               	return
  3840  054D                     __end_of_lcd_init:	
  3841                           
  3842                           	psect	text20
  3843  0636                     __ptext20:	
  3844 ;; *************** function _lcd_cmd *****************
  3845 ;; Defined at:
  3846 ;;		line 44 in file "lcd.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  val             1    wreg     unsigned char 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  val             1    7[COMMON] unsigned char 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0, pclath, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3860 ;;      Params:         0       0       0       0
  3861 ;;      Locals:         1       0       0       0
  3862 ;;      Temps:          0       0       0       0
  3863 ;;      Totals:         1       0       0       0
  3864 ;;Total ram usage:        1 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    2
  3867 ;; This function calls:
  3868 ;;		_atraso_ms
  3869 ;;		_lcd_wr
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;;		_discar
  3873 ;;		_adicionar
  3874 ;;		_digitarNome
  3875 ;;		_digitarNumero
  3876 ;;		_armazenar
  3877 ;;		_chamar
  3878 ;;		_desligar
  3879 ;;		_lcd_init
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _lcd_cmd
  3885  0636                     _lcd_cmd:	
  3886                           
  3887                           ;incstack = 0
  3888                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  3889                           ;lcd_cmd@val stored from wreg
  3890  0636  00F7               	movwf	lcd_cmd@val
  3891                           
  3892                           ;lcd.c: 46: RA0=1;
  3893  0637  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0638  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0639  1405               	bsf	5,0	;volatile
  3896                           
  3897                           ;lcd.c: 47: lcd_wr(val);
  3898  063A  0877               	movf	lcd_cmd@val,w
  3899  063B  2574               	fcall	_lcd_wr
  3900                           
  3901                           ;lcd.c: 48: RB3=0;
  3902  063C  1283               	bcf	3,5	;RP0=0, select bank0
  3903  063D  1303               	bcf	3,6	;RP1=0, select bank0
  3904  063E  1186               	bcf	6,3	;volatile
  3905                           
  3906                           ;lcd.c: 49: atraso_ms(3);
  3907  063F  3003               	movlw	3
  3908  0640  00F4               	movwf	atraso_ms@valor
  3909  0641  3000               	movlw	0
  3910  0642  00F5               	movwf	atraso_ms@valor+1
  3911  0643  254D               	fcall	_atraso_ms
  3912                           
  3913                           ;lcd.c: 50: RA0=0;
  3914  0644  1283               	bcf	3,5	;RP0=0, select bank0
  3915  0645  1303               	bcf	3,6	;RP1=0, select bank0
  3916  0646  1005               	bcf	5,0	;volatile
  3917                           
  3918                           ;lcd.c: 51: atraso_ms(3);
  3919  0647  3003               	movlw	3
  3920  0648  00F4               	movwf	atraso_ms@valor
  3921  0649  3000               	movlw	0
  3922  064A  00F5               	movwf	atraso_ms@valor+1
  3923  064B  254D               	fcall	_atraso_ms
  3924                           
  3925                           ;lcd.c: 52: RA0=1;
  3926  064C  1283               	bcf	3,5	;RP0=0, select bank0
  3927  064D  1303               	bcf	3,6	;RP1=0, select bank0
  3928  064E  1405               	bsf	5,0	;volatile
  3929  064F  0008               	return
  3930  0650                     __end_of_lcd_cmd:	
  3931                           
  3932                           	psect	text21
  3933  0574                     __ptext21:	
  3934 ;; *************** function _lcd_wr *****************
  3935 ;; Defined at:
  3936 ;;		line 30 in file "lcd.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  val             1    wreg     unsigned char 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;  val             1    5[COMMON] unsigned char 
  3941 ;;  i               1    6[COMMON] unsigned char 
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg, status,2, status,0
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3951 ;;      Params:         0       0       0       0
  3952 ;;      Locals:         2       0       0       0
  3953 ;;      Temps:          1       0       0       0
  3954 ;;      Totals:         3       0       0       0
  3955 ;;Total ram usage:        3 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    1
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_lcd_cmd
  3962 ;;		_lcd_dat
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _lcd_wr
  3968  0574                     _lcd_wr:	
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _lcd_wr: [wreg+status,2+status,0]
  3972                           ;lcd_wr@val stored from wreg
  3973  0574  00F5               	movwf	lcd_wr@val
  3974                           
  3975                           ;lcd.c: 32: unsigned char i;
  3976                           ;lcd.c: 34: RB4=0;
  3977  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3978  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3979  0577  1206               	bcf	6,4	;volatile
  3980                           
  3981                           ;lcd.c: 36: for(i=0;i<8;i++)
  3982  0578  01F6               	clrf	lcd_wr@i
  3983  0579                     L17:	
  3984  0579  3008               	movlw	8
  3985  057A  0276               	subwf	lcd_wr@i,w
  3986  057B  1803               	btfsc	3,0
  3987  057C  0008               	return
  3988                           
  3989                           ;lcd.c: 37: {
  3990                           ;lcd.c: 38: RB3=((val>>(7-i))&0x01);
  3991  057D  0875               	movf	lcd_wr@val,w
  3992  057E  00F4               	movwf	??_lcd_wr
  3993  057F  0376               	decf	lcd_wr@i,w
  3994  0580  3AFF               	xorlw	255
  3995  0581  3E07               	addlw	7
  3996  0582  3E01               	addlw	1
  3997  0583  2D86               	goto	u1364
  3998  0584                     u1365:	
  3999  0584  1003               	clrc
  4000  0585  0CF4               	rrf	??_lcd_wr,f
  4001  0586                     u1364:	
  4002  0586  3EFF               	addlw	-1
  4003  0587  1D03               	skipz
  4004  0588  2D84               	goto	u1365
  4005  0589  1C74               	btfss	??_lcd_wr,0
  4006  058A  2D8F               	goto	u1370
  4007  058B  1283               	bcf	3,5	;RP0=0, select bank0
  4008  058C  1303               	bcf	3,6	;RP1=0, select bank0
  4009  058D  1586               	bsf	6,3	;volatile
  4010  058E  2D92               	goto	l2057
  4011  058F                     u1370:	
  4012  058F  1283               	bcf	3,5	;RP0=0, select bank0
  4013  0590  1303               	bcf	3,6	;RP1=0, select bank0
  4014  0591  1186               	bcf	6,3	;volatile
  4015  0592                     l2057:	
  4016                           
  4017                           ;lcd.c: 39: RB4=1;
  4018  0592  1606               	bsf	6,4	;volatile
  4019                           
  4020                           ;lcd.c: 40: RB4=0;
  4021  0593  1206               	bcf	6,4	;volatile
  4022  0594  3001               	movlw	1
  4023  0595  00F4               	movwf	??_lcd_wr
  4024  0596  0874               	movf	??_lcd_wr,w
  4025  0597  07F6               	addwf	lcd_wr@i,f
  4026  0598  2D79               	goto	L17
  4027  0599                     __end_of_lcd_wr:	
  4028                           
  4029                           	psect	text22
  4030  054D                     __ptext22:	
  4031 ;; *************** function _atraso_ms *****************
  4032 ;; Defined at:
  4033 ;;		line 26 in file "atraso.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  valor           2    4[COMMON] unsigned int 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  i               2    0[BANK0 ] unsigned int 
  4038 ;;  j               1    2[BANK0 ] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4048 ;;      Params:         2       0       0       0
  4049 ;;      Locals:         0       3       0       0
  4050 ;;      Temps:          1       0       0       0
  4051 ;;      Totals:         3       3       0       0
  4052 ;;Total ram usage:        6 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    1
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_lcd_cmd
  4059 ;;		_lcd_dat
  4060 ;;		_lcd_init
  4061 ;;		_tc_tecla
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _atraso_ms
  4067  054D                     _atraso_ms:	
  4068                           
  4069                           ;atraso.c: 28: unsigned int i;
  4070                           ;atraso.c: 29: unsigned char j;
  4071                           ;atraso.c: 31: for (i =0; i< valor; i++)
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in _atraso_ms: [wreg+status,2+status,0]
  4075  054D  1283               	bcf	3,5	;RP0=0, select bank0
  4076  054E  1303               	bcf	3,6	;RP1=0, select bank0
  4077  054F  01A0               	clrf	atraso_ms@i
  4078  0550  01A1               	clrf	atraso_ms@i+1
  4079  0551                     l202:	
  4080  0551  0875               	movf	atraso_ms@valor+1,w
  4081  0552  0221               	subwf	atraso_ms@i+1,w
  4082  0553  1D03               	skipz
  4083  0554  2D57               	goto	u1425
  4084  0555  0874               	movf	atraso_ms@valor,w
  4085  0556  0220               	subwf	atraso_ms@i,w
  4086  0557                     u1425:	
  4087  0557  1803               	btfsc	3,0
  4088  0558  0008               	return
  4089                           
  4090                           ;atraso.c: 32: {
  4091                           ;atraso.c: 33: for (j =0 ; j < 200; j++)
  4092  0559  01A2               	clrf	atraso_ms@j
  4093  055A  30C8               	movlw	200
  4094  055B  0222               	subwf	atraso_ms@j,w
  4095  055C  1803               	btfsc	3,0
  4096  055D  2D6D               	goto	l2075
  4097  055E                     l204:	
  4098  055E  0000               	nop	;# 
  4099  055F  0000               	nop	;# 
  4100  0560  0000               	nop	;# 
  4101  0561  0000               	nop	;# 
  4102  0562  0000               	nop	;# 
  4103  0563  3001               	movlw	1
  4104  0564  00F6               	movwf	??_atraso_ms
  4105  0565  0876               	movf	??_atraso_ms,w
  4106  0566  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0567  1303               	bcf	3,6	;RP1=0, select bank0
  4108  0568  07A2               	addwf	atraso_ms@j,f
  4109  0569  30C8               	movlw	200
  4110  056A  0222               	subwf	atraso_ms@j,w
  4111  056B  1C03               	skipc
  4112  056C  2D5E               	goto	l204
  4113  056D                     l2075:	
  4114  056D  3001               	movlw	1
  4115  056E  07A0               	addwf	atraso_ms@i,f
  4116  056F  1803               	skipnc
  4117  0570  0AA1               	incf	atraso_ms@i+1,f
  4118  0571  3000               	movlw	0
  4119  0572  07A1               	addwf	atraso_ms@i+1,f
  4120  0573  2D51               	goto	l202
  4121  0574                     __end_of_atraso_ms:	
  4122                           
  4123                           	psect	text23
  4124  06A4                     __ptext23:	
  4125 ;; *************** function _interrupcao *****************
  4126 ;; Defined at:
  4127 ;;		line 63 in file "main.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  1    wreg      void 
  4134 ;; Registers used:
  4135 ;;		None
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4141 ;;      Params:         0       0       0       0
  4142 ;;      Locals:         0       0       0       0
  4143 ;;      Temps:          4       0       0       0
  4144 ;;      Totals:         4       0       0       0
  4145 ;;Total ram usage:        4 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		Interrupt level 1
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           
  4155                           ;psect for function _interrupcao
  4156  06A4                     _interrupcao:	
  4157  06A4  0873               	movf	??_interrupcao+3,w
  4158  06A5  00FF               	movwf	127
  4159  06A6  0872               	movf	??_interrupcao+2,w
  4160  06A7  008A               	movwf	10
  4161  06A8  0871               	movf	??_interrupcao+1,w
  4162  06A9  0084               	movwf	4
  4163  06AA  0E70               	swapf	??_interrupcao^(0+-128),w
  4164  06AB  0083               	movwf	3
  4165  06AC  0EFE               	swapf	126,f
  4166  06AD  0E7E               	swapf	126,w
  4167  06AE  0009               	retfie
  4168  06AF                     __end_of_interrupcao:	
  4169  007E                     btemp	set	126	;btemp
  4170  007E                     wtemp0	set	126
  4171                           
  4172                           	psect	intentry
  4173  0004                     __pintentry:	
  4174                           ;incstack = 0
  4175                           ; Regs used in _interrupcao: []
  4176                           
  4177  0004                     interrupt_function:	
  4178  007E                     saved_w	set	btemp
  4179  0004  00FE               	movwf	btemp
  4180  0005  0E03               	swapf	3,w
  4181  0006  00F0               	movwf	??_interrupcao
  4182  0007  0804               	movf	4,w
  4183  0008  00F1               	movwf	??_interrupcao+1
  4184  0009  080A               	movf	10,w
  4185  000A  00F2               	movwf	??_interrupcao+2
  4186  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4187  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4188  000D  087F               	movf	btemp+1,w
  4189  000E  00F3               	movwf	??_interrupcao+3
  4190  000F  2EA4               	ljmp	_interrupcao


Data Sizes:
    Strings     101
    Constant    4
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80     30      54
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[14]), STR_9(CODE[12]), STR_8(CODE[7]), STR_7(CODE[15]), 
		 -> STR_6(CODE[10]), STR_5(CODE[14]), nome(BANK0[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_lcd_cmd
    _maquina->_buscar
    _discar->_lcd_cmd
    _digitarNumero->_lcd_cmd
    _digitarNumero->_lcd_dat
    _digitarNome->_lcd_cmd
    _digitarNome->_lcd_dat
    _desligar->_lcd_cmd
    _chamar->_lcd_cmd
    _buscar->_eeprom_read
    _armazenar->_lcd_cmd
    _adicionar->_lcd_cmd
    _tc_tecla->___bmul
    _lcd_str->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_dat->_lcd_wr
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _lcd_cmd->_lcd_wr

Critical Paths under _interrupcao in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_maquina
    _maquina->_digitarNome
    _discar->_tc_tecla
    _digitarNumero->_tc_tecla
    _digitarNome->_tc_letra
    _tc_letra->_tc_tecla
    _desligar->_lcd_str
    _chamar->_tc_tecla
    _armazenar->_tc_tecla
    _adicionar->_tc_tecla
    _tc_tecla->_atraso_ms
    _lcd_dat->_atraso_ms
    _lcd_init->_atraso_ms
    _lcd_cmd->_atraso_ms

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   40426
                                             28 BANK0      2     2      0
                        _eeprom_read
                       _eeprom_write
                            _lcd_cmd
                           _lcd_init
                            _maquina
 ---------------------------------------------------------------------------------
 (1) _maquina                                              1     1      0   37267
                                             27 BANK0      1     1      0
                          _adicionar
                          _armazenar
                             _buscar
                             _chamar
                           _desligar
                        _digitarNome
                      _digitarNumero
                             _discar
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _discar                                               1     1      0    5060
                                             12 BANK0      1     1      0
                       _desativaModo
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (3) _desativaModo                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _digitarNumero                                        3     3      0    6332
                                             12 BANK0      3     3      0
                            _lcd_cmd
                            _lcd_dat
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _digitarNome                                          3     3      0    7077
                                             24 BANK0      3     3      0
                            _lcd_cmd
                            _lcd_dat
                            _lcd_str
                           _tc_letra
 ---------------------------------------------------------------------------------
 (3) _tc_letra                                            12    10      2    2936
                                             12 BANK0     12    10      2
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _desligar                                             3     3      0    2869
                                              7 BANK0      3     3      0
                            _lcd_cmd
                            _lcd_str
 ---------------------------------------------------------------------------------
 (2) _chamar                                               0     0      0    5060
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _buscar                                               9     9      0     273
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _armazenar                                            5     5      0    5514
                                             12 BANK0      5     5      0
                       _eeprom_write
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     256
                                              4 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _adicionar                                            1     1      0    5060
                                             12 BANK0      1     1      0
                          _ativaModo
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (3) _tc_tecla                                             9     7      2    2191
                                              3 BANK0      9     7      2
                             ___bmul
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     251
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _lcd_str                                              4     2      2    1857
                                              3 BANK0      4     2      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (4) _lcd_dat                                              1     1      0    1012
                                              7 COMMON     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _ativaModo                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1863
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              1     1      0    1012
                                              7 COMMON     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (5) _lcd_wr                                               3     3      0     130
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _atraso_ms                                            6     4      2     851
                                              4 COMMON     3     1      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupcao                                          4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eeprom_read
   _eeprom_write
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
       _atraso_ms
       _lcd_wr
   _maquina
     _adicionar
       _ativaModo
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _armazenar
       _eeprom_write
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _buscar
       _eeprom_read
     _chamar
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _desligar
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
     _digitarNome
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_letra
         _tc_tecla
           ___bmul
           _atraso_ms
     _digitarNumero
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _discar
       _desativaModo
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _eeprom_read

 _interrupcao (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1E      36       3       67.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      40       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      40      10        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue May 02 21:19:46 2017

      digitarNumero@cont 002D                        pc 0002           ___bmul@product 0076  
            __CFG_CP$OFF 0000                       l96 04A5                       l88 04D0  
                     _RD 04E0                       _WR 04E1                       fsr 0004  
                    l104 04FB                      l202 0551                      l204 055E  
                    l231 01B1                      l152 029B                      l233 01A7  
                    l226 019C                      l307 067F                      l228 0192  
                    l238 01BC                      l329 05BE                      l259 0170  
                    _GIE 005F                      _RA0 0028                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _RB6 0036  
                    _RB7 0037             __CFG_CPD$OFF 0000                      fsr0 0004  
                    indf 0000                     S2585 03F2                     S2587 0650  
                   S2589 0667             __CFG_LVP$OFF 0000                     l2121 01DB  
                   l2131 01F7                     l2115 01CB                     l2203 0100  
                   l2125 01E8                     l2221 012E                     l2143 0208  
                   l2135 01FC                     l2231 014A                     l2223 013F  
                   l2303 0039                     l2057 0592                     l2129 01F4  
                   l2081 017B                     l2241 0159                     l2233 014D  
                   l2225 0141                     l2313 005F                     l2075 056D  
                   l2147 0211                     l2139 0202                     l2411 037E  
                   l2235 0150                     l2227 0144                     l2323 0082  
                   l2181 0601                     l1453 0695                     l2149 0215  
                   l2237 0153                     l2229 0147                     l2245 015E  
                   l2341 00C1                     l2501 0524                     l2087 0180  
                   l2239 0156                     l2247 016E                     l2335 00B7  
                   l2319 0071                     l1457 069B                     l2281 04E8  
                   l2433 03D3                     l2425 03B0                     l2329 009C  
                   l2265 0490                     l2273 049D                     l2283 04EB  
                   l2419 03A1                     l1811 0225                     l2187 00D4  
                   l2355 02DE                     l2371 0316                     l2267 0495  
                   l2381 0341                     l2365 0304                     l2461 04B2  
                   l1823 025B                     l2375 0327                     l2471 04BC  
                   l2463 04B4                     l2289 04F3                     l1841 0292  
                   l1833 0270                     l1817 0241                     l2465 04B6  
                   l2457 04AE                     l1819 0247                     l2387 035C  
                   l2467 04B8                     l2459 04B0                     l2475 04BE  
                   l1853 02BA                     l1845 0296                     l2397 05AD  
                   l2469 04BA                     l1847 021D                     l2583 04C5  
                   STR_1 0472                     STR_2 0461                     STR_3 044B  
                   STR_4 0457                     STR_5 0431                     STR_6 0457  
                   STR_7 0414                     STR_8 046B                     STR_9 043F  
                   u1225 023D                     u1235 0250                     u1425 0557  
                   u1265 026E                     u1370 058F                     u1275 0290  
                   u1364 0586                     u1365 0584                     u1545 01EE  
                   u1625 00E1                     u1715 0080                     u1805 0332  
                   u1725 008D                     u1655 010F                     u1815 033F  
                   u1735 009A                     u1825 035A                     u1745 00B5  
                   u1845 037C                     u1855 039F                     u1775 02F6  
                   u1695 0051                     u1865 03AE                     u1875 03D1  
                   u1795 0325                     u1887 05F2                     _WREN 04E2  
         ??_eeprom_write 0075                     _main 04FC                     _modo 03C1  
                   _nome 004C                     btemp 007E                     start 0010  
      ___bmul@multiplier 0077                    ?_main 0070                    _EEADR 009B  
                  STR_10 0423            __CFG_WDTE$OFF 0000                    _CARRY 0018  
                  _CMCON 001F                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086              buscar@i_147 0022  
        __end_of_lcd_dat 0636          __end_of_lcd_cmd 0650          __end_of_lcd_str 061C  
            buscar@achou 03C0                    _linha 0410          __end_of_maquina 04D1  
         __pbitbssCOMMON 03C0           __CFG_BOREN$OFF 0000                    pclath 000A  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 0011             ?_interrupcao 0070             __end_of_main 0526  
   __end_of_desativaModo 06B9                   ??_main 003C          tc_tecla@timeout 0023  
   __size_of_digitarNome 00A5           armazenar@i_151 002F                   _EEDATA 009A  
                 _EECON1 009C                   _EECON2 009D           __CFG_PWRTE$OFF 0000  
       __end_of_desligar 05FE     __size_of_eeprom_read 0015         __end_of_lcd_init 054D  
                 ___bmul 0693                   _chamar 0599                   _discar 0479  
                 _lcd_wr 0574                   _buscar 0219                   _estado 0048  
   __end_of_eeprom_write 05DF                   _numero 003E         __end_of_tc_letra 0171  
              ??_lcd_dat 0077                ??_lcd_cmd 0077         __end_of_tc_tecla 0219  
              ??_lcd_str 0025                ??_maquina 003B            tc_letra@i_200 0031  
                 saved_w 007E  __end_of__initialization 0018          eeprom_read@addr 0075  
    ___bmul@multiplicand 0074       __size_of_adicionar 002B           __pcstackCOMMON 0070  
  __end_of_digitarNumero 00C6            __end_of_linha 0414        eeprom_write@value 0074  
     __size_of_armazenar 008E       __size_of_ativaModo 0002       __size_of_atraso_ms 0027  
            tc_letra@ret 0034              tc_letra@num 0035               __pbssBANK0 003E  
            tc_tecla@ret 002B              tc_tecla@tmp 0027    __size_of_desativaModo 0002  
             __pmaintext 04FC                  ?___bmul 0074                  ?_chamar 0070  
             __pintentry 0004                  ?_discar 0070                  ?_lcd_wr 0070  
   __size_of_interrupcao 000B                  ?_buscar 0070        __end_of_adicionar 04FC  
              ?_desligar 0070                ?_lcd_init 0070               __stringtab 0400  
           _desativaModo 06B7                ?_tc_letra 002C                ?_tc_tecla 0023  
      __end_of_armazenar 03F2    __size_of_eeprom_write 0022        __end_of_ativaModo 06BB  
        __size_of___bmul 0011          __size_of_chamar 0024        __end_of_atraso_ms 0574  
        __size_of_discar 002D          __size_of_lcd_wr 0025          __size_of_buscar 00A6  
                __ptext1 04A6                  __ptext2 0479                  __ptext3 06B7  
                __ptext4 001A                  __ptext5 02BF                  __ptext6 00C6  
                __ptext7 05DF                  __ptext8 0599                  __ptext9 0219  
                _lcd_dat 061C                  _lcd_cmd 0636                  _lcd_str 05FE  
                _entrada 004B                  _maquina 04A6               ??_desligar 0027  
                lcd_wr@i 0076                  clrloop0 06B0                  main@val 003D  
             ??_lcd_init 0078     end_of_initialization 0018                  buscar@i 0025  
           _eeprom_write 05BD               ??_tc_letra 002E               ??_tc_tecla 0025  
          ??_digitarNome 0038               _quantidade 0079               lcd_dat@val 0077  
             lcd_cmd@val 0077               armazenar@i 002D            ??_eeprom_read 0074  
             lcd_str@str 0023           __end_of___bmul 06A4               atraso_ms@i 0020  
             atraso_ms@j 0022           __end_of_chamar 05BD           __end_of_discar 04A6  
         __end_of_lcd_wr 0599           __end_of_buscar 02BF      start_initialization 0011  
    __end_of_digitarNome 0364                 ??___bmul 0075      __end_of_eeprom_read 0693  
               ??_chamar 0078                 ??_discar 002C                 ??_lcd_wr 0074  
               ??_buscar 0076             tc_letra@cont 0036             tc_letra@num2 0033  
            __pbssCOMMON 0079                ___latbits 0000            __pcstackBANK0 0020  
 __size_of_digitarNumero 00AC                _adicionar 04D1        __size_of_desligar 001F  
       eeprom_write@addr 0076        __size_of_lcd_init 0027               tc_tecla@to 0028  
          ??_interrupcao 0070        __size_of_tc_letra 00AB        __size_of_tc_tecla 00A8  
              _armazenar 0364                _ativaModo 06B9                __pstrings 0400  
            _digitarNome 02BF                __pswtext1 03F2                __pswtext2 0650  
              __pswtext3 0667                 ?_lcd_dat 0070                 ?_lcd_cmd 0070  
               ?_lcd_str 0023                _atraso_ms 054D                 ?_maquina 0070  
             ?_adicionar 0070           atraso_ms@valor 0074        interrupt_function 0004  
              clear_ram0 06AF              _eeprom_read 067E            _digitarNumero 001A  
             ?_armazenar 0070               ?_ativaModo 0070      __end_of_interrupcao 06AF  
            __stringbase 040F               ?_atraso_ms 0074                lcd_wr@val 0075  
              buscar@end 0024                buscar@num 0020           ?_digitarNumero 0070  
     __end_of__stringtab 0410         __size_of_lcd_dat 001A         __size_of_lcd_cmd 001A  
       __size_of_lcd_str 001E                tc_letra@i 002F                tc_tecla@i 002A  
       __size_of_maquina 002B                 __ptext10 067E                 __ptext11 0364  
               __ptext20 0636                 __ptext12 05BD                 __ptext21 0574  
               __ptext13 04D1                 __ptext22 054D                 __ptext14 0171  
               __ptext23 06A4                 __ptext15 0693                 __ptext16 05FE  
               _desligar 05DF                 __ptext17 061C                 __ptext18 06B9  
               __ptext19 0526                 _endereco 004A                 _lcd_init 0526  
            ??_adicionar 002C            __size_of_main 002A                 _tc_letra 00C6  
               _tc_tecla 0171              _interrupcao 06A4              ??_armazenar 002C  
               lcd_str@i 0026              ??_ativaModo 0074              ??_atraso_ms 0076  
          ?_desativaModo 0070                 intlevel1 0000                stringcode 040A  
        ??_digitarNumero 002C             ?_digitarNome 0070          tc_letra@timeout 002C  
               stringdir 040A                 stringtab 0400           ??_desativaModo 0074  
        digitarNome@cont 0039       __CFG_FOSC$EXTRCCLK 0000            ?_eeprom_write 0074  
           ?_eeprom_read 0070  
