

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue May 02 21:51:33 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext2,local,class=CONST,delta=2
    21                           	psect	swtext3,local,class=CONST,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.41
    43                           ; Generated 25/01/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F628A Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  008C                     	;# 
   104  008E                     	;# 
   105  0092                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009F                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  008C                     	;# 
   141  008E                     	;# 
   142  0092                     	;# 
   143  0098                     	;# 
   144  0099                     	;# 
   145  009A                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009F                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  008C                     	;# 
   178  008E                     	;# 
   179  0092                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009F                     	;# 
   187                           
   188                           	psect	strings
   189  0400                     __pstrings:	
   190  0400                     stringtab:	
   191  0400                     __stringtab:	
   192                           
   193                           ;	String table - string pointers are 1 byte each
   194  0400  1BFF               	btfsc	btemp+1,7
   195  0401  2C0A               	ljmp	stringcode
   196  0402  1383               	bcf	3,7
   197  0403  187F               	btfsc	btemp+1,0
   198  0404  1783               	bsf	3,7
   199  0405  0800               	movf	0,w
   200  0406  0A84               	incf	4,f
   201  0407  1903               	skipnz
   202  0408  0AFF               	incf	btemp+1,f
   203  0409  0008               	return
   204  040A                     stringcode:	
   205  040A                     stringdir:	
   206  040A  3004               	movlw	high stringdir
   207  040B  008A               	movwf	10
   208  040C  0804               	movf	4,w
   209  040D  0A84               	incf	4,f
   210  040E  0782               	addwf	2,f
   211  040F                     __stringbase:	
   212  040F  3400               	retlw	0
   213  0410                     __end_of__stringtab:	
   214  0410                     _linha:	
   215  0410  3402               	retlw	2
   216  0411  3404               	retlw	4
   217  0412  3440               	retlw	64
   218  0413  3480               	retlw	128
   219  0414                     __end_of_linha:	
   220  0006                     _PORTB	set	6
   221  0005                     _PORTA	set	5
   222  001F                     _CMCON	set	31
   223  005F                     _GIE	set	95
   224  0018                     _CARRY	set	24
   225  0035                     _RB5	set	53
   226  0036                     _RB6	set	54
   227  0037                     _RB7	set	55
   228  0028                     _RA0	set	40
   229  0033                     _RB3	set	51
   230  0034                     _RB4	set	52
   231  009D                     _EECON2	set	157
   232  009A                     _EEDATA	set	154
   233  009C                     _EECON1	set	156
   234  009B                     _EEADR	set	155
   235  0086                     _TRISB	set	134
   236  0085                     _TRISA	set	133
   237  04E2                     _WREN	set	1250
   238  04E0                     _RD	set	1248
   239  04E1                     _WR	set	1249
   240  0414                     STR_7:	
   241  0414  3441               	retlw	65	;'A'
   242  0415  3472               	retlw	114	;'r'
   243  0416  346D               	retlw	109	;'m'
   244  0417  3461               	retlw	97	;'a'
   245  0418  347A               	retlw	122	;'z'
   246  0419  3465               	retlw	101	;'e'
   247  041A  346E               	retlw	110	;'n'
   248  041B  3461               	retlw	97	;'a'
   249  041C  346E               	retlw	110	;'n'
   250  041D  3464               	retlw	100	;'d'
   251  041E  346F               	retlw	111	;'o'
   252  041F  342E               	retlw	46	;'.'
   253  0420  342E               	retlw	46	;'.'
   254  0421  342E               	retlw	46	;'.'
   255  0422  3400               	retlw	0
   256  0423                     STR_10:	
   257  0423  3444               	retlw	68	;'D'
   258  0424  3465               	retlw	101	;'e'
   259  0425  3473               	retlw	115	;'s'
   260  0426  346C               	retlw	108	;'l'
   261  0427  3469               	retlw	105	;'i'
   262  0428  3467               	retlw	103	;'g'
   263  0429  3461               	retlw	97	;'a'
   264  042A  346E               	retlw	110	;'n'
   265  042B  3464               	retlw	100	;'d'
   266  042C  346F               	retlw	111	;'o'
   267  042D  342E               	retlw	46	;'.'
   268  042E  342E               	retlw	46	;'.'
   269  042F  342E               	retlw	46	;'.'
   270  0430  3400               	retlw	0
   271  0431                     STR_5:	
   272  0431  3444               	retlw	68	;'D'
   273  0432  3469               	retlw	105	;'i'
   274  0433  3467               	retlw	103	;'g'
   275  0434  3469               	retlw	105	;'i'
   276  0435  3474               	retlw	116	;'t'
   277  0436  3465               	retlw	101	;'e'
   278  0437  3420               	retlw	32	;' '
   279  0438  344E               	retlw	78	;'N'
   280  0439  3475               	retlw	117	;'u'
   281  043A  346D               	retlw	109	;'m'
   282  043B  3465               	retlw	101	;'e'
   283  043C  3472               	retlw	114	;'r'
   284  043D  346F               	retlw	111	;'o'
   285  043E  3400               	retlw	0
   286  043F                     STR_9:	
   287  043F  3443               	retlw	67	;'C'
   288  0440  3468               	retlw	104	;'h'
   289  0441  3461               	retlw	97	;'a'
   290  0442  346D               	retlw	109	;'m'
   291  0443  3461               	retlw	97	;'a'
   292  0444  346E               	retlw	110	;'n'
   293  0445  3464               	retlw	100	;'d'
   294  0446  346F               	retlw	111	;'o'
   295  0447  342E               	retlw	46	;'.'
   296  0448  342E               	retlw	46	;'.'
   297  0449  342E               	retlw	46	;'.'
   298  044A  3400               	retlw	0
   299  044B                     STR_3:	
   300  044B  3444               	retlw	68	;'D'
   301  044C  3469               	retlw	105	;'i'
   302  044D  3467               	retlw	103	;'g'
   303  044E  3469               	retlw	105	;'i'
   304  044F  3474               	retlw	116	;'t'
   305  0450  3465               	retlw	101	;'e'
   306  0451  3420               	retlw	32	;' '
   307  0452  344E               	retlw	78	;'N'
   308  0453  346F               	retlw	111	;'o'
   309  0454  346D               	retlw	109	;'m'
   310  0455  3465               	retlw	101	;'e'
   311  0456  3400               	retlw	0
   312  0457                     STR_4:	
   313  0457  3423               	retlw	35	;'#'
   314  0458  3423               	retlw	35	;'#'
   315  0459  3423               	retlw	35	;'#'
   316  045A  3423               	retlw	35	;'#'
   317  045B  3423               	retlw	35	;'#'
   318  045C  3423               	retlw	35	;'#'
   319  045D  3423               	retlw	35	;'#'
   320  045E  3423               	retlw	35	;'#'
   321  045F  3423               	retlw	35	;'#'
   322  0460  3400               	retlw	0
   323  0461                     STR_2:	
   324  0461  3441               	retlw	65	;'A'
   325  0462  3464               	retlw	100	;'d'
   326  0463  3469               	retlw	105	;'i'
   327  0464  3463               	retlw	99	;'c'
   328  0465  3469               	retlw	105	;'i'
   329  0466  346F               	retlw	111	;'o'
   330  0467  346E               	retlw	110	;'n'
   331  0468  3461               	retlw	97	;'a'
   332  0469  3472               	retlw	114	;'r'
   333  046A  3400               	retlw	0
   334  046B                     STR_8:	
   335  046B  3453               	retlw	83	;'S'
   336  046C  3461               	retlw	97	;'a'
   337  046D  346C               	retlw	108	;'l'
   338  046E  3476               	retlw	118	;'v'
   339  046F  346F               	retlw	111	;'o'
   340  0470  3421               	retlw	33	;'!'
   341  0471  3400               	retlw	0
   342  0472                     STR_1:	
   343  0472  3444               	retlw	68	;'D'
   344  0473  3469               	retlw	105	;'i'
   345  0474  3473               	retlw	115	;'s'
   346  0475  3463               	retlw	99	;'c'
   347  0476  3461               	retlw	97	;'a'
   348  0477  3472               	retlw	114	;'r'
   349  0478  3400               	retlw	0
   350  0457                     
   351                           ; #config settings
   352  0000                     
   353                           	psect	cinit
   354  0011                     start_initialization:	
   355  0011                     __initialization:	
   356                           
   357                           ; Clear objects allocated to BITCOMMON
   358  0011  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   359                           
   360                           ; Clear objects allocated to COMMON
   361  0012  01F9               	clrf	__pbssCOMMON& (0+127)
   362                           
   363                           ; Clear objects allocated to BANK0
   364  0013  1383               	bcf	3,7	;select IRP bank0
   365  0014  303E               	movlw	low __pbssBANK0
   366  0015  0084               	movwf	4
   367  0016  3056               	movlw	low (__pbssBANK0+24)
   368  0017  26AF               	fcall	clear_ram0
   369  0018                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372  0018                     __end_of__initialization:	
   373  0018  0183               	clrf	3
   374  0019  2CFC               	ljmp	_main	;jump to C main() function
   375                           
   376                           	psect	bitbssCOMMON
   377  03C0                     __pbitbssCOMMON:	
   378  03C0                     buscar@achou:	
   379  03C0                     	ds	1
   380  03C1                     _modo:	
   381  03C1                     	ds	1
   382                           
   383                           	psect	bssCOMMON
   384  0079                     __pbssCOMMON:	
   385  0079                     _quantidade:	
   386  0079                     	ds	1
   387                           
   388                           	psect	bssBANK0
   389  003E                     __pbssBANK0:	
   390  003E                     _numero:	
   391  003E                     	ds	10
   392  0048                     _estado:	
   393  0048                     	ds	2
   394  004A                     _endereco:	
   395  004A                     	ds	1
   396  004B                     _entrada:	
   397  004B                     	ds	1
   398  004C                     _nome:	
   399  004C                     	ds	10
   400                           
   401                           	psect	clrtext
   402  06AF                     clear_ram0:	
   403                           ;	Called with FSR containing the base address, and
   404                           ;	W with the last address+1
   405                           
   406  06AF  0064               	clrwdt	;clear the watchdog before getting into this loop
   407  06B0                     clrloop0:	
   408  06B0  0180               	clrf	0	;clear RAM location pointed to by FSR
   409  06B1  0A84               	incf	4,f	;increment pointer
   410  06B2  0604               	xorwf	4,w	;XOR with final address
   411  06B3  1903               	btfsc	3,2	;have we reached the end yet?
   412  06B4  3400               	retlw	0	;all done for this memory range, return
   413  06B5  0604               	xorwf	4,w	;XOR again to restore value
   414  06B6  2EB0               	goto	clrloop0	;do the next byte
   415                           
   416                           	psect	cstackCOMMON
   417  0070                     __pcstackCOMMON:	
   418  0070                     ?_lcd_init:	
   419  0070                     ?_lcd_cmd:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_eeprom_read:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_maquina:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_discar:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_adicionar:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_digitarNumero:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_digitarNome:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_buscar:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_chamar:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_armazenar:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_desligar:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_desativaModo:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_ativaModo:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ?_lcd_dat:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_interrupcao:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_interrupcao:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_lcd_wr:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_main:	
   471                           ; 1 bytes @ 0x0
   472                           
   473                           
   474                           ; 2 bytes @ 0x0
   475  0070                     	ds	4
   476  0074                     ??_eeprom_read:	
   477  0074                     ?_eeprom_write:	
   478                           ; 1 bytes @ 0x4
   479                           
   480  0074                     ??_desativaModo:	
   481                           ; 1 bytes @ 0x4
   482                           
   483  0074                     ??_ativaModo:	
   484                           ; 1 bytes @ 0x4
   485                           
   486  0074                     ?_atraso_ms:	
   487                           ; 1 bytes @ 0x4
   488                           
   489  0074                     ??_lcd_wr:	
   490                           ; 1 bytes @ 0x4
   491                           
   492  0074                     ?___bmul:	
   493                           ; 1 bytes @ 0x4
   494                           
   495  0074                     eeprom_write@value:	
   496                           ; 1 bytes @ 0x4
   497                           
   498  0074                     ___bmul@multiplicand:	
   499                           ; 1 bytes @ 0x4
   500                           
   501  0074                     atraso_ms@valor:	
   502                           ; 1 bytes @ 0x4
   503                           
   504                           
   505                           ; 2 bytes @ 0x4
   506  0074                     	ds	1
   507  0075                     ??_eeprom_write:	
   508  0075                     ??___bmul:	
   509                           ; 1 bytes @ 0x5
   510                           
   511  0075                     lcd_wr@val:	
   512                           ; 1 bytes @ 0x5
   513                           
   514  0075                     eeprom_read@addr:	
   515                           ; 1 bytes @ 0x5
   516                           
   517                           
   518                           ; 1 bytes @ 0x5
   519  0075                     	ds	1
   520  0076                     ??_buscar:	
   521  0076                     ??_atraso_ms:	
   522                           ; 1 bytes @ 0x6
   523                           
   524  0076                     lcd_wr@i:	
   525                           ; 1 bytes @ 0x6
   526                           
   527  0076                     eeprom_write@addr:	
   528                           ; 1 bytes @ 0x6
   529                           
   530  0076                     ___bmul@product:	
   531                           ; 1 bytes @ 0x6
   532                           
   533                           
   534                           ; 1 bytes @ 0x6
   535  0076                     	ds	1
   536  0077                     ??_lcd_cmd:	
   537  0077                     ??_lcd_dat:	
   538                           ; 1 bytes @ 0x7
   539                           
   540  0077                     lcd_cmd@val:	
   541                           ; 1 bytes @ 0x7
   542                           
   543  0077                     lcd_dat@val:	
   544                           ; 1 bytes @ 0x7
   545                           
   546  0077                     ___bmul@multiplier:	
   547                           ; 1 bytes @ 0x7
   548                           
   549                           
   550                           ; 1 bytes @ 0x7
   551  0077                     	ds	1
   552  0078                     ??_lcd_init:	
   553  0078                     ??_chamar:	
   554                           ; 1 bytes @ 0x8
   555                           
   556                           
   557                           	psect	cstackBANK0
   558  0020                     __pcstackBANK0:	
   559                           ; 1 bytes @ 0x8
   560                           
   561  0020                     buscar@num:	
   562  0020                     atraso_ms@i:	
   563                           ; 2 bytes @ 0x0
   564                           
   565                           
   566                           ; 2 bytes @ 0x0
   567  0020                     	ds	2
   568  0022                     atraso_ms@j:	
   569  0022                     buscar@i_147:	
   570                           ; 1 bytes @ 0x2
   571                           
   572                           
   573                           ; 2 bytes @ 0x2
   574  0022                     	ds	1
   575  0023                     ?_lcd_str:	
   576  0023                     ?_tc_tecla:	
   577                           ; 1 bytes @ 0x3
   578                           
   579  0023                     lcd_str@str:	
   580                           ; 1 bytes @ 0x3
   581                           
   582  0023                     tc_tecla@timeout:	
   583                           ; 2 bytes @ 0x3
   584                           
   585                           
   586                           ; 2 bytes @ 0x3
   587  0023                     	ds	1
   588  0024                     buscar@end:	
   589                           
   590                           ; 1 bytes @ 0x4
   591  0024                     	ds	1
   592  0025                     ??_lcd_str:	
   593  0025                     ??_tc_tecla:	
   594                           ; 1 bytes @ 0x5
   595                           
   596  0025                     buscar@i:	
   597                           ; 1 bytes @ 0x5
   598                           
   599                           
   600                           ; 2 bytes @ 0x5
   601  0025                     	ds	1
   602  0026                     lcd_str@i:	
   603                           
   604                           ; 1 bytes @ 0x6
   605  0026                     	ds	1
   606  0027                     ??_desligar:	
   607  0027                     tc_tecla@tmp:	
   608                           ; 1 bytes @ 0x7
   609                           
   610                           
   611                           ; 1 bytes @ 0x7
   612  0027                     	ds	1
   613  0028                     tc_tecla@to:	
   614                           
   615                           ; 2 bytes @ 0x8
   616  0028                     	ds	2
   617  002A                     tc_tecla@i:	
   618                           
   619                           ; 1 bytes @ 0xA
   620  002A                     	ds	1
   621  002B                     tc_tecla@ret:	
   622                           
   623                           ; 1 bytes @ 0xB
   624  002B                     	ds	1
   625  002C                     ??_discar:	
   626  002C                     ??_adicionar:	
   627                           ; 1 bytes @ 0xC
   628                           
   629  002C                     ??_digitarNumero:	
   630                           ; 1 bytes @ 0xC
   631                           
   632  002C                     ??_armazenar:	
   633                           ; 1 bytes @ 0xC
   634                           
   635  002C                     ?_tc_letra:	
   636                           ; 1 bytes @ 0xC
   637                           
   638  002C                     tc_letra@timeout:	
   639                           ; 1 bytes @ 0xC
   640                           
   641                           
   642                           ; 2 bytes @ 0xC
   643  002C                     	ds	1
   644  002D                     digitarNumero@cont:	
   645  002D                     armazenar@i:	
   646                           ; 2 bytes @ 0xD
   647                           
   648                           
   649                           ; 2 bytes @ 0xD
   650  002D                     	ds	1
   651  002E                     ??_tc_letra:	
   652                           
   653                           ; 1 bytes @ 0xE
   654  002E                     	ds	1
   655  002F                     armazenar@i_151:	
   656  002F                     tc_letra@i:	
   657                           ; 2 bytes @ 0xF
   658                           
   659                           
   660                           ; 2 bytes @ 0xF
   661  002F                     	ds	2
   662  0031                     tc_letra@i_200:	
   663                           
   664                           ; 2 bytes @ 0x11
   665  0031                     	ds	2
   666  0033                     tc_letra@num2:	
   667                           
   668                           ; 1 bytes @ 0x13
   669  0033                     	ds	1
   670  0034                     tc_letra@ret:	
   671                           
   672                           ; 1 bytes @ 0x14
   673  0034                     	ds	1
   674  0035                     tc_letra@num:	
   675                           
   676                           ; 1 bytes @ 0x15
   677  0035                     	ds	1
   678  0036                     tc_letra@cont:	
   679                           
   680                           ; 2 bytes @ 0x16
   681  0036                     	ds	2
   682  0038                     ??_digitarNome:	
   683                           
   684                           ; 1 bytes @ 0x18
   685  0038                     	ds	1
   686  0039                     digitarNome@cont:	
   687                           
   688                           ; 2 bytes @ 0x19
   689  0039                     	ds	2
   690  003B                     ??_maquina:	
   691                           
   692                           ; 1 bytes @ 0x1B
   693  003B                     	ds	1
   694  003C                     ??_main:	
   695                           
   696                           ; 1 bytes @ 0x1C
   697  003C                     	ds	1
   698  003D                     main@val:	
   699                           
   700                           ; 1 bytes @ 0x1D
   701  003D                     	ds	1
   702                           
   703                           	psect	maintext
   704  04FC                     __pmaintext:	
   705 ;;
   706 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   707 ;;
   708 ;; *************** function _main *****************
   709 ;; Defined at:
   710 ;;		line 39 in file "main.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;		None
   713 ;; Auto vars:     Size  Location     Type
   714 ;;  val             1   29[BANK0 ] unsigned char 
   715 ;;  tmp             1    0        unsigned char 
   716 ;;  i               1    0        unsigned char 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  2   66[None  ] int 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : B00/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   726 ;;      Params:         0       0       0       0
   727 ;;      Locals:         0       1       0       0
   728 ;;      Temps:          0       1       0       0
   729 ;;      Totals:         0       2       0       0
   730 ;;Total ram usage:        2 bytes
   731 ;; Hardware stack levels required when called:    6
   732 ;; This function calls:
   733 ;;		_eeprom_read
   734 ;;		_eeprom_write
   735 ;;		_lcd_cmd
   736 ;;		_lcd_init
   737 ;;		_maquina
   738 ;; This function is called by:
   739 ;;		Startup code after reset
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           
   744                           ;psect for function _main
   745  04FC                     _main:	
   746                           
   747                           ;main.c: 40: unsigned char i, tmp;
   748                           ;main.c: 42: CMCON = 0x07;
   749                           
   750                           ;incstack = 0
   751                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   752  04FC  3007               	movlw	7
   753  04FD  1283               	bcf	3,5	;RP0=0, select bank0
   754  04FE  1303               	bcf	3,6	;RP1=0, select bank0
   755  04FF  009F               	movwf	31	;volatile
   756                           
   757                           ;main.c: 43: TRISA = 0x30;
   758  0500  3030               	movlw	48
   759  0501  1683               	bsf	3,5	;RP0=1, select bank1
   760  0502  1303               	bcf	3,6	;RP1=0, select bank1
   761  0503  0085               	movwf	5	;volatile
   762                           
   763                           ;main.c: 44: TRISB = 0xE7;
   764  0504  30E7               	movlw	231
   765  0505  0086               	movwf	6	;volatile
   766                           
   767                           ;main.c: 46: PORTA = 0xFE;
   768  0506  30FE               	movlw	254
   769  0507  1283               	bcf	3,5	;RP0=0, select bank0
   770  0508  1303               	bcf	3,6	;RP1=0, select bank0
   771  0509  0085               	movwf	5	;volatile
   772                           
   773                           ;main.c: 47: PORTB = 0x00;
   774  050A  0186               	clrf	6	;volatile
   775                           
   776                           ;main.c: 48: lcd_init();
   777  050B  2526               	fcall	_lcd_init
   778                           
   779                           ;main.c: 49: lcd_cmd(0x01);
   780  050C  3001               	movlw	1
   781  050D  2636               	fcall	_lcd_cmd
   782                           
   783                           ;main.c: 51: unsigned char val = eeprom_read(0x0);
   784  050E  3000               	movlw	0
   785  050F  267E               	fcall	_eeprom_read
   786  0510  1283               	bcf	3,5	;RP0=0, select bank0
   787  0511  1303               	bcf	3,6	;RP1=0, select bank0
   788  0512  00BC               	movwf	??_main
   789  0513  083C               	movf	??_main,w
   790  0514  00BD               	movwf	main@val
   791                           
   792                           ;main.c: 52: if (val = 255) {
   793  0515  30FF               	movlw	255
   794  0516  00BC               	movwf	??_main
   795  0517  083C               	movf	??_main,w
   796  0518  00BD               	movwf	main@val
   797                           
   798                           ;main.c: 53: eeprom_write(0x0, 0x1);
   799  0519  01F4               	clrf	eeprom_write@value
   800  051A  0AF4               	incf	eeprom_write@value,f
   801  051B  3000               	movlw	0
   802  051C  25BD               	fcall	_eeprom_write
   803                           
   804                           ;main.c: 54: endereco = eeprom_read(0x0);
   805  051D  3000               	movlw	0
   806  051E  267E               	fcall	_eeprom_read
   807  051F  1283               	bcf	3,5	;RP0=0, select bank0
   808  0520  1303               	bcf	3,6	;RP1=0, select bank0
   809  0521  00BC               	movwf	??_main
   810  0522  083C               	movf	??_main,w
   811  0523  00CA               	movwf	_endereco
   812  0524                     l2527:	
   813                           ;main.c: 55: }
   814                           ;main.c: 57: while (1) {
   815                           
   816                           
   817                           ;main.c: 58: maquina();
   818  0524  24A6               	fcall	_maquina
   819  0525  2D24               	goto	l2527
   820  0526                     __end_of_main:	
   821                           ;main.c: 59: }
   822                           ;main.c: 60: return 0;
   823                           ;	Return value of _main is never used
   824                           
   825                           
   826                           	psect	text1
   827  04A6                     __ptext1:	
   828 ;; *************** function _maquina *****************
   829 ;; Defined at:
   830 ;;		line 67 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   844 ;;      Params:         0       0       0       0
   845 ;;      Locals:         0       0       0       0
   846 ;;      Temps:          0       1       0       0
   847 ;;      Totals:         0       1       0       0
   848 ;;Total ram usage:        1 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; Hardware stack levels required when called:    5
   851 ;; This function calls:
   852 ;;		_adicionar
   853 ;;		_armazenar
   854 ;;		_buscar
   855 ;;		_chamar
   856 ;;		_desligar
   857 ;;		_digitarNome
   858 ;;		_digitarNumero
   859 ;;		_discar
   860 ;;		_eeprom_read
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _maquina
   868  04A6                     _maquina:	
   869                           
   870                           ;main.c: 68: endereco = eeprom_read(0x0);
   871                           
   872                           ;incstack = 0
   873                           ; Regs used in _maquina: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   874  04A6  3000               	movlw	0
   875  04A7  267E               	fcall	_eeprom_read
   876  04A8  1283               	bcf	3,5	;RP0=0, select bank0
   877  04A9  1303               	bcf	3,6	;RP1=0, select bank0
   878  04AA  00BB               	movwf	??_maquina
   879  04AB  083B               	movf	??_maquina,w
   880  04AC  00CA               	movwf	_endereco
   881                           
   882                           ;main.c: 69: switch (estado) {
   883  04AD  2CBE               	goto	l2501
   884  04AE                     l2483:	
   885                           ;main.c: 70: case 0:
   886                           
   887                           
   888                           ;main.c: 71: discar();
   889  04AE  2479               	fcall	_discar
   890                           
   891                           ;main.c: 72: break;
   892  04AF  0008               	return
   893  04B0                     l2485:	
   894                           ;main.c: 73: case 1:
   895                           
   896                           
   897                           ;main.c: 74: adicionar();
   898  04B0  24D1               	fcall	_adicionar
   899                           
   900                           ;main.c: 75: break;
   901  04B1  0008               	return
   902  04B2                     l2487:	
   903                           ;main.c: 76: case 2:
   904                           
   905                           
   906                           ;main.c: 77: digitarNumero();
   907  04B2  201A               	fcall	_digitarNumero
   908                           
   909                           ;main.c: 78: break;
   910  04B3  0008               	return
   911  04B4                     l2489:	
   912                           ;main.c: 79: case 3:
   913                           
   914                           
   915                           ;main.c: 80: digitarNome();
   916  04B4  2175               	fcall	_digitarNome
   917                           
   918                           ;main.c: 81: break;
   919  04B5  0008               	return
   920  04B6                     l2491:	
   921                           ;main.c: 82: case 7:
   922                           
   923                           
   924                           ;main.c: 83: buscar();
   925  04B6  22C6               	fcall	_buscar
   926                           
   927                           ;main.c: 84: break;
   928  04B7  0008               	return
   929  04B8                     l2493:	
   930                           ;main.c: 85: case 5:
   931                           
   932                           
   933                           ;main.c: 86: chamar();
   934  04B8  2599               	fcall	_chamar
   935                           
   936                           ;main.c: 87: break;
   937  04B9  0008               	return
   938  04BA                     l2495:	
   939                           ;main.c: 88: case 4:
   940                           
   941                           
   942                           ;main.c: 89: armazenar();
   943  04BA  236C               	fcall	_armazenar
   944                           
   945                           ;main.c: 90: break;
   946  04BB  0008               	return
   947  04BC                     l2497:	
   948                           ;main.c: 91: case 6:
   949                           
   950                           
   951                           ;main.c: 92: desligar();
   952  04BC  25DF               	fcall	_desligar
   953                           
   954                           ;main.c: 96: }
   955                           
   956                           ;main.c: 95: break;
   957                           
   958                           ;main.c: 94: default:
   959                           
   960                           ;main.c: 93: break;
   961  04BD  0008               	return
   962  04BE                     l2501:	
   963                           
   964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   965                           ; Switch size 1, requested type "space"
   966                           ; Number of cases is 1, Range of values is 0 to 0
   967                           ; switch strategies available:
   968                           ; Name         Instructions Cycles
   969                           ; simple_byte            4     3 (average)
   970                           ; direct_byte            7     6 (fixed)
   971                           ; jumptable            260     6 (fixed)
   972                           ;	Chosen strategy is simple_byte
   973  04BE  1283               	bcf	3,5	;RP0=0, select bank0
   974  04BF  1303               	bcf	3,6	;RP1=0, select bank0
   975  04C0  0849               	movf	_estado+1,w
   976  04C1  3A00               	xorlw	0	; case 0
   977  04C2  1903               	skipnz
   978  04C3  2CC5               	goto	l2609
   979  04C4  2CD0               	goto	l88
   980  04C5                     l2609:	
   981                           
   982                           ; Switch size 1, requested type "space"
   983                           ; Number of cases is 8, Range of values is 0 to 7
   984                           ; switch strategies available:
   985                           ; Name         Instructions Cycles
   986                           ; direct_byte           14     6 (fixed)
   987                           ; simple_byte           25    13 (average)
   988                           ; jumptable            260     6 (fixed)
   989                           ;	Chosen strategy is direct_byte
   990  04C5  0848               	movf	_estado,w
   991  04C6  0084               	movwf	4
   992  04C7  3008               	movlw	8
   993  04C8  0204               	subwf	4,w
   994  04C9  1803               	skipnc
   995  04CA  0008               	return
   996  04CB  3006               	movlw	high S2611
   997  04CC  008A               	movwf	10
   998  04CD  30B7               	movlw	low S2611
   999  04CE  0704               	addwf	4,w
  1000  04CF  0082               	movwf	2
  1001  04D0                     l88:	
  1002  04D0  0008               	return
  1003  04D1                     __end_of_maquina:	
  1004                           
  1005                           	psect	swtext1
  1006  06B7                     __pswtext1:	
  1007  06B7                     S2611:	
  1008  06B7  2CAE               	ljmp	l2483
  1009  06B8  2CB0               	ljmp	l2485
  1010  06B9  2CB2               	ljmp	l2487
  1011  06BA  2CB4               	ljmp	l2489
  1012  06BB  2CBA               	ljmp	l2495
  1013  06BC  2CB8               	ljmp	l2493
  1014  06BD  2CBC               	ljmp	l2497
  1015  06BE  2CB6               	ljmp	l2491
  1016                           
  1017                           	psect	text2
  1018  0479                     __ptext2:	
  1019 ;; *************** function _discar *****************
  1020 ;; Defined at:
  1021 ;;		line 99 in file "main.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1035 ;;      Params:         0       0       0       0
  1036 ;;      Locals:         0       0       0       0
  1037 ;;      Temps:          0       1       0       0
  1038 ;;      Totals:         0       1       0       0
  1039 ;;Total ram usage:        1 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    4
  1042 ;; This function calls:
  1043 ;;		_desativaModo
  1044 ;;		_lcd_cmd
  1045 ;;		_lcd_str
  1046 ;;		_tc_tecla
  1047 ;; This function is called by:
  1048 ;;		_maquina
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           
  1053                           ;psect for function _discar
  1054  0479                     _discar:	
  1055                           
  1056                           ;main.c: 100: lcd_cmd(0x01);
  1057                           
  1058                           ;incstack = 0
  1059                           ; Regs used in _discar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1060  0479  3001               	movlw	1
  1061  047A  2636               	fcall	_lcd_cmd
  1062                           
  1063                           ;main.c: 101: lcd_cmd(0x80);
  1064  047B  3080               	movlw	128
  1065  047C  2636               	fcall	_lcd_cmd
  1066                           
  1067                           ;main.c: 102: lcd_str("Discar");
  1068  047D  3063               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1069  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1070  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0480  00A3               	movwf	lcd_str@str
  1072  0481  3080               	movlw	128
  1073  0482  00A4               	movwf	lcd_str@str+1
  1074  0483  25FE               	fcall	_lcd_str
  1075                           
  1076                           ;main.c: 103: entrada = tc_tecla(0);
  1077  0484  3000               	movlw	0
  1078  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1079  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1080  0487  00A3               	movwf	tc_tecla@timeout
  1081  0488  00A4               	movwf	tc_tecla@timeout+1
  1082  0489  221E               	fcall	_tc_tecla
  1083  048A  1283               	bcf	3,5	;RP0=0, select bank0
  1084  048B  1303               	bcf	3,6	;RP1=0, select bank0
  1085  048C  00AC               	movwf	??_discar
  1086  048D  082C               	movf	??_discar,w
  1087  048E  00CB               	movwf	_entrada
  1088                           
  1089                           ;main.c: 105: switch (entrada) {
  1090  048F  2C9D               	goto	l2291
  1091  0490                     l2283:	
  1092                           ;main.c: 106: case '*':
  1093                           
  1094                           
  1095                           ;main.c: 107: estado = 1;
  1096  0490  3001               	movlw	1
  1097  0491  00C8               	movwf	_estado
  1098  0492  3000               	movlw	0
  1099  0493  00C9               	movwf	_estado+1
  1100                           
  1101                           ;main.c: 108: break;
  1102  0494  0008               	return
  1103  0495                     l2285:	
  1104                           ;main.c: 109: case '#':
  1105                           
  1106                           
  1107                           ;main.c: 110: desativaModo();
  1108  0495  26BF               	fcall	_desativaModo
  1109                           
  1110                           ;main.c: 111: estado = 2;
  1111  0496  3002               	movlw	2
  1112  0497  1283               	bcf	3,5	;RP0=0, select bank0
  1113  0498  1303               	bcf	3,6	;RP1=0, select bank0
  1114  0499  00C8               	movwf	_estado
  1115  049A  3000               	movlw	0
  1116  049B  00C9               	movwf	_estado+1
  1117                           
  1118                           ;main.c: 115: }
  1119                           
  1120                           ;main.c: 114: break;
  1121                           
  1122                           ;main.c: 113: default:
  1123                           
  1124                           ;main.c: 112: break;
  1125  049C  0008               	return
  1126  049D                     l2291:	
  1127  049D  084B               	movf	_entrada,w
  1128                           
  1129                           ; Switch size 1, requested type "space"
  1130                           ; Number of cases is 2, Range of values is 35 to 42
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte            7     4 (average)
  1134                           ; direct_byte           17     9 (fixed)
  1135                           ; jumptable            263     9 (fixed)
  1136                           ;	Chosen strategy is simple_byte
  1137  049E  3A23               	xorlw	35	; case 35
  1138  049F  1903               	skipnz
  1139  04A0  2C95               	goto	l2285
  1140  04A1  3A09               	xorlw	9	; case 42
  1141  04A2  1903               	skipnz
  1142  04A3  2C90               	goto	l2283
  1143  04A4  2CA5               	goto	l96
  1144  04A5                     l96:	
  1145  04A5  0008               	return
  1146  04A6                     __end_of_discar:	
  1147                           
  1148                           	psect	text3
  1149  06BF                     __ptext3:	
  1150 ;; *************** function _desativaModo *****************
  1151 ;; Defined at:
  1152 ;;		line 142 in file "main.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		None
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1166 ;;      Params:         0       0       0       0
  1167 ;;      Locals:         0       0       0       0
  1168 ;;      Temps:          0       0       0       0
  1169 ;;      Totals:         0       0       0       0
  1170 ;;Total ram usage:        0 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    1
  1173 ;; This function calls:
  1174 ;;		Nothing
  1175 ;; This function is called by:
  1176 ;;		_discar
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _desativaModo
  1182  06BF                     _desativaModo:	
  1183                           
  1184                           ;main.c: 143: modo = 0b0;
  1185                           
  1186                           ;incstack = 0
  1187                           ; Regs used in _desativaModo: []
  1188  06BF  10F8               	bcf	_modo/(0+8),_modo& (0+7)
  1189  06C0  0008               	return
  1190  06C1                     __end_of_desativaModo:	
  1191                           
  1192                           	psect	text4
  1193  001A                     __ptext4:	
  1194 ;; *************** function _digitarNumero *****************
  1195 ;; Defined at:
  1196 ;;		line 180 in file "main.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;		None
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  cont            2   13[BANK0 ] int 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  1    wreg      void 
  1203 ;; Registers used:
  1204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/0
  1207 ;;		On exit  : 0/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1210 ;;      Params:         0       0       0       0
  1211 ;;      Locals:         0       2       0       0
  1212 ;;      Temps:          0       1       0       0
  1213 ;;      Totals:         0       3       0       0
  1214 ;;Total ram usage:        3 bytes
  1215 ;; Hardware stack levels used:    1
  1216 ;; Hardware stack levels required when called:    4
  1217 ;; This function calls:
  1218 ;;		_lcd_cmd
  1219 ;;		_lcd_dat
  1220 ;;		_lcd_str
  1221 ;;		_tc_tecla
  1222 ;; This function is called by:
  1223 ;;		_maquina
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function _digitarNumero
  1229  001A                     _digitarNumero:	
  1230                           
  1231                           ;main.c: 181: lcd_cmd(0x01);
  1232                           
  1233                           ;incstack = 0
  1234                           ; Regs used in _digitarNumero: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1235  001A  3001               	movlw	1
  1236  001B  2636               	fcall	_lcd_cmd
  1237                           
  1238                           ;main.c: 182: lcd_cmd(0x80);
  1239  001C  3080               	movlw	128
  1240  001D  2636               	fcall	_lcd_cmd
  1241                           
  1242                           ;main.c: 183: lcd_str("Digite Numero");
  1243  001E  3022               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1244  001F  1283               	bcf	3,5	;RP0=0, select bank0
  1245  0020  1303               	bcf	3,6	;RP1=0, select bank0
  1246  0021  00A3               	movwf	lcd_str@str
  1247  0022  3080               	movlw	128
  1248  0023  00A4               	movwf	lcd_str@str+1
  1249  0024  25FE               	fcall	_lcd_str
  1250                           
  1251                           ;main.c: 184: lcd_cmd(0xC0);
  1252  0025  30C0               	movlw	192
  1253  0026  2636               	fcall	_lcd_cmd
  1254                           
  1255                           ;main.c: 185: lcd_str("#########");
  1256  0027  3048               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1257  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1259  002A  00A3               	movwf	lcd_str@str
  1260  002B  3080               	movlw	128
  1261  002C  00A4               	movwf	lcd_str@str+1
  1262  002D  25FE               	fcall	_lcd_str
  1263                           
  1264                           ;main.c: 186: lcd_cmd(0xC0);
  1265  002E  30C0               	movlw	192
  1266  002F  2636               	fcall	_lcd_cmd
  1267                           
  1268                           ;main.c: 187: entrada = ' ';
  1269  0030  3020               	movlw	32
  1270  0031  1283               	bcf	3,5	;RP0=0, select bank0
  1271  0032  1303               	bcf	3,6	;RP1=0, select bank0
  1272  0033  00AC               	movwf	??_digitarNumero
  1273  0034  082C               	movf	??_digitarNumero,w
  1274  0035  00CB               	movwf	_entrada
  1275                           
  1276                           ;main.c: 189: int cont = 0;
  1277  0036  01AD               	clrf	digitarNumero@cont
  1278  0037  01AE               	clrf	digitarNumero@cont+1
  1279                           
  1280                           ;main.c: 190: while (entrada != '#' && cont < 9) {
  1281  0038  2875               	goto	l2341
  1282  0039                     l2321:	
  1283                           
  1284                           ;main.c: 191: if(entrada == '#' ){
  1285  0039  3023               	movlw	35
  1286  003A  1283               	bcf	3,5	;RP0=0, select bank0
  1287  003B  1303               	bcf	3,6	;RP1=0, select bank0
  1288  003C  064B               	xorwf	_entrada,w
  1289  003D  1903               	btfsc	3,2
  1290  003E  2886               	goto	l2345
  1291                           
  1292                           ;main.c: 193: }
  1293                           ;main.c: 194: entrada = tc_tecla(0);
  1294                           
  1295                           ;main.c: 192: break;
  1296  003F  3000               	movlw	0
  1297  0040  00A3               	movwf	tc_tecla@timeout
  1298  0041  00A4               	movwf	tc_tecla@timeout+1
  1299  0042  221E               	fcall	_tc_tecla
  1300  0043  1283               	bcf	3,5	;RP0=0, select bank0
  1301  0044  1303               	bcf	3,6	;RP1=0, select bank0
  1302  0045  00AC               	movwf	??_digitarNumero
  1303  0046  082C               	movf	??_digitarNumero,w
  1304  0047  00CB               	movwf	_entrada
  1305                           
  1306                           ;main.c: 195: if (entrada == '*' && cont > 0) {
  1307  0048  302A               	movlw	42
  1308  0049  064B               	xorwf	_entrada,w
  1309  004A  1D03               	btfss	3,2
  1310  004B  2863               	goto	l2335
  1311  004C  082E               	movf	digitarNumero@cont+1,w
  1312  004D  3A80               	xorlw	128
  1313  004E  00FF               	movwf	127
  1314  004F  3080               	movlw	128
  1315  0050  027F               	subwf	127,w
  1316  0051  1D03               	skipz
  1317  0052  2855               	goto	u1745
  1318  0053  3001               	movlw	1
  1319  0054  022D               	subwf	digitarNumero@cont,w
  1320  0055                     u1745:	
  1321  0055  1C03               	skipc
  1322  0056  2863               	goto	l2335
  1323                           
  1324                           ;main.c: 196: cont--;
  1325  0057  30FF               	movlw	255
  1326  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1327  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1328  005A  07AD               	addwf	digitarNumero@cont,f
  1329  005B  1803               	skipnc
  1330  005C  0AAE               	incf	digitarNumero@cont+1,f
  1331  005D  30FF               	movlw	255
  1332  005E  07AE               	addwf	digitarNumero@cont+1,f
  1333                           
  1334                           ;main.c: 197: lcd_cmd(0xC0 + cont);
  1335  005F  082D               	movf	digitarNumero@cont,w
  1336  0060  3EC0               	addlw	192
  1337  0061  2636               	fcall	_lcd_cmd
  1338                           
  1339                           ;main.c: 198: continue;
  1340  0062  2875               	goto	l2341
  1341  0063                     l2335:	
  1342                           
  1343                           ;main.c: 199: }
  1344                           ;main.c: 200: numero[cont] = entrada;
  1345  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0065  084B               	movf	_entrada,w
  1348  0066  00AC               	movwf	??_digitarNumero
  1349  0067  082D               	movf	digitarNumero@cont,w
  1350  0068  3E3E               	addlw	(low (_numero| 0))& (0+255)
  1351  0069  0084               	movwf	4
  1352  006A  082C               	movf	??_digitarNumero,w
  1353  006B  1383               	bcf	3,7	;select IRP bank0
  1354  006C  0080               	movwf	0
  1355                           
  1356                           ;main.c: 201: cont++;
  1357  006D  3001               	movlw	1
  1358  006E  07AD               	addwf	digitarNumero@cont,f
  1359  006F  1803               	skipnc
  1360  0070  0AAE               	incf	digitarNumero@cont+1,f
  1361  0071  3000               	movlw	0
  1362  0072  07AE               	addwf	digitarNumero@cont+1,f
  1363                           
  1364                           ;main.c: 202: lcd_dat(entrada);
  1365  0073  084B               	movf	_entrada,w
  1366  0074  261C               	fcall	_lcd_dat
  1367  0075                     l2341:	
  1368  0075  3023               	movlw	35
  1369  0076  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0077  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0078  064B               	xorwf	_entrada,w
  1372  0079  1903               	btfsc	3,2
  1373  007A  2886               	goto	l2345
  1374  007B  082E               	movf	digitarNumero@cont+1,w
  1375  007C  3A80               	xorlw	128
  1376  007D  00FF               	movwf	127
  1377  007E  3080               	movlw	128
  1378  007F  027F               	subwf	127,w
  1379  0080  1D03               	skipz
  1380  0081  2884               	goto	u1765
  1381  0082  3009               	movlw	9
  1382  0083  022D               	subwf	digitarNumero@cont,w
  1383  0084                     u1765:	
  1384  0084  1C03               	skipc
  1385  0085  2839               	goto	l2321
  1386  0086                     l2345:	
  1387                           
  1388                           ;main.c: 203: }
  1389                           ;main.c: 204: if (cont < 9) {
  1390  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0088  082E               	movf	digitarNumero@cont+1,w
  1393  0089  3A80               	xorlw	128
  1394  008A  00FF               	movwf	127
  1395  008B  3080               	movlw	128
  1396  008C  027F               	subwf	127,w
  1397  008D  1D03               	skipz
  1398  008E  2891               	goto	u1775
  1399  008F  3009               	movlw	9
  1400  0090  022D               	subwf	digitarNumero@cont,w
  1401  0091                     u1775:	
  1402  0091  1803               	skipnc
  1403  0092  28BB               	goto	l2357
  1404                           
  1405                           ;main.c: 205: for (; cont < 9; cont++) {
  1406  0093  1283               	bcf	3,5	;RP0=0, select bank0
  1407  0094  1303               	bcf	3,6	;RP1=0, select bank0
  1408  0095  082E               	movf	digitarNumero@cont+1,w
  1409  0096  3A80               	xorlw	128
  1410  0097  00FF               	movwf	127
  1411  0098  3080               	movlw	128
  1412  0099  027F               	subwf	127,w
  1413  009A  1D03               	skipz
  1414  009B  289E               	goto	u1785
  1415  009C  3009               	movlw	9
  1416  009D  022D               	subwf	digitarNumero@cont,w
  1417  009E                     u1785:	
  1418  009E  1803               	btfsc	3,0
  1419  009F  28BB               	goto	l2357
  1420  00A0                     l2351:	
  1421                           
  1422                           ;main.c: 206: numero[cont] = '#';
  1423  00A0  3023               	movlw	35
  1424  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1425  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  1426  00A3  00AC               	movwf	??_digitarNumero
  1427  00A4  082D               	movf	digitarNumero@cont,w
  1428  00A5  3E3E               	addlw	(low (_numero| 0))& (0+255)
  1429  00A6  0084               	movwf	4
  1430  00A7  082C               	movf	??_digitarNumero,w
  1431  00A8  1383               	bcf	3,7	;select IRP bank0
  1432  00A9  0080               	movwf	0
  1433  00AA  3001               	movlw	1
  1434  00AB  07AD               	addwf	digitarNumero@cont,f
  1435  00AC  1803               	skipnc
  1436  00AD  0AAE               	incf	digitarNumero@cont+1,f
  1437  00AE  3000               	movlw	0
  1438  00AF  07AE               	addwf	digitarNumero@cont+1,f
  1439  00B0  082E               	movf	digitarNumero@cont+1,w
  1440  00B1  3A80               	xorlw	128
  1441  00B2  00FF               	movwf	127
  1442  00B3  3080               	movlw	128
  1443  00B4  027F               	subwf	127,w
  1444  00B5  1D03               	skipz
  1445  00B6  28B9               	goto	u1795
  1446  00B7  3009               	movlw	9
  1447  00B8  022D               	subwf	digitarNumero@cont,w
  1448  00B9                     u1795:	
  1449  00B9  1C03               	skipc
  1450  00BA  28A0               	goto	l2351
  1451  00BB                     l2357:	
  1452                           
  1453                           ;main.c: 207: }
  1454                           ;main.c: 208: }
  1455                           ;main.c: 209: numero[9] = '\0';
  1456  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1457  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1458  00BD  01C7               	clrf	_numero+9
  1459                           
  1460                           ;main.c: 210: if (modo) {
  1461  00BE  1CF8               	btfss	_modo/(0+8),_modo& (0+7)
  1462  00BF  28C5               	goto	l2363
  1463                           
  1464                           ;main.c: 211: estado = 4;
  1465  00C0  3004               	movlw	4
  1466  00C1  00C8               	movwf	_estado
  1467  00C2  3000               	movlw	0
  1468  00C3  00C9               	movwf	_estado+1
  1469                           
  1470                           ;main.c: 212: } else {
  1471  00C4  0008               	return
  1472  00C5                     l2363:	
  1473                           
  1474                           ;main.c: 213: estado = 7;
  1475  00C5  3007               	movlw	7
  1476  00C6  00C8               	movwf	_estado
  1477  00C7  3000               	movlw	0
  1478  00C8  00C9               	movwf	_estado+1
  1479  00C9  0008               	return
  1480  00CA                     __end_of_digitarNumero:	
  1481                           
  1482                           	psect	text5
  1483  0175                     __ptext5:	
  1484 ;; *************** function _digitarNome *****************
  1485 ;; Defined at:
  1486 ;;		line 146 in file "main.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;		None
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  cont            2   25[BANK0 ] int 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1500 ;;      Params:         0       0       0       0
  1501 ;;      Locals:         0       2       0       0
  1502 ;;      Temps:          0       1       0       0
  1503 ;;      Totals:         0       3       0       0
  1504 ;;Total ram usage:        3 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    4
  1507 ;; This function calls:
  1508 ;;		_lcd_cmd
  1509 ;;		_lcd_dat
  1510 ;;		_lcd_str
  1511 ;;		_tc_letra
  1512 ;; This function is called by:
  1513 ;;		_maquina
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           
  1518                           ;psect for function _digitarNome
  1519  0175                     _digitarNome:	
  1520                           
  1521                           ;main.c: 147: lcd_cmd(0x01);
  1522                           
  1523                           ;incstack = 0
  1524                           ; Regs used in _digitarNome: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1525  0175  3001               	movlw	1
  1526  0176  2636               	fcall	_lcd_cmd
  1527                           
  1528                           ;main.c: 148: lcd_cmd(0x80);
  1529  0177  3080               	movlw	128
  1530  0178  2636               	fcall	_lcd_cmd
  1531                           
  1532                           ;main.c: 149: lcd_str("Digite Nome");
  1533  0179  303C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1534  017A  1283               	bcf	3,5	;RP0=0, select bank0
  1535  017B  1303               	bcf	3,6	;RP1=0, select bank0
  1536  017C  00A3               	movwf	lcd_str@str
  1537  017D  3080               	movlw	128
  1538  017E  00A4               	movwf	lcd_str@str+1
  1539  017F  25FE               	fcall	_lcd_str
  1540                           
  1541                           ;main.c: 150: lcd_cmd(0xC0);
  1542  0180  30C0               	movlw	192
  1543  0181  2636               	fcall	_lcd_cmd
  1544                           
  1545                           ;main.c: 151: lcd_str("#########");
  1546  0182  3048               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1547  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1548  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1549  0185  00A3               	movwf	lcd_str@str
  1550  0186  3080               	movlw	128
  1551  0187  00A4               	movwf	lcd_str@str+1
  1552  0188  25FE               	fcall	_lcd_str
  1553                           
  1554                           ;main.c: 152: lcd_cmd(0xC0);
  1555  0189  30C0               	movlw	192
  1556  018A  2636               	fcall	_lcd_cmd
  1557                           
  1558                           ;main.c: 154: entrada = ' ';
  1559  018B  3020               	movlw	32
  1560  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1561  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1562  018E  00B8               	movwf	??_digitarNome
  1563  018F  0838               	movf	??_digitarNome,w
  1564  0190  00CB               	movwf	_entrada
  1565                           
  1566                           ;main.c: 155: int cont = 0;
  1567  0191  01B9               	clrf	digitarNome@cont
  1568  0192  01BA               	clrf	digitarNome@cont+1
  1569                           
  1570                           ;main.c: 156: while (entrada != '#' && cont < 9) {
  1571  0193  29D0               	goto	l2397
  1572  0194                     l2377:	
  1573                           
  1574                           ;main.c: 157: entrada = tc_letra(0);
  1575  0194  3000               	movlw	0
  1576  0195  1283               	bcf	3,5	;RP0=0, select bank0
  1577  0196  1303               	bcf	3,6	;RP1=0, select bank0
  1578  0197  00AC               	movwf	tc_letra@timeout
  1579  0198  00AD               	movwf	tc_letra@timeout+1
  1580  0199  20CA               	fcall	_tc_letra
  1581  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1582  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1583  019C  00B8               	movwf	??_digitarNome
  1584  019D  0838               	movf	??_digitarNome,w
  1585  019E  00CB               	movwf	_entrada
  1586                           
  1587                           ;main.c: 158: if(entrada == '#' ){
  1588  019F  3023               	movlw	35
  1589  01A0  064B               	xorwf	_entrada,w
  1590  01A1  1903               	btfsc	3,2
  1591  01A2  29E1               	goto	l2401
  1592                           
  1593                           ;main.c: 160: }
  1594                           ;main.c: 161: if (entrada == '*' && cont > 0) {
  1595                           
  1596                           ;main.c: 159: break;
  1597  01A3  302A               	movlw	42
  1598  01A4  064B               	xorwf	_entrada,w
  1599  01A5  1D03               	btfss	3,2
  1600  01A6  29BE               	goto	l2391
  1601  01A7  083A               	movf	digitarNome@cont+1,w
  1602  01A8  3A80               	xorlw	128
  1603  01A9  00FF               	movwf	127
  1604  01AA  3080               	movlw	128
  1605  01AB  027F               	subwf	127,w
  1606  01AC  1D03               	skipz
  1607  01AD  29B0               	goto	u1835
  1608  01AE  3001               	movlw	1
  1609  01AF  0239               	subwf	digitarNome@cont,w
  1610  01B0                     u1835:	
  1611  01B0  1C03               	skipc
  1612  01B1  29BE               	goto	l2391
  1613                           
  1614                           ;main.c: 162: cont--;
  1615  01B2  30FF               	movlw	255
  1616  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1617  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1618  01B5  07B9               	addwf	digitarNome@cont,f
  1619  01B6  1803               	skipnc
  1620  01B7  0ABA               	incf	digitarNome@cont+1,f
  1621  01B8  30FF               	movlw	255
  1622  01B9  07BA               	addwf	digitarNome@cont+1,f
  1623                           
  1624                           ;main.c: 164: lcd_cmd(0xC0 + cont);
  1625  01BA  0839               	movf	digitarNome@cont,w
  1626  01BB  3EC0               	addlw	192
  1627  01BC  2636               	fcall	_lcd_cmd
  1628                           
  1629                           ;main.c: 165: continue;
  1630  01BD  29D0               	goto	l2397
  1631  01BE                     l2391:	
  1632                           
  1633                           ;main.c: 166: }
  1634                           ;main.c: 167: nome[cont] = entrada;
  1635  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1636  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  1637  01C0  084B               	movf	_entrada,w
  1638  01C1  00B8               	movwf	??_digitarNome
  1639  01C2  0839               	movf	digitarNome@cont,w
  1640  01C3  3E4C               	addlw	(low (_nome| 0))& (0+255)
  1641  01C4  0084               	movwf	4
  1642  01C5  0838               	movf	??_digitarNome,w
  1643  01C6  1383               	bcf	3,7	;select IRP bank0
  1644  01C7  0080               	movwf	0
  1645                           
  1646                           ;main.c: 168: cont++;
  1647  01C8  3001               	movlw	1
  1648  01C9  07B9               	addwf	digitarNome@cont,f
  1649  01CA  1803               	skipnc
  1650  01CB  0ABA               	incf	digitarNome@cont+1,f
  1651  01CC  3000               	movlw	0
  1652  01CD  07BA               	addwf	digitarNome@cont+1,f
  1653                           
  1654                           ;main.c: 169: lcd_dat(entrada);
  1655  01CE  084B               	movf	_entrada,w
  1656  01CF  261C               	fcall	_lcd_dat
  1657  01D0                     l2397:	
  1658  01D0  3023               	movlw	35
  1659  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  1660  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  1661  01D3  064B               	xorwf	_entrada,w
  1662  01D4  1903               	btfsc	3,2
  1663  01D5  29E1               	goto	l2401
  1664  01D6  083A               	movf	digitarNome@cont+1,w
  1665  01D7  3A80               	xorlw	128
  1666  01D8  00FF               	movwf	127
  1667  01D9  3080               	movlw	128
  1668  01DA  027F               	subwf	127,w
  1669  01DB  1D03               	skipz
  1670  01DC  29DF               	goto	u1855
  1671  01DD  3009               	movlw	9
  1672  01DE  0239               	subwf	digitarNome@cont,w
  1673  01DF                     u1855:	
  1674  01DF  1C03               	skipc
  1675  01E0  2994               	goto	l2377
  1676  01E1                     l2401:	
  1677                           
  1678                           ;main.c: 170: }
  1679                           ;main.c: 171: if (cont < 9) {
  1680  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1681  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1682  01E3  083A               	movf	digitarNome@cont+1,w
  1683  01E4  3A80               	xorlw	128
  1684  01E5  00FF               	movwf	127
  1685  01E6  3080               	movlw	128
  1686  01E7  027F               	subwf	127,w
  1687  01E8  1D03               	skipz
  1688  01E9  29EC               	goto	u1865
  1689  01EA  3009               	movlw	9
  1690  01EB  0239               	subwf	digitarNome@cont,w
  1691  01EC                     u1865:	
  1692  01EC  1803               	skipnc
  1693  01ED  2A16               	goto	l2413
  1694                           
  1695                           ;main.c: 172: for (; cont < 9; cont++) {
  1696  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1697  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1698  01F0  083A               	movf	digitarNome@cont+1,w
  1699  01F1  3A80               	xorlw	128
  1700  01F2  00FF               	movwf	127
  1701  01F3  3080               	movlw	128
  1702  01F4  027F               	subwf	127,w
  1703  01F5  1D03               	skipz
  1704  01F6  29F9               	goto	u1875
  1705  01F7  3009               	movlw	9
  1706  01F8  0239               	subwf	digitarNome@cont,w
  1707  01F9                     u1875:	
  1708  01F9  1803               	btfsc	3,0
  1709  01FA  2A16               	goto	l2413
  1710  01FB                     l2407:	
  1711                           
  1712                           ;main.c: 173: nome[cont] = ' ';
  1713  01FB  3020               	movlw	32
  1714  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1715  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1716  01FE  00B8               	movwf	??_digitarNome
  1717  01FF  0839               	movf	digitarNome@cont,w
  1718  0200  3E4C               	addlw	(low (_nome| 0))& (0+255)
  1719  0201  0084               	movwf	4
  1720  0202  0838               	movf	??_digitarNome,w
  1721  0203  1383               	bcf	3,7	;select IRP bank0
  1722  0204  0080               	movwf	0
  1723  0205  3001               	movlw	1
  1724  0206  07B9               	addwf	digitarNome@cont,f
  1725  0207  1803               	skipnc
  1726  0208  0ABA               	incf	digitarNome@cont+1,f
  1727  0209  3000               	movlw	0
  1728  020A  07BA               	addwf	digitarNome@cont+1,f
  1729  020B  083A               	movf	digitarNome@cont+1,w
  1730  020C  3A80               	xorlw	128
  1731  020D  00FF               	movwf	127
  1732  020E  3080               	movlw	128
  1733  020F  027F               	subwf	127,w
  1734  0210  1D03               	skipz
  1735  0211  2A14               	goto	u1885
  1736  0212  3009               	movlw	9
  1737  0213  0239               	subwf	digitarNome@cont,w
  1738  0214                     u1885:	
  1739  0214  1C03               	skipc
  1740  0215  29FB               	goto	l2407
  1741  0216                     l2413:	
  1742                           
  1743                           ;main.c: 174: }
  1744                           ;main.c: 175: }
  1745                           ;main.c: 176: nome[9] = '\0';
  1746  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0218  01D5               	clrf	_nome+9
  1749                           
  1750                           ;main.c: 177: estado = 2;
  1751  0219  3002               	movlw	2
  1752  021A  00C8               	movwf	_estado
  1753  021B  3000               	movlw	0
  1754  021C  00C9               	movwf	_estado+1
  1755  021D  0008               	return
  1756  021E                     __end_of_digitarNome:	
  1757                           
  1758                           	psect	text6
  1759  00CA                     __ptext6:	
  1760 ;; *************** function _tc_letra *****************
  1761 ;; Defined at:
  1762 ;;		line 55 in file "teclado.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  timeout         2   12[BANK0 ] unsigned int 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  i               2   17[BANK0 ] int 
  1767 ;;  i               2   15[BANK0 ] int 
  1768 ;;  cont            2   22[BANK0 ] int 
  1769 ;;  num             1   21[BANK0 ] unsigned char 
  1770 ;;  ret             1   20[BANK0 ] unsigned char 
  1771 ;;  num2            1   19[BANK0 ] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      unsigned char 
  1774 ;; Registers used:
  1775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1781 ;;      Params:         0       2       0       0
  1782 ;;      Locals:         0       9       0       0
  1783 ;;      Temps:          0       1       0       0
  1784 ;;      Totals:         0      12       0       0
  1785 ;;Total ram usage:       12 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    3
  1788 ;; This function calls:
  1789 ;;		_tc_tecla
  1790 ;; This function is called by:
  1791 ;;		_digitarNome
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           
  1796                           ;psect for function _tc_letra
  1797  00CA                     _tc_letra:	
  1798                           
  1799                           ;teclado.c: 56: unsigned char num = tc_tecla(0);
  1800                           
  1801                           ;incstack = 0
  1802                           ; Regs used in _tc_letra: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1803  00CA  3000               	movlw	0
  1804  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1805  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1806  00CD  00A3               	movwf	tc_tecla@timeout
  1807  00CE  00A4               	movwf	tc_tecla@timeout+1
  1808  00CF  221E               	fcall	_tc_tecla
  1809  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1810  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  1811  00D2  00AE               	movwf	??_tc_letra
  1812  00D3  082E               	movf	??_tc_letra,w
  1813  00D4  00B5               	movwf	tc_letra@num
  1814                           
  1815                           ;teclado.c: 57: unsigned char num2;
  1816                           ;teclado.c: 58: unsigned char ret;
  1817                           ;teclado.c: 59: int cont = 0;
  1818  00D5  01B6               	clrf	tc_letra@cont
  1819  00D6  01B7               	clrf	tc_letra@cont+1
  1820                           
  1821                           ;teclado.c: 60: switch (num) {
  1822  00D7  2932               	goto	l2239
  1823  00D8                     l2205:	
  1824                           ;teclado.c: 65: case '2':
  1825                           
  1826                           ;teclado.c: 64: break;
  1827                           
  1828                           ;teclado.c: 63: case '1':
  1829                           
  1830                           ;teclado.c: 62: return;
  1831                           
  1832                           ;teclado.c: 61: case '0':
  1833                           
  1834                           
  1835                           ;teclado.c: 66: case '3':
  1836                           ;teclado.c: 67: case '4':
  1837                           ;teclado.c: 68: case '5':
  1838                           ;teclado.c: 69: case '6':
  1839                           ;teclado.c: 70: case '8':
  1840                           ;teclado.c: 71: for (int i = 1; i < 3; i++){
  1841  00D8  3001               	movlw	1
  1842  00D9  00AF               	movwf	tc_letra@i
  1843  00DA  3000               	movlw	0
  1844  00DB  00B0               	movwf	tc_letra@i+1
  1845  00DC                     L10:	
  1846  00DC  0830               	movf	tc_letra@i+1,w
  1847  00DD  3A80               	xorlw	128
  1848  00DE  00FF               	movwf	127
  1849  00DF  3080               	movlw	128
  1850  00E0  027F               	subwf	127,w
  1851  00E1  1D03               	skipz
  1852  00E2  28E5               	goto	u1665
  1853  00E3  3003               	movlw	3
  1854  00E4  022F               	subwf	tc_letra@i,w
  1855  00E5                     u1665:	
  1856  00E5  1803               	btfsc	3,0
  1857  00E6  2962               	goto	l2263
  1858                           
  1859                           ;teclado.c: 72: num2 = tc_tecla(200);
  1860  00E7  30C8               	movlw	200
  1861  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1862  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1863  00EA  00A3               	movwf	tc_tecla@timeout
  1864  00EB  3000               	movlw	0
  1865  00EC  00A4               	movwf	tc_tecla@timeout+1
  1866  00ED  221E               	fcall	_tc_tecla
  1867  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  1868  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  1869  00F0  00AE               	movwf	??_tc_letra
  1870  00F1  082E               	movf	??_tc_letra,w
  1871  00F2  00B3               	movwf	tc_letra@num2
  1872                           
  1873                           ;teclado.c: 73: if(num == num2){
  1874  00F3  0835               	movf	tc_letra@num,w
  1875  00F4  0633               	xorwf	tc_letra@num2,w
  1876  00F5  1D03               	skipz
  1877  00F6  2962               	goto	l2263
  1878                           
  1879                           ;teclado.c: 74: cont++;
  1880  00F7  3001               	movlw	1
  1881  00F8  07B6               	addwf	tc_letra@cont,f
  1882  00F9  1803               	skipnc
  1883  00FA  0AB7               	incf	tc_letra@cont+1,f
  1884  00FB  3000               	movlw	0
  1885  00FC  07B7               	addwf	tc_letra@cont+1,f
  1886                           
  1887                           ;teclado.c: 75: } else break;
  1888  00FD  3001               	movlw	1
  1889  00FE  07AF               	addwf	tc_letra@i,f
  1890  00FF  1803               	skipnc
  1891  0100  0AB0               	incf	tc_letra@i+1,f
  1892  0101  3000               	movlw	0
  1893  0102  07B0               	addwf	tc_letra@i+1,f
  1894  0103  28DC               	goto	L10
  1895  0104                     l2221:	
  1896                           ;teclado.c: 78: case '7':
  1897                           
  1898                           ;teclado.c: 76: }
  1899                           ;teclado.c: 77: break;
  1900                           
  1901                           
  1902                           ;teclado.c: 79: case '9':
  1903                           ;teclado.c: 80: for (int i = 1; i < 4; i++){
  1904  0104  3001               	movlw	1
  1905  0105  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0106  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0107  00B1               	movwf	tc_letra@i_200
  1908  0108  3000               	movlw	0
  1909  0109  00B2               	movwf	tc_letra@i_200+1
  1910  010A                     L11:	
  1911  010A  0832               	movf	tc_letra@i_200+1,w
  1912  010B  3A80               	xorlw	128
  1913  010C  00FF               	movwf	127
  1914  010D  3080               	movlw	128
  1915  010E  027F               	subwf	127,w
  1916  010F  1D03               	skipz
  1917  0110  2913               	goto	u1695
  1918  0111  3004               	movlw	4
  1919  0112  0231               	subwf	tc_letra@i_200,w
  1920  0113                     u1695:	
  1921  0113  1803               	btfsc	3,0
  1922  0114  2962               	goto	l2263
  1923                           
  1924                           ;teclado.c: 81: num2 = tc_tecla(200);
  1925  0115  30C8               	movlw	200
  1926  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0118  00A3               	movwf	tc_tecla@timeout
  1929  0119  3000               	movlw	0
  1930  011A  00A4               	movwf	tc_tecla@timeout+1
  1931  011B  221E               	fcall	_tc_tecla
  1932  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1933  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1934  011E  00AE               	movwf	??_tc_letra
  1935  011F  082E               	movf	??_tc_letra,w
  1936  0120  00B3               	movwf	tc_letra@num2
  1937                           
  1938                           ;teclado.c: 82: if(num == num2){
  1939  0121  0835               	movf	tc_letra@num,w
  1940  0122  0633               	xorwf	tc_letra@num2,w
  1941  0123  1D03               	skipz
  1942  0124  2962               	goto	l2263
  1943                           
  1944                           ;teclado.c: 83: cont++;
  1945  0125  3001               	movlw	1
  1946  0126  07B6               	addwf	tc_letra@cont,f
  1947  0127  1803               	skipnc
  1948  0128  0AB7               	incf	tc_letra@cont+1,f
  1949  0129  3000               	movlw	0
  1950  012A  07B7               	addwf	tc_letra@cont+1,f
  1951                           
  1952                           ;teclado.c: 84: } else break;
  1953  012B  3001               	movlw	1
  1954  012C  07B1               	addwf	tc_letra@i_200,f
  1955  012D  1803               	skipnc
  1956  012E  0AB2               	incf	tc_letra@i_200+1,f
  1957  012F  3000               	movlw	0
  1958  0130  07B2               	addwf	tc_letra@i_200+1,f
  1959  0131  290A               	goto	L11
  1960  0132                     l2239:	
  1961                           ;teclado.c: 93: }
  1962                           
  1963                           ;teclado.c: 92: break;
  1964                           
  1965                           ;teclado.c: 91: default:
  1966                           
  1967                           ;teclado.c: 90: break;
  1968                           
  1969                           ;teclado.c: 89: case '#':
  1970                           
  1971                           ;teclado.c: 88: break;
  1972                           
  1973                           ;teclado.c: 87: case '*':
  1974                           
  1975                           ;teclado.c: 85: }
  1976                           ;teclado.c: 86: break;
  1977                           
  1978  0132  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0133  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0134  0835               	movf	tc_letra@num,w
  1981                           
  1982                           ; Switch size 1, requested type "space"
  1983                           ; Number of cases is 12, Range of values is 35 to 57
  1984                           ; switch strategies available:
  1985                           ; Name         Instructions Cycles
  1986                           ; direct_byte           32     9 (fixed)
  1987                           ; simple_byte           37    19 (average)
  1988                           ; jumptable            263     9 (fixed)
  1989                           ;	Chosen strategy is direct_byte
  1990  0135  3EDD               	addlw	-35
  1991  0136  1C03               	skipc
  1992  0137  2962               	goto	l2263
  1993  0138  0084               	movwf	4
  1994  0139  3017               	movlw	23
  1995  013A  0204               	subwf	4,w
  1996  013B  1803               	skipnc
  1997  013C  2962               	goto	l2263
  1998  013D  3006               	movlw	high S2613
  1999  013E  008A               	movwf	10
  2000  013F  3050               	movlw	low S2613
  2001  0140  0704               	addwf	4,w
  2002  0141  0082               	movwf	2
  2003                           
  2004                           ;teclado.c: 94: switch (num) {
  2005  0142  2962               	goto	l2263
  2006  0143                     l2241:	
  2007                           ;teclado.c: 95: case '1':
  2008                           
  2009                           
  2010                           ;teclado.c: 96: ret = 0x20;
  2011  0143  3020               	movlw	32
  2012  0144  295E               	goto	L9
  2013  0145                     l2243:	
  2014                           ;teclado.c: 98: case '2':
  2015                           
  2016                           ;teclado.c: 97: break;
  2017                           
  2018                           
  2019                           ;teclado.c: 99: ret = 0x41 + cont;
  2020  0145  0836               	movf	tc_letra@cont,w
  2021  0146  3E41               	addlw	65
  2022  0147  295E               	goto	L9
  2023  0148                     l2245:	
  2024                           ;teclado.c: 101: case '3':
  2025                           
  2026                           ;teclado.c: 100: break;
  2027                           
  2028                           
  2029                           ;teclado.c: 102: ret = 0x44 + cont;
  2030  0148  0836               	movf	tc_letra@cont,w
  2031  0149  3E44               	addlw	68
  2032  014A  295E               	goto	L9
  2033  014B                     l2247:	
  2034                           ;teclado.c: 104: case '4':
  2035                           
  2036                           ;teclado.c: 103: break;
  2037                           
  2038                           
  2039                           ;teclado.c: 105: ret = 0x47 + cont;
  2040  014B  0836               	movf	tc_letra@cont,w
  2041  014C  3E47               	addlw	71
  2042  014D  295E               	goto	L9
  2043  014E                     l2249:	
  2044                           ;teclado.c: 107: case '5':
  2045                           
  2046                           ;teclado.c: 106: break;
  2047                           
  2048                           
  2049                           ;teclado.c: 108: ret = 0x4A + cont;
  2050  014E  0836               	movf	tc_letra@cont,w
  2051  014F  3E4A               	addlw	74
  2052  0150  295E               	goto	L9
  2053  0151                     l2251:	
  2054                           ;teclado.c: 110: case '6':
  2055                           
  2056                           ;teclado.c: 109: break;
  2057                           
  2058                           
  2059                           ;teclado.c: 111: ret = 0x4D + cont;
  2060  0151  0836               	movf	tc_letra@cont,w
  2061  0152  3E4D               	addlw	77
  2062  0153  295E               	goto	L9
  2063  0154                     l2253:	
  2064                           ;teclado.c: 113: case '7':
  2065                           
  2066                           ;teclado.c: 112: break;
  2067                           
  2068                           
  2069                           ;teclado.c: 114: ret = 0x50 + cont;
  2070  0154  0836               	movf	tc_letra@cont,w
  2071  0155  3E50               	addlw	80
  2072  0156  295E               	goto	L9
  2073  0157                     l2255:	
  2074                           ;teclado.c: 116: case '8':
  2075                           
  2076                           ;teclado.c: 115: break;
  2077                           
  2078                           
  2079                           ;teclado.c: 117: ret = 0x54 + cont;
  2080  0157  0836               	movf	tc_letra@cont,w
  2081  0158  3E54               	addlw	84
  2082  0159  295E               	goto	L9
  2083  015A                     l2257:	
  2084                           ;teclado.c: 119: case '9':
  2085                           
  2086                           ;teclado.c: 118: break;
  2087                           
  2088                           
  2089                           ;teclado.c: 120: ret = 0x57 + cont;
  2090  015A  0836               	movf	tc_letra@cont,w
  2091  015B  3E57               	addlw	87
  2092  015C  295E               	goto	L9
  2093  015D                     l2259:	
  2094                           ;teclado.c: 122: case '*':
  2095                           
  2096                           ;teclado.c: 121: break;
  2097                           
  2098                           
  2099                           ;teclado.c: 123: case '#':
  2100                           ;teclado.c: 124: ret = num;
  2101  015D  0835               	movf	tc_letra@num,w
  2102  015E                     L9:	
  2103  015E  00AE               	movwf	??_tc_letra
  2104  015F  082E               	movf	??_tc_letra,w
  2105  0160  00B4               	movwf	tc_letra@ret
  2106                           
  2107                           ;teclado.c: 128: }
  2108                           
  2109                           ;teclado.c: 127: break;
  2110                           
  2111                           ;teclado.c: 126: default:
  2112                           
  2113                           ;teclado.c: 125: break;
  2114  0161  2972               	goto	l2265
  2115  0162                     l2263:	
  2116  0162  1283               	bcf	3,5	;RP0=0, select bank0
  2117  0163  1303               	bcf	3,6	;RP1=0, select bank0
  2118  0164  0835               	movf	tc_letra@num,w
  2119                           
  2120                           ; Switch size 1, requested type "space"
  2121                           ; Number of cases is 11, Range of values is 35 to 57
  2122                           ; switch strategies available:
  2123                           ; Name         Instructions Cycles
  2124                           ; direct_byte           32     9 (fixed)
  2125                           ; simple_byte           34    18 (average)
  2126                           ; jumptable            263     9 (fixed)
  2127                           ;	Chosen strategy is direct_byte
  2128  0165  3EDD               	addlw	-35
  2129  0166  1C03               	skipc
  2130  0167  2972               	goto	l2265
  2131  0168  0084               	movwf	4
  2132  0169  3017               	movlw	23
  2133  016A  0204               	subwf	4,w
  2134  016B  1803               	skipnc
  2135  016C  2972               	goto	l2265
  2136  016D  3006               	movlw	high S2615
  2137  016E  008A               	movwf	10
  2138  016F  3067               	movlw	low S2615
  2139  0170  0704               	addwf	4,w
  2140  0171  0082               	movwf	2
  2141  0172                     l2265:	
  2142                           
  2143                           ;teclado.c: 129: return ret;
  2144  0172  0834               	movf	tc_letra@ret,w
  2145  0173  0008               	return
  2146  0174                     l261:	
  2147  0174  0008               	return
  2148  0175                     __end_of_tc_letra:	
  2149                           
  2150                           	psect	swtext2
  2151  0650                     __pswtext2:	
  2152  0650                     S2613:	
  2153  0650  2962               	ljmp	l2263
  2154  0651  2962               	ljmp	l2263
  2155  0652  2962               	ljmp	l2263
  2156  0653  2962               	ljmp	l2263
  2157  0654  2962               	ljmp	l2263
  2158  0655  2962               	ljmp	l2263
  2159  0656  2962               	ljmp	l2263
  2160  0657  2962               	ljmp	l2263
  2161  0658  2962               	ljmp	l2263
  2162  0659  2962               	ljmp	l2263
  2163  065A  2962               	ljmp	l2263
  2164  065B  2962               	ljmp	l2263
  2165  065C  2962               	ljmp	l2263
  2166  065D  2974               	ljmp	l261
  2167  065E  2962               	ljmp	l2263
  2168  065F  28D8               	ljmp	l2205
  2169  0660  28D8               	ljmp	l2205
  2170  0661  28D8               	ljmp	l2205
  2171  0662  28D8               	ljmp	l2205
  2172  0663  28D8               	ljmp	l2205
  2173  0664  2904               	ljmp	l2221
  2174  0665  28D8               	ljmp	l2205
  2175  0666  2904               	ljmp	l2221
  2176                           
  2177                           	psect	swtext3
  2178  0667                     __pswtext3:	
  2179  0667                     S2615:	
  2180  0667  295D               	ljmp	l2259
  2181  0668  2972               	ljmp	l2265
  2182  0669  2972               	ljmp	l2265
  2183  066A  2972               	ljmp	l2265
  2184  066B  2972               	ljmp	l2265
  2185  066C  2972               	ljmp	l2265
  2186  066D  2972               	ljmp	l2265
  2187  066E  295D               	ljmp	l2259
  2188  066F  2972               	ljmp	l2265
  2189  0670  2972               	ljmp	l2265
  2190  0671  2972               	ljmp	l2265
  2191  0672  2972               	ljmp	l2265
  2192  0673  2972               	ljmp	l2265
  2193  0674  2972               	ljmp	l2265
  2194  0675  2943               	ljmp	l2241
  2195  0676  2945               	ljmp	l2243
  2196  0677  2948               	ljmp	l2245
  2197  0678  294B               	ljmp	l2247
  2198  0679  294E               	ljmp	l2249
  2199  067A  2951               	ljmp	l2251
  2200  067B  2954               	ljmp	l2253
  2201  067C  2957               	ljmp	l2255
  2202  067D  295A               	ljmp	l2257
  2203                           
  2204                           	psect	text7
  2205  05DF                     __ptext7:	
  2206 ;; *************** function _desligar *****************
  2207 ;; Defined at:
  2208 ;;		line 288 in file "main.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;		None
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;		None
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      void 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2222 ;;      Params:         0       0       0       0
  2223 ;;      Locals:         0       0       0       0
  2224 ;;      Temps:          0       3       0       0
  2225 ;;      Totals:         0       3       0       0
  2226 ;;Total ram usage:        3 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    4
  2229 ;; This function calls:
  2230 ;;		_lcd_cmd
  2231 ;;		_lcd_str
  2232 ;; This function is called by:
  2233 ;;		_maquina
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           
  2238                           ;psect for function _desligar
  2239  05DF                     _desligar:	
  2240                           
  2241                           ;main.c: 289: lcd_cmd(0x01);
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _desligar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2245  05DF  3001               	movlw	1
  2246  05E0  2636               	fcall	_lcd_cmd
  2247                           
  2248                           ;main.c: 290: lcd_cmd(0x80);
  2249  05E1  3080               	movlw	128
  2250  05E2  2636               	fcall	_lcd_cmd
  2251                           
  2252                           ;main.c: 291: lcd_str("Desligando...");
  2253  05E3  3014               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2254  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  2255  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  2256  05E6  00A3               	movwf	lcd_str@str
  2257  05E7  3080               	movlw	128
  2258  05E8  00A4               	movwf	lcd_str@str+1
  2259  05E9  25FE               	fcall	_lcd_str
  2260                           
  2261                           ;main.c: 293: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2262  05EA  3006               	movlw	6
  2263  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  2264  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  2265  05ED  00A9               	movwf	??_desligar+2
  2266  05EE  3013               	movlw	19
  2267  05EF  00A8               	movwf	??_desligar+1
  2268  05F0  30AD               	movlw	173
  2269  05F1  00A7               	movwf	??_desligar
  2270  05F2                     u1947:	
  2271  05F2  0BA7               	decfsz	??_desligar,f
  2272  05F3  2DF2               	goto	u1947
  2273  05F4  0BA8               	decfsz	??_desligar+1,f
  2274  05F5  2DF2               	goto	u1947
  2275  05F6  0BA9               	decfsz	??_desligar+2,f
  2276  05F7  2DF2               	goto	u1947
  2277  05F8  0000               	nop
  2278                           
  2279                           ;main.c: 294: estado = 0;
  2280  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  2281  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  2282  05FB  01C8               	clrf	_estado
  2283  05FC  01C9               	clrf	_estado+1
  2284  05FD  0008               	return
  2285  05FE                     __end_of_desligar:	
  2286                           
  2287                           	psect	text8
  2288  0599                     __ptext8:	
  2289 ;; *************** function _chamar *****************
  2290 ;; Defined at:
  2291 ;;		line 276 in file "main.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;		None
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2305 ;;      Params:         0       0       0       0
  2306 ;;      Locals:         0       0       0       0
  2307 ;;      Temps:          0       0       0       0
  2308 ;;      Totals:         0       0       0       0
  2309 ;;Total ram usage:        0 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    4
  2312 ;; This function calls:
  2313 ;;		_lcd_cmd
  2314 ;;		_lcd_str
  2315 ;;		_tc_tecla
  2316 ;; This function is called by:
  2317 ;;		_maquina
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           
  2322                           ;psect for function _chamar
  2323  0599                     _chamar:	
  2324                           
  2325                           ;main.c: 277: lcd_cmd(0x01);
  2326                           
  2327                           ;incstack = 0
  2328                           ; Regs used in _chamar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2329  0599  3001               	movlw	1
  2330  059A  2636               	fcall	_lcd_cmd
  2331                           
  2332                           ;main.c: 278: lcd_cmd(0x80);
  2333  059B  3080               	movlw	128
  2334  059C  2636               	fcall	_lcd_cmd
  2335                           
  2336                           ;main.c: 279: lcd_str("Chamando...");
  2337  059D  3030               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2338  059E  1283               	bcf	3,5	;RP0=0, select bank0
  2339  059F  1303               	bcf	3,6	;RP1=0, select bank0
  2340  05A0  00A3               	movwf	lcd_str@str
  2341  05A1  3080               	movlw	128
  2342  05A2  00A4               	movwf	lcd_str@str+1
  2343  05A3  25FE               	fcall	_lcd_str
  2344                           
  2345                           ;main.c: 280: lcd_cmd(0xC0);
  2346  05A4  30C0               	movlw	192
  2347  05A5  2636               	fcall	_lcd_cmd
  2348                           
  2349                           ;main.c: 281: lcd_str(nome);
  2350  05A6  304C               	movlw	(low (_nome| 0))& (0+255)
  2351  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  2352  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  2353  05A9  00A3               	movwf	lcd_str@str
  2354  05AA  3000               	movlw	0
  2355  05AB  00A4               	movwf	lcd_str@str+1
  2356  05AC  25FE               	fcall	_lcd_str
  2357  05AD                     l2423:	
  2358                           ;main.c: 283: while (tc_tecla(0) != '#');
  2359                           
  2360  05AD  3000               	movlw	0
  2361  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  2362  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  2363  05B0  00A3               	movwf	tc_tecla@timeout
  2364  05B1  00A4               	movwf	tc_tecla@timeout+1
  2365  05B2  221E               	fcall	_tc_tecla
  2366  05B3  3A23               	xorlw	35
  2367  05B4  1D03               	skipz
  2368  05B5  2DAD               	goto	l2423
  2369                           
  2370                           ;main.c: 285: estado = 6;
  2371  05B6  3006               	movlw	6
  2372  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2373  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2374  05B9  00C8               	movwf	_estado
  2375  05BA  3000               	movlw	0
  2376  05BB  00C9               	movwf	_estado+1
  2377  05BC  0008               	return
  2378  05BD                     __end_of_chamar:	
  2379                           
  2380                           	psect	text9
  2381  02C6                     __ptext9:	
  2382 ;; *************** function _buscar *****************
  2383 ;; Defined at:
  2384 ;;		line 217 in file "main.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  i               2    2[BANK0 ] int 
  2389 ;;  num             2    0[BANK0 ] int 
  2390 ;;  i               2    5[BANK0 ] int 
  2391 ;;  end             1    4[BANK0 ] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2401 ;;      Params:         0       0       0       0
  2402 ;;      Locals:         0       7       0       0
  2403 ;;      Temps:          2       0       0       0
  2404 ;;      Totals:         2       7       0       0
  2405 ;;Total ram usage:        9 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    2
  2408 ;; This function calls:
  2409 ;;		_eeprom_read
  2410 ;; This function is called by:
  2411 ;;		_maquina
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           
  2416                           ;psect for function _buscar
  2417  02C6                     _buscar:	
  2418                           
  2419                           ;main.c: 218: unsigned char end = 0x1;
  2420                           
  2421                           ;incstack = 0
  2422                           ; Regs used in _buscar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2423  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2424  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  2425  02C8  01A4               	clrf	buscar@end
  2426  02C9  0AA4               	incf	buscar@end,f
  2427  02CA                     l1865:	
  2428                           ;main.c: 219: static bit achou = 0b0;
  2429                           ;main.c: 220: while (end < endereco) {
  2430                           
  2431  02CA  084A               	movf	_endereco,w
  2432  02CB  0224               	subwf	buscar@end,w
  2433  02CC  1803               	btfsc	3,0
  2434  02CD  2B48               	goto	l154
  2435                           
  2436                           ;main.c: 221: achou = 0b1;
  2437  02CE  1478               	bsf	buscar@achou/(0+8),buscar@achou& (0+7)
  2438                           
  2439                           ;main.c: 222: for (int i = 0; i < 9 && numero[i] != '\0'; i++) {
  2440  02CF  01A5               	clrf	buscar@i
  2441  02D0  01A6               	clrf	buscar@i+1
  2442  02D1  2AF4               	goto	l1837
  2443  02D2                     l1829:	
  2444                           
  2445                           ;main.c: 223: int num = eeprom_read(end + i);
  2446  02D2  0825               	movf	buscar@i,w
  2447  02D3  0724               	addwf	buscar@end,w
  2448  02D4  267E               	fcall	_eeprom_read
  2449  02D5  00F6               	movwf	??_buscar
  2450  02D6  01F7               	clrf	??_buscar+1
  2451  02D7  0876               	movf	??_buscar,w
  2452  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2453  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  2454  02DA  00A0               	movwf	buscar@num
  2455  02DB  0877               	movf	??_buscar+1,w
  2456  02DC  00A1               	movwf	buscar@num+1
  2457                           
  2458                           ;main.c: 224: if (num != numero[i]) {
  2459  02DD  0825               	movf	buscar@i,w
  2460  02DE  3E3E               	addlw	(low (_numero| 0))& (0+255)
  2461  02DF  0084               	movwf	4
  2462  02E0  1383               	bcf	3,7	;select IRP bank0
  2463  02E1  0800               	movf	0,w
  2464  02E2  00F6               	movwf	??_buscar
  2465  02E3  01F7               	clrf	??_buscar+1
  2466  02E4  0821               	movf	buscar@num+1,w
  2467  02E5  0677               	xorwf	??_buscar+1,w
  2468  02E6  1D03               	skipz
  2469  02E7  2AEA               	goto	u1265
  2470  02E8  0820               	movf	buscar@num,w
  2471  02E9  0676               	xorwf	??_buscar,w
  2472  02EA                     u1265:	
  2473  02EA  1903               	skipnz
  2474  02EB  2AEE               	goto	l1835
  2475                           
  2476                           ;main.c: 225: achou = 0b0;
  2477  02EC  1078               	bcf	buscar@achou/(0+8),buscar@achou& (0+7)
  2478                           
  2479                           ;main.c: 226: break;
  2480  02ED  2B08               	goto	l1841
  2481  02EE                     l1835:	
  2482  02EE  3001               	movlw	1
  2483  02EF  07A5               	addwf	buscar@i,f
  2484  02F0  1803               	skipnc
  2485  02F1  0AA6               	incf	buscar@i+1,f
  2486  02F2  3000               	movlw	0
  2487  02F3  07A6               	addwf	buscar@i+1,f
  2488  02F4                     l1837:	
  2489  02F4  0826               	movf	buscar@i+1,w
  2490  02F5  3A80               	xorlw	128
  2491  02F6  00FF               	movwf	127
  2492  02F7  3080               	movlw	128
  2493  02F8  027F               	subwf	127,w
  2494  02F9  1D03               	skipz
  2495  02FA  2AFD               	goto	u1275
  2496  02FB  3009               	movlw	9
  2497  02FC  0225               	subwf	buscar@i,w
  2498  02FD                     u1275:	
  2499  02FD  1803               	skipnc
  2500  02FE  2B08               	goto	l1841
  2501  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  2502  0300  1303               	bcf	3,6	;RP1=0, select bank0
  2503  0301  0825               	movf	buscar@i,w
  2504  0302  3E3E               	addlw	(low (_numero| 0))& (0+255)
  2505  0303  0084               	movwf	4
  2506  0304  1383               	bcf	3,7	;select IRP bank0
  2507  0305  0800               	movf	0,w
  2508  0306  1D03               	btfss	3,2
  2509  0307  2AD2               	goto	l1829
  2510  0308                     l1841:	
  2511                           
  2512                           ;main.c: 227: }
  2513                           ;main.c: 228: }
  2514                           ;main.c: 229: end += 10;
  2515  0308  300A               	movlw	10
  2516  0309  00F6               	movwf	??_buscar
  2517  030A  0876               	movf	??_buscar,w
  2518  030B  1283               	bcf	3,5	;RP0=0, select bank0
  2519  030C  1303               	bcf	3,6	;RP1=0, select bank0
  2520  030D  07A4               	addwf	buscar@end,f
  2521                           
  2522                           ;main.c: 230: if (achou) {
  2523  030E  1C78               	btfss	buscar@achou/(0+8),buscar@achou& (0+7)
  2524  030F  2B43               	goto	l1863
  2525                           
  2526                           ;main.c: 231: for (int i = 0; i < 9; i++) {
  2527  0310  01A2               	clrf	buscar@i_147
  2528  0311  01A3               	clrf	buscar@i_147+1
  2529  0312  0823               	movf	buscar@i_147+1,w
  2530  0313  3A80               	xorlw	128
  2531  0314  00FF               	movwf	127
  2532  0315  3080               	movlw	128
  2533  0316  027F               	subwf	127,w
  2534  0317  1D03               	skipz
  2535  0318  2B1B               	goto	u1305
  2536  0319  3009               	movlw	9
  2537  031A  0222               	subwf	buscar@i_147,w
  2538  031B                     u1305:	
  2539  031B  1803               	btfsc	3,0
  2540  031C  2B3F               	goto	l1859
  2541  031D                     l1851:	
  2542                           
  2543                           ;main.c: 232: nome[i] = eeprom_read(end);
  2544  031D  1283               	bcf	3,5	;RP0=0, select bank0
  2545  031E  1303               	bcf	3,6	;RP1=0, select bank0
  2546  031F  0824               	movf	buscar@end,w
  2547  0320  267E               	fcall	_eeprom_read
  2548  0321  00F6               	movwf	??_buscar
  2549  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0324  0822               	movf	buscar@i_147,w
  2552  0325  3E4C               	addlw	(low (_nome| 0))& (0+255)
  2553  0326  0084               	movwf	4
  2554  0327  0876               	movf	??_buscar,w
  2555  0328  1383               	bcf	3,7	;select IRP bank0
  2556  0329  0080               	movwf	0
  2557                           
  2558                           ;main.c: 233: end++;
  2559  032A  3001               	movlw	1
  2560  032B  00F6               	movwf	??_buscar
  2561  032C  0876               	movf	??_buscar,w
  2562  032D  07A4               	addwf	buscar@end,f
  2563  032E  3001               	movlw	1
  2564  032F  07A2               	addwf	buscar@i_147,f
  2565  0330  1803               	skipnc
  2566  0331  0AA3               	incf	buscar@i_147+1,f
  2567  0332  3000               	movlw	0
  2568  0333  07A3               	addwf	buscar@i_147+1,f
  2569  0334  0823               	movf	buscar@i_147+1,w
  2570  0335  3A80               	xorlw	128
  2571  0336  00FF               	movwf	127
  2572  0337  3080               	movlw	128
  2573  0338  027F               	subwf	127,w
  2574  0339  1D03               	skipz
  2575  033A  2B3D               	goto	u1315
  2576  033B  3009               	movlw	9
  2577  033C  0222               	subwf	buscar@i_147,w
  2578  033D                     u1315:	
  2579  033D  1C03               	skipc
  2580  033E  2B1D               	goto	l1851
  2581  033F                     l1859:	
  2582                           
  2583                           ;main.c: 234: }
  2584                           ;main.c: 235: nome[9] = '\0';
  2585  033F  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0340  1303               	bcf	3,6	;RP1=0, select bank0
  2587  0341  01D5               	clrf	_nome+9
  2588                           
  2589                           ;main.c: 236: break;
  2590  0342  2B48               	goto	l154
  2591  0343                     l1863:	
  2592                           ;main.c: 237: } else end += 10;
  2593                           
  2594  0343  300A               	movlw	10
  2595  0344  00F6               	movwf	??_buscar
  2596  0345  0876               	movf	??_buscar,w
  2597  0346  07A4               	addwf	buscar@end,f
  2598  0347  2ACA               	goto	l1865
  2599  0348                     l154:	
  2600                           
  2601                           ;main.c: 238: }
  2602                           ;main.c: 239: if (!achou) {
  2603  0348  1878               	btfsc	buscar@achou/(0+8),buscar@achou& (0+7)
  2604  0349  2B67               	goto	l1871
  2605                           
  2606                           ;main.c: 240: nome[0] = 'u';
  2607  034A  3075               	movlw	117
  2608  034B  00F6               	movwf	??_buscar
  2609  034C  0876               	movf	??_buscar,w
  2610  034D  00CC               	movwf	_nome
  2611                           
  2612                           ;main.c: 241: nome[1] = 'n';
  2613  034E  306E               	movlw	110
  2614  034F  00F6               	movwf	??_buscar
  2615  0350  0876               	movf	??_buscar,w
  2616  0351  00CD               	movwf	_nome+1
  2617                           
  2618                           ;main.c: 242: nome[2] = 'k';
  2619  0352  306B               	movlw	107
  2620  0353  00F6               	movwf	??_buscar
  2621  0354  0876               	movf	??_buscar,w
  2622  0355  00CE               	movwf	_nome+2
  2623                           
  2624                           ;main.c: 243: nome[3] = 'n';
  2625  0356  306E               	movlw	110
  2626  0357  00F6               	movwf	??_buscar
  2627  0358  0876               	movf	??_buscar,w
  2628  0359  00CF               	movwf	_nome+3
  2629                           
  2630                           ;main.c: 244: nome[4] = 'o';
  2631  035A  306F               	movlw	111
  2632  035B  00F6               	movwf	??_buscar
  2633  035C  0876               	movf	??_buscar,w
  2634  035D  00D0               	movwf	_nome+4
  2635                           
  2636                           ;main.c: 245: nome[5] = 'w';
  2637  035E  3077               	movlw	119
  2638  035F  00F6               	movwf	??_buscar
  2639  0360  0876               	movf	??_buscar,w
  2640  0361  00D1               	movwf	_nome+5
  2641                           
  2642                           ;main.c: 246: nome[6] = 'n';
  2643  0362  306E               	movlw	110
  2644  0363  00F6               	movwf	??_buscar
  2645  0364  0876               	movf	??_buscar,w
  2646  0365  00D2               	movwf	_nome+6
  2647                           
  2648                           ;main.c: 247: nome[7] = '\0';
  2649  0366  01D3               	clrf	_nome+7
  2650  0367                     l1871:	
  2651                           
  2652                           ;main.c: 249: }
  2653                           ;main.c: 250: estado = 5;
  2654  0367  3005               	movlw	5
  2655  0368  00C8               	movwf	_estado
  2656  0369  3000               	movlw	0
  2657  036A  00C9               	movwf	_estado+1
  2658  036B  0008               	return
  2659  036C                     __end_of_buscar:	
  2660                           
  2661                           	psect	text10
  2662  067E                     __ptext10:	
  2663 ;; *************** function _eeprom_read *****************
  2664 ;; Defined at:
  2665 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic\eeread.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  addr            1    wreg     unsigned char 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  addr            1    5[COMMON] unsigned char 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      unsigned char 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2679 ;;      Params:         0       0       0       0
  2680 ;;      Locals:         1       0       0       0
  2681 ;;      Temps:          1       0       0       0
  2682 ;;      Totals:         2       0       0       0
  2683 ;;Total ram usage:        2 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    1
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_main
  2690 ;;		_maquina
  2691 ;;		_buscar
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _eeprom_read
  2697  067E                     _eeprom_read:	
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  2701                           ;eeprom_read@addr stored from wreg
  2702  067E  00F5               	movwf	eeprom_read@addr
  2703  067F                     l309:	
  2704  067F  0064               	clrwdt	;# 
  2705  0680  1683               	bsf	3,5	;RP0=1, select bank1
  2706  0681  1303               	bcf	3,6	;RP1=0, select bank1
  2707  0682  189C               	btfsc	28,1	;volsfr
  2708  0683  2E7F               	goto	l309
  2709  0684  0875               	movf	eeprom_read@addr,w
  2710  0685  009B               	movwf	27	;volatile
  2711  0686  303F               	movlw	63
  2712  0687  00F4               	movwf	??_eeprom_read
  2713  0688  0874               	movf	??_eeprom_read,w
  2714  0689  059C               	andwf	28,f	;volsfr
  2715  068A  141C               	bsf	28,0	;volsfr
  2716  068B  1003               	clrc
  2717  068C  181C               	btfsc	28,0	;volsfr
  2718  068D  1403               	setc
  2719  068E  3000               	movlw	0
  2720  068F  1803               	skipnc
  2721  0690  3001               	movlw	1
  2722  0691  081A               	movf	26,w	;volatile
  2723  0692  0008               	return
  2724  0693                     __end_of_eeprom_read:	
  2725                           
  2726                           	psect	text11
  2727  036C                     __ptext11:	
  2728 ;; *************** function _armazenar *****************
  2729 ;; Defined at:
  2730 ;;		line 253 in file "main.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  i               2   15[BANK0 ] int 
  2735 ;;  i               2   13[BANK0 ] int 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2745 ;;      Params:         0       0       0       0
  2746 ;;      Locals:         0       4       0       0
  2747 ;;      Temps:          0       1       0       0
  2748 ;;      Totals:         0       5       0       0
  2749 ;;Total ram usage:        5 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    4
  2752 ;; This function calls:
  2753 ;;		_eeprom_write
  2754 ;;		_lcd_cmd
  2755 ;;		_lcd_str
  2756 ;;		_tc_tecla
  2757 ;; This function is called by:
  2758 ;;		_maquina
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _armazenar
  2764  036C                     _armazenar:	
  2765                           
  2766                           ;main.c: 254: lcd_cmd(0x01);
  2767                           
  2768                           ;incstack = 0
  2769                           ; Regs used in _armazenar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2770  036C  3001               	movlw	1
  2771  036D  2636               	fcall	_lcd_cmd
  2772                           
  2773                           ;main.c: 255: lcd_cmd(0x80);
  2774  036E  3080               	movlw	128
  2775  036F  2636               	fcall	_lcd_cmd
  2776                           
  2777                           ;main.c: 256: lcd_str("Armazenando...");
  2778  0370  3005               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2779  0371  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0372  1303               	bcf	3,6	;RP1=0, select bank0
  2781  0373  00A3               	movwf	lcd_str@str
  2782  0374  3080               	movlw	128
  2783  0375  00A4               	movwf	lcd_str@str+1
  2784  0376  25FE               	fcall	_lcd_str
  2785                           
  2786                           ;main.c: 258: for (int i = 0; i < 10; i++) {
  2787  0377  1283               	bcf	3,5	;RP0=0, select bank0
  2788  0378  1303               	bcf	3,6	;RP1=0, select bank0
  2789  0379  01AD               	clrf	armazenar@i
  2790  037A  01AE               	clrf	armazenar@i+1
  2791  037B  082E               	movf	armazenar@i+1,w
  2792  037C  3A80               	xorlw	128
  2793  037D  00FF               	movwf	127
  2794  037E  3080               	movlw	128
  2795  037F  027F               	subwf	127,w
  2796  0380  1D03               	skipz
  2797  0381  2B84               	goto	u1905
  2798  0382  300A               	movlw	10
  2799  0383  022D               	subwf	armazenar@i,w
  2800  0384                     u1905:	
  2801  0384  1803               	btfsc	3,0
  2802  0385  2BA9               	goto	l2445
  2803  0386                     l2437:	
  2804                           
  2805                           ;main.c: 259: eeprom_write(endereco, numero[i]);
  2806  0386  1283               	bcf	3,5	;RP0=0, select bank0
  2807  0387  1303               	bcf	3,6	;RP1=0, select bank0
  2808  0388  082D               	movf	armazenar@i,w
  2809  0389  3E3E               	addlw	(low (_numero| 0))& (0+255)
  2810  038A  0084               	movwf	4
  2811  038B  1383               	bcf	3,7	;select IRP bank0
  2812  038C  0800               	movf	0,w
  2813  038D  00AC               	movwf	??_armazenar
  2814  038E  082C               	movf	??_armazenar,w
  2815  038F  00F4               	movwf	eeprom_write@value
  2816  0390  084A               	movf	_endereco,w
  2817  0391  25BD               	fcall	_eeprom_write
  2818                           
  2819                           ;main.c: 260: endereco++;
  2820  0392  3001               	movlw	1
  2821  0393  1283               	bcf	3,5	;RP0=0, select bank0
  2822  0394  1303               	bcf	3,6	;RP1=0, select bank0
  2823  0395  00AC               	movwf	??_armazenar
  2824  0396  082C               	movf	??_armazenar,w
  2825  0397  07CA               	addwf	_endereco,f
  2826  0398  3001               	movlw	1
  2827  0399  07AD               	addwf	armazenar@i,f
  2828  039A  1803               	skipnc
  2829  039B  0AAE               	incf	armazenar@i+1,f
  2830  039C  3000               	movlw	0
  2831  039D  07AE               	addwf	armazenar@i+1,f
  2832  039E  082E               	movf	armazenar@i+1,w
  2833  039F  3A80               	xorlw	128
  2834  03A0  00FF               	movwf	127
  2835  03A1  3080               	movlw	128
  2836  03A2  027F               	subwf	127,w
  2837  03A3  1D03               	skipz
  2838  03A4  2BA7               	goto	u1915
  2839  03A5  300A               	movlw	10
  2840  03A6  022D               	subwf	armazenar@i,w
  2841  03A7                     u1915:	
  2842  03A7  1C03               	skipc
  2843  03A8  2B86               	goto	l2437
  2844  03A9                     l2445:	
  2845                           
  2846                           ;main.c: 261: }
  2847                           ;main.c: 262: for (int i = 0; i < 10; i++) {
  2848  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  2849  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  2850  03AB  01AF               	clrf	armazenar@i_151
  2851  03AC  01B0               	clrf	armazenar@i_151+1
  2852  03AD  0830               	movf	armazenar@i_151+1,w
  2853  03AE  3A80               	xorlw	128
  2854  03AF  00FF               	movwf	127
  2855  03B0  3080               	movlw	128
  2856  03B1  027F               	subwf	127,w
  2857  03B2  1D03               	skipz
  2858  03B3  2BB6               	goto	u1925
  2859  03B4  300A               	movlw	10
  2860  03B5  022F               	subwf	armazenar@i_151,w
  2861  03B6                     u1925:	
  2862  03B6  1803               	btfsc	3,0
  2863  03B7  2BDB               	goto	l2459
  2864  03B8                     l2451:	
  2865                           
  2866                           ;main.c: 263: eeprom_write(endereco, nome[i]);
  2867  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2868  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2869  03BA  082F               	movf	armazenar@i_151,w
  2870  03BB  3E4C               	addlw	(low (_nome| 0))& (0+255)
  2871  03BC  0084               	movwf	4
  2872  03BD  1383               	bcf	3,7	;select IRP bank0
  2873  03BE  0800               	movf	0,w
  2874  03BF  00AC               	movwf	??_armazenar
  2875  03C0  082C               	movf	??_armazenar,w
  2876  03C1  00F4               	movwf	eeprom_write@value
  2877  03C2  084A               	movf	_endereco,w
  2878  03C3  25BD               	fcall	_eeprom_write
  2879                           
  2880                           ;main.c: 264: endereco++;
  2881  03C4  3001               	movlw	1
  2882  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2883  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2884  03C7  00AC               	movwf	??_armazenar
  2885  03C8  082C               	movf	??_armazenar,w
  2886  03C9  07CA               	addwf	_endereco,f
  2887  03CA  3001               	movlw	1
  2888  03CB  07AF               	addwf	armazenar@i_151,f
  2889  03CC  1803               	skipnc
  2890  03CD  0AB0               	incf	armazenar@i_151+1,f
  2891  03CE  3000               	movlw	0
  2892  03CF  07B0               	addwf	armazenar@i_151+1,f
  2893  03D0  0830               	movf	armazenar@i_151+1,w
  2894  03D1  3A80               	xorlw	128
  2895  03D2  00FF               	movwf	127
  2896  03D3  3080               	movlw	128
  2897  03D4  027F               	subwf	127,w
  2898  03D5  1D03               	skipz
  2899  03D6  2BD9               	goto	u1935
  2900  03D7  300A               	movlw	10
  2901  03D8  022F               	subwf	armazenar@i_151,w
  2902  03D9                     u1935:	
  2903  03D9  1C03               	skipc
  2904  03DA  2BB8               	goto	l2451
  2905  03DB                     l2459:	
  2906                           
  2907                           ;main.c: 265: }
  2908                           ;main.c: 266: eeprom_write(0x0, endereco);
  2909  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2910  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2911  03DD  084A               	movf	_endereco,w
  2912  03DE  00AC               	movwf	??_armazenar
  2913  03DF  082C               	movf	??_armazenar,w
  2914  03E0  00F4               	movwf	eeprom_write@value
  2915  03E1  3000               	movlw	0
  2916  03E2  25BD               	fcall	_eeprom_write
  2917                           
  2918                           ;main.c: 269: lcd_cmd(0x01);
  2919  03E3  3001               	movlw	1
  2920  03E4  2636               	fcall	_lcd_cmd
  2921                           
  2922                           ;main.c: 270: lcd_cmd(0x80);
  2923  03E5  3080               	movlw	128
  2924  03E6  2636               	fcall	_lcd_cmd
  2925                           
  2926                           ;main.c: 271: lcd_str("Salvo!");
  2927  03E7  305C               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2928  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2929  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2930  03EA  00A3               	movwf	lcd_str@str
  2931  03EB  3080               	movlw	128
  2932  03EC  00A4               	movwf	lcd_str@str+1
  2933  03ED  25FE               	fcall	_lcd_str
  2934                           
  2935                           ;main.c: 272: tc_tecla(200);
  2936  03EE  30C8               	movlw	200
  2937  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2938  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2939  03F1  00A3               	movwf	tc_tecla@timeout
  2940  03F2  3000               	movlw	0
  2941  03F3  00A4               	movwf	tc_tecla@timeout+1
  2942  03F4  221E               	fcall	_tc_tecla
  2943                           
  2944                           ;main.c: 273: estado = 0;
  2945  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2946  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  2947  03F7  01C8               	clrf	_estado
  2948  03F8  01C9               	clrf	_estado+1
  2949  03F9  0008               	return
  2950  03FA                     __end_of_armazenar:	
  2951                           
  2952                           	psect	text12
  2953  05BD                     __ptext12:	
  2954 ;; *************** function _eeprom_write *****************
  2955 ;; Defined at:
  2956 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic\eewrite.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  addr            1    wreg     unsigned char 
  2959 ;;  value           1    4[COMMON] unsigned char 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  addr            1    6[COMMON] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, status,2, status,0
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2971 ;;      Params:         1       0       0       0
  2972 ;;      Locals:         1       0       0       0
  2973 ;;      Temps:          1       0       0       0
  2974 ;;      Totals:         3       0       0       0
  2975 ;;Total ram usage:        3 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;;		_armazenar
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           
  2987                           ;psect for function _eeprom_write
  2988  05BD                     _eeprom_write:	
  2989                           
  2990                           ;incstack = 0
  2991                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2992                           ;eeprom_write@addr stored from wreg
  2993  05BD  00F6               	movwf	eeprom_write@addr
  2994  05BE                     l331:	
  2995  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  2996  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  2997  05C0  189C               	btfsc	28,1	;volsfr
  2998  05C1  2DBE               	goto	l331
  2999  05C2  0876               	movf	eeprom_write@addr,w
  3000  05C3  009B               	movwf	27	;volatile
  3001  05C4  0874               	movf	eeprom_write@value,w
  3002  05C5  009A               	movwf	26	;volatile
  3003  05C6  303F               	movlw	63
  3004  05C7  00F5               	movwf	??_eeprom_write
  3005  05C8  0875               	movf	??_eeprom_write,w
  3006  05C9  059C               	andwf	28,f	;volsfr
  3007  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  3008  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  3009  05CC  1003               	bcf	3,0	;volatile
  3010  05CD  1B8B               	btfsc	11,7	;volatile
  3011  05CE  1403               	bsf	3,0	;volatile
  3012  05CF  138B               	bcf	11,7	;volatile
  3013  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  3014  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  3015  05D2  151C               	bsf	28,2	;volsfr
  3016  05D3  3055               	movlw	85
  3017  05D4  009D               	movwf	29	;volsfr
  3018  05D5  30AA               	movlw	170
  3019  05D6  009D               	movwf	29	;volsfr
  3020  05D7  149C               	bsf	28,1	;volsfr
  3021  05D8  111C               	bcf	28,2	;volsfr
  3022  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  3023  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  3024  05DB  1C03               	btfss	3,0	;volatile
  3025  05DC  0008               	return
  3026  05DD  178B               	bsf	11,7	;volatile
  3027  05DE  0008               	return
  3028  05DF                     __end_of_eeprom_write:	
  3029                           
  3030                           	psect	text13
  3031  04D1                     __ptext13:	
  3032 ;; *************** function _adicionar *****************
  3033 ;; Defined at:
  3034 ;;		line 119 in file "main.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3048 ;;      Params:         0       0       0       0
  3049 ;;      Locals:         0       0       0       0
  3050 ;;      Temps:          0       1       0       0
  3051 ;;      Totals:         0       1       0       0
  3052 ;;Total ram usage:        1 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    4
  3055 ;; This function calls:
  3056 ;;		_ativaModo
  3057 ;;		_lcd_cmd
  3058 ;;		_lcd_str
  3059 ;;		_tc_tecla
  3060 ;; This function is called by:
  3061 ;;		_maquina
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _adicionar
  3067  04D1                     _adicionar:	
  3068                           
  3069                           ;main.c: 120: lcd_cmd(0x01);
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _adicionar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3073  04D1  3001               	movlw	1
  3074  04D2  2636               	fcall	_lcd_cmd
  3075                           
  3076                           ;main.c: 121: lcd_cmd(0x80);
  3077  04D3  3080               	movlw	128
  3078  04D4  2636               	fcall	_lcd_cmd
  3079                           
  3080                           ;main.c: 122: lcd_str("Adicionar");
  3081  04D5  3052               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3082  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  3083  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  3084  04D8  00A3               	movwf	lcd_str@str
  3085  04D9  3080               	movlw	128
  3086  04DA  00A4               	movwf	lcd_str@str+1
  3087  04DB  25FE               	fcall	_lcd_str
  3088                           
  3089                           ;main.c: 123: entrada = tc_tecla(0);
  3090  04DC  3000               	movlw	0
  3091  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  3092  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  3093  04DF  00A3               	movwf	tc_tecla@timeout
  3094  04E0  00A4               	movwf	tc_tecla@timeout+1
  3095  04E1  221E               	fcall	_tc_tecla
  3096  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  3097  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  3098  04E4  00AC               	movwf	??_adicionar
  3099  04E5  082C               	movf	??_adicionar,w
  3100  04E6  00CB               	movwf	_entrada
  3101                           
  3102                           ;main.c: 125: switch (entrada) {
  3103  04E7  2CF3               	goto	l2307
  3104  04E8                     l2299:	
  3105                           ;main.c: 126: case '*':
  3106                           
  3107                           
  3108                           ;main.c: 127: estado = 0;
  3109  04E8  01C8               	clrf	_estado
  3110  04E9  01C9               	clrf	_estado+1
  3111                           
  3112                           ;main.c: 128: break;
  3113  04EA  0008               	return
  3114  04EB                     l2301:	
  3115                           ;main.c: 129: case '#':
  3116                           
  3117                           
  3118                           ;main.c: 130: ativaModo();
  3119  04EB  26C1               	fcall	_ativaModo
  3120                           
  3121                           ;main.c: 131: estado = 3;
  3122  04EC  3003               	movlw	3
  3123  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  3124  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  3125  04EF  00C8               	movwf	_estado
  3126  04F0  3000               	movlw	0
  3127  04F1  00C9               	movwf	_estado+1
  3128                           
  3129                           ;main.c: 135: }
  3130                           
  3131                           ;main.c: 134: break;
  3132                           
  3133                           ;main.c: 133: default:
  3134                           
  3135                           ;main.c: 132: break;
  3136  04F2  0008               	return
  3137  04F3                     l2307:	
  3138  04F3  084B               	movf	_entrada,w
  3139                           
  3140                           ; Switch size 1, requested type "space"
  3141                           ; Number of cases is 2, Range of values is 35 to 42
  3142                           ; switch strategies available:
  3143                           ; Name         Instructions Cycles
  3144                           ; simple_byte            7     4 (average)
  3145                           ; direct_byte           17     9 (fixed)
  3146                           ; jumptable            263     9 (fixed)
  3147                           ;	Chosen strategy is simple_byte
  3148  04F4  3A23               	xorlw	35	; case 35
  3149  04F5  1903               	skipnz
  3150  04F6  2CEB               	goto	l2301
  3151  04F7  3A09               	xorlw	9	; case 42
  3152  04F8  1903               	skipnz
  3153  04F9  2CE8               	goto	l2299
  3154  04FA  2CFB               	goto	l104
  3155  04FB                     l104:	
  3156  04FB  0008               	return
  3157  04FC                     __end_of_adicionar:	
  3158                           
  3159                           	psect	text14
  3160  021E                     __ptext14:	
  3161 ;; *************** function _tc_tecla *****************
  3162 ;; Defined at:
  3163 ;;		line 7 in file "teclado.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  timeout         2    3[BANK0 ] unsigned int 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  to              2    8[BANK0 ] unsigned int 
  3168 ;;  ret             1   11[BANK0 ] unsigned char 
  3169 ;;  i               1   10[BANK0 ] unsigned char 
  3170 ;;  tmp             1    7[BANK0 ] unsigned char 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      unsigned char 
  3173 ;; Registers used:
  3174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3180 ;;      Params:         0       2       0       0
  3181 ;;      Locals:         0       5       0       0
  3182 ;;      Temps:          0       2       0       0
  3183 ;;      Totals:         0       9       0       0
  3184 ;;Total ram usage:        9 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    2
  3187 ;; This function calls:
  3188 ;;		___bmul
  3189 ;;		_atraso_ms
  3190 ;; This function is called by:
  3191 ;;		_discar
  3192 ;;		_adicionar
  3193 ;;		_digitarNumero
  3194 ;;		_armazenar
  3195 ;;		_chamar
  3196 ;;		_tc_letra
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function _tc_tecla
  3202  021E                     _tc_tecla:	
  3203                           
  3204                           ;teclado.c: 8: unsigned int to = 0;
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _tc_tecla: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3208  021E  1283               	bcf	3,5	;RP0=0, select bank0
  3209  021F  1303               	bcf	3,6	;RP1=0, select bank0
  3210  0220  01A8               	clrf	tc_tecla@to
  3211  0221  01A9               	clrf	tc_tecla@to+1
  3212                           
  3213                           ;teclado.c: 9: unsigned char i;
  3214                           ;teclado.c: 10: unsigned char ret = 0;
  3215  0222  01AB               	clrf	tc_tecla@ret
  3216                           
  3217                           ;teclado.c: 11: unsigned char tmp = PORTA;
  3218  0223  0805               	movf	5,w	;volatile
  3219  0224  00A5               	movwf	??_tc_tecla
  3220  0225  0825               	movf	??_tc_tecla,w
  3221  0226  00A7               	movwf	tc_tecla@tmp
  3222                           
  3223                           ;teclado.c: 13: while (((to < timeout) || (!timeout))&&(!ret)) {
  3224  0227  2A95               	goto	l2143
  3225  0228                     l2099:	
  3226                           
  3227                           ;teclado.c: 14: for (i = 0; i < 4; i++) {
  3228  0228  01AA               	clrf	tc_tecla@i
  3229  0229  3004               	movlw	4
  3230  022A  022A               	subwf	tc_tecla@i,w
  3231  022B  1803               	btfsc	3,0
  3232  022C  2A88               	goto	l2139
  3233  022D                     l2105:	
  3234                           
  3235                           ;teclado.c: 15: PORTA |= linha[i];
  3236  022D  082A               	movf	tc_tecla@i,w
  3237  022E  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
  3238  022F  0084               	movwf	4
  3239  0230  240A               	fcall	stringdir
  3240  0231  00A5               	movwf	??_tc_tecla
  3241  0232  0825               	movf	??_tc_tecla,w
  3242  0233  0485               	iorwf	5,f	;volatile
  3243                           
  3244                           ;teclado.c: 16: if (RB7) {
  3245  0234  1F86               	btfss	6,7	;volatile
  3246  0235  2A49               	goto	l228
  3247                           
  3248                           ;teclado.c: 17: atraso_ms(20);
  3249  0236  3014               	movlw	20
  3250  0237  00F4               	movwf	atraso_ms@valor
  3251  0238  3000               	movlw	0
  3252  0239  00F5               	movwf	atraso_ms@valor+1
  3253  023A  254D               	fcall	_atraso_ms
  3254                           
  3255                           ;teclado.c: 18: if (RB7) {
  3256  023B  1283               	bcf	3,5	;RP0=0, select bank0
  3257  023C  1303               	bcf	3,6	;RP1=0, select bank0
  3258  023D  1F86               	btfss	6,7	;volatile
  3259  023E  2A49               	goto	l228
  3260  023F                     l230:	
  3261                           ;teclado.c: 19: while (RB7);
  3262                           
  3263  023F  1B86               	btfsc	6,7	;volatile
  3264  0240  2A3F               	goto	l230
  3265                           
  3266                           ;teclado.c: 20: ret = 1 + (i * 3);
  3267  0241  3003               	movlw	3
  3268  0242  00A5               	movwf	??_tc_tecla
  3269  0243  0825               	movf	??_tc_tecla,w
  3270  0244  00F4               	movwf	___bmul@multiplicand
  3271  0245  082A               	movf	tc_tecla@i,w
  3272  0246  2693               	fcall	___bmul
  3273  0247  3E01               	addlw	1
  3274  0248  2A72               	goto	L13
  3275  0249                     l228:	
  3276                           ;teclado.c: 21: break;
  3277                           
  3278                           
  3279                           ;teclado.c: 22: }
  3280                           ;teclado.c: 23: };
  3281                           ;teclado.c: 24: if (RB6) {
  3282  0249  1F06               	btfss	6,6	;volatile
  3283  024A  2A5E               	goto	l233
  3284                           
  3285                           ;teclado.c: 25: atraso_ms(20);
  3286  024B  3014               	movlw	20
  3287  024C  00F4               	movwf	atraso_ms@valor
  3288  024D  3000               	movlw	0
  3289  024E  00F5               	movwf	atraso_ms@valor+1
  3290  024F  254D               	fcall	_atraso_ms
  3291                           
  3292                           ;teclado.c: 26: if (RB6) {
  3293  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3294  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3295  0252  1F06               	btfss	6,6	;volatile
  3296  0253  2A5E               	goto	l233
  3297  0254                     l235:	
  3298                           ;teclado.c: 27: while (RB6);
  3299                           
  3300  0254  1B06               	btfsc	6,6	;volatile
  3301  0255  2A54               	goto	l235
  3302                           
  3303                           ;teclado.c: 28: ret = 2 + (i * 3);
  3304  0256  3003               	movlw	3
  3305  0257  00A5               	movwf	??_tc_tecla
  3306  0258  0825               	movf	??_tc_tecla,w
  3307  0259  00F4               	movwf	___bmul@multiplicand
  3308  025A  082A               	movf	tc_tecla@i,w
  3309  025B  2693               	fcall	___bmul
  3310  025C  3E02               	addlw	2
  3311  025D  2A72               	goto	L13
  3312  025E                     l233:	
  3313                           ;teclado.c: 29: break;
  3314                           
  3315                           
  3316                           ;teclado.c: 30: }
  3317                           ;teclado.c: 31: };
  3318                           ;teclado.c: 32: if (RB5) {
  3319  025E  1E86               	btfss	6,5	;volatile
  3320  025F  2A78               	goto	l2133
  3321                           
  3322                           ;teclado.c: 33: atraso_ms(20);
  3323  0260  3014               	movlw	20
  3324  0261  00F4               	movwf	atraso_ms@valor
  3325  0262  3000               	movlw	0
  3326  0263  00F5               	movwf	atraso_ms@valor+1
  3327  0264  254D               	fcall	_atraso_ms
  3328                           
  3329                           ;teclado.c: 34: if (RB5) {
  3330  0265  1283               	bcf	3,5	;RP0=0, select bank0
  3331  0266  1303               	bcf	3,6	;RP1=0, select bank0
  3332  0267  1E86               	btfss	6,5	;volatile
  3333  0268  2A78               	goto	l2133
  3334  0269                     l240:	
  3335                           ;teclado.c: 35: while (RB5);
  3336                           
  3337  0269  1A86               	btfsc	6,5	;volatile
  3338  026A  2A69               	goto	l240
  3339                           
  3340                           ;teclado.c: 36: ret = 3 + (i * 3);
  3341  026B  3003               	movlw	3
  3342  026C  00A5               	movwf	??_tc_tecla
  3343  026D  0825               	movf	??_tc_tecla,w
  3344  026E  00F4               	movwf	___bmul@multiplicand
  3345  026F  082A               	movf	tc_tecla@i,w
  3346  0270  2693               	fcall	___bmul
  3347  0271  3E03               	addlw	3
  3348  0272                     L13:	
  3349  0272  1283               	bcf	3,5	;RP0=0, select bank0
  3350  0273  1303               	bcf	3,6	;RP1=0, select bank0
  3351  0274  00A6               	movwf	??_tc_tecla+1
  3352  0275  0826               	movf	??_tc_tecla+1,w
  3353  0276  00AB               	movwf	tc_tecla@ret
  3354                           
  3355                           ;teclado.c: 37: break;
  3356  0277  2A88               	goto	l2139
  3357  0278                     l2133:	
  3358                           
  3359                           ;teclado.c: 38: }
  3360                           ;teclado.c: 39: };
  3361                           ;teclado.c: 40: PORTA &= ~linha[i];
  3362  0278  082A               	movf	tc_tecla@i,w
  3363  0279  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
  3364  027A  0084               	movwf	4
  3365  027B  240A               	fcall	stringdir
  3366  027C  3AFF               	xorlw	255
  3367  027D  00A5               	movwf	??_tc_tecla
  3368  027E  0825               	movf	??_tc_tecla,w
  3369  027F  0585               	andwf	5,f	;volatile
  3370  0280  3001               	movlw	1
  3371  0281  00A5               	movwf	??_tc_tecla
  3372  0282  0825               	movf	??_tc_tecla,w
  3373  0283  07AA               	addwf	tc_tecla@i,f
  3374  0284  3004               	movlw	4
  3375  0285  022A               	subwf	tc_tecla@i,w
  3376  0286  1C03               	skipc
  3377  0287  2A2D               	goto	l2105
  3378  0288                     l2139:	
  3379                           
  3380                           ;teclado.c: 41: };
  3381                           ;teclado.c: 42: atraso_ms(5);
  3382  0288  3005               	movlw	5
  3383  0289  00F4               	movwf	atraso_ms@valor
  3384  028A  3000               	movlw	0
  3385  028B  00F5               	movwf	atraso_ms@valor+1
  3386  028C  254D               	fcall	_atraso_ms
  3387                           
  3388                           ;teclado.c: 43: to += 5;
  3389  028D  3005               	movlw	5
  3390  028E  1283               	bcf	3,5	;RP0=0, select bank0
  3391  028F  1303               	bcf	3,6	;RP1=0, select bank0
  3392  0290  07A8               	addwf	tc_tecla@to,f
  3393  0291  1803               	skipnc
  3394  0292  0AA9               	incf	tc_tecla@to+1,f
  3395  0293  3000               	movlw	0
  3396  0294  07A9               	addwf	tc_tecla@to+1,f
  3397  0295                     l2143:	
  3398  0295  0824               	movf	tc_tecla@timeout+1,w
  3399  0296  0229               	subwf	tc_tecla@to+1,w
  3400  0297  1D03               	skipz
  3401  0298  2A9B               	goto	u1585
  3402  0299  0823               	movf	tc_tecla@timeout,w
  3403  029A  0228               	subwf	tc_tecla@to,w
  3404  029B                     u1585:	
  3405  029B  1C03               	skipc
  3406  029C  2AA1               	goto	l2147
  3407  029D  0823               	movf	tc_tecla@timeout,w
  3408  029E  0424               	iorwf	tc_tecla@timeout+1,w
  3409  029F  1D03               	btfss	3,2
  3410  02A0  2AA4               	goto	l2149
  3411  02A1                     l2147:	
  3412  02A1  082B               	movf	tc_tecla@ret,w
  3413  02A2  1903               	btfsc	3,2
  3414  02A3  2A28               	goto	l2099
  3415  02A4                     l2149:	
  3416                           
  3417                           ;teclado.c: 44: }
  3418                           ;teclado.c: 46: if (!ret)ret = 255;
  3419  02A4  082B               	movf	tc_tecla@ret,w
  3420  02A5  1D03               	btfss	3,2
  3421  02A6  2AA9               	goto	l2153
  3422  02A7  30FF               	movlw	255
  3423  02A8  2ABA               	goto	L16
  3424  02A9                     l2153:	
  3425                           
  3426                           ;teclado.c: 47: else if (ret == 10)ret = 0x2A;
  3427  02A9  300A               	movlw	10
  3428  02AA  062B               	xorwf	tc_tecla@ret,w
  3429  02AB  1D03               	btfss	3,2
  3430  02AC  2AAF               	goto	l2157
  3431  02AD  302A               	movlw	42
  3432  02AE  2ABA               	goto	L16
  3433  02AF                     l2157:	
  3434                           
  3435                           ;teclado.c: 48: else if (ret == 11)ret = 0x30;
  3436  02AF  300B               	movlw	11
  3437  02B0  062B               	xorwf	tc_tecla@ret,w
  3438  02B1  1D03               	btfss	3,2
  3439  02B2  2AB5               	goto	l2161
  3440  02B3  3030               	movlw	48
  3441  02B4  2ABA               	goto	L16
  3442  02B5                     l2161:	
  3443                           
  3444                           ;teclado.c: 49: else if (ret == 12)ret = 0x23;
  3445  02B5  300C               	movlw	12
  3446  02B6  062B               	xorwf	tc_tecla@ret,w
  3447  02B7  1D03               	btfss	3,2
  3448  02B8  2ABE               	goto	l2165
  3449  02B9  3023               	movlw	35
  3450  02BA                     L16:	
  3451  02BA  00A5               	movwf	??_tc_tecla
  3452  02BB  0825               	movf	??_tc_tecla,w
  3453  02BC  00AB               	movwf	tc_tecla@ret
  3454  02BD  2AC2               	goto	l2167
  3455  02BE                     l2165:	
  3456                           
  3457                           ;teclado.c: 50: else ret += 0x30;
  3458  02BE  3030               	movlw	48
  3459  02BF  00A5               	movwf	??_tc_tecla
  3460  02C0  0825               	movf	??_tc_tecla,w
  3461  02C1  07AB               	addwf	tc_tecla@ret,f
  3462  02C2                     l2167:	
  3463                           
  3464                           ;teclado.c: 51: PORTA = tmp;
  3465  02C2  0827               	movf	tc_tecla@tmp,w
  3466  02C3  0085               	movwf	5	;volatile
  3467                           
  3468                           ;teclado.c: 52: return ret;
  3469  02C4  082B               	movf	tc_tecla@ret,w
  3470  02C5  0008               	return
  3471  02C6                     __end_of_tc_tecla:	
  3472                           
  3473                           	psect	text15
  3474  0693                     __ptext15:	
  3475 ;; *************** function ___bmul *****************
  3476 ;; Defined at:
  3477 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  multiplier      1    wreg     unsigned char 
  3480 ;;  multiplicand    1    4[COMMON] unsigned char 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  multiplier      1    7[COMMON] unsigned char 
  3483 ;;  product         1    6[COMMON] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      unsigned char 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3493 ;;      Params:         1       0       0       0
  3494 ;;      Locals:         2       0       0       0
  3495 ;;      Temps:          1       0       0       0
  3496 ;;      Totals:         4       0       0       0
  3497 ;;Total ram usage:        4 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    1
  3500 ;; This function calls:
  3501 ;;		Nothing
  3502 ;; This function is called by:
  3503 ;;		_tc_tecla
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           
  3508                           ;psect for function ___bmul
  3509  0693                     ___bmul:	
  3510                           
  3511                           ;incstack = 0
  3512                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3513                           ;___bmul@multiplier stored from wreg
  3514  0693  00F7               	movwf	___bmul@multiplier
  3515  0694  01F6               	clrf	___bmul@product
  3516  0695                     l1463:	
  3517  0695  1C77               	btfss	___bmul@multiplier,0
  3518  0696  2E9B               	goto	l1467
  3519  0697  0874               	movf	___bmul@multiplicand,w
  3520  0698  00F5               	movwf	??___bmul
  3521  0699  0875               	movf	??___bmul,w
  3522  069A  07F6               	addwf	___bmul@product,f
  3523  069B                     l1467:	
  3524  069B  1003               	clrc
  3525  069C  0DF4               	rlf	___bmul@multiplicand,f
  3526  069D  1003               	clrc
  3527  069E  0CF7               	rrf	___bmul@multiplier,f
  3528  069F  0877               	movf	___bmul@multiplier,w
  3529  06A0  1D03               	btfss	3,2
  3530  06A1  2E95               	goto	l1463
  3531  06A2  0876               	movf	___bmul@product,w
  3532  06A3  0008               	return
  3533  06A4                     __end_of___bmul:	
  3534                           
  3535                           	psect	text16
  3536  05FE                     __ptext16:	
  3537 ;; *************** function _lcd_str *****************
  3538 ;; Defined at:
  3539 ;;		line 85 in file "lcd.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  str             2    3[BANK0 ] PTR const unsigned char 
  3542 ;;		 -> STR_10(14), STR_9(12), STR_8(7), STR_7(15), 
  3543 ;;		 -> STR_6(10), STR_5(14), nome(10), STR_4(10), 
  3544 ;;		 -> STR_3(12), STR_2(10), STR_1(7), 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  i               1    6[BANK0 ] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      void 
  3549 ;; Registers used:
  3550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3556 ;;      Params:         0       2       0       0
  3557 ;;      Locals:         0       1       0       0
  3558 ;;      Temps:          0       1       0       0
  3559 ;;      Totals:         0       4       0       0
  3560 ;;Total ram usage:        4 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    3
  3563 ;; This function calls:
  3564 ;;		_lcd_dat
  3565 ;; This function is called by:
  3566 ;;		_discar
  3567 ;;		_adicionar
  3568 ;;		_digitarNome
  3569 ;;		_digitarNumero
  3570 ;;		_armazenar
  3571 ;;		_chamar
  3572 ;;		_desligar
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function _lcd_str
  3578  05FE                     _lcd_str:	
  3579                           
  3580                           ;lcd.c: 87: unsigned char i=0;
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _lcd_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3584  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  3585  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  3586  0600  01A6               	clrf	lcd_str@i
  3587  0601                     l2199:	
  3588                           ;lcd.c: 89: while(str[i])
  3589                           
  3590  0601  0826               	movf	lcd_str@i,w
  3591  0602  0723               	addwf	lcd_str@str,w
  3592  0603  0084               	movwf	4
  3593  0604  0824               	movf	lcd_str@str+1,w
  3594  0605  1803               	skipnc
  3595  0606  0A24               	incf	lcd_str@str+1,w
  3596  0607  00FF               	movwf	127
  3597  0608  2400               	fcall	stringtab
  3598  0609  3A00               	xorlw	0
  3599  060A  1903               	btfsc	3,2
  3600  060B  0008               	return
  3601                           
  3602                           ;lcd.c: 90: {
  3603                           ;lcd.c: 91: lcd_dat(str[i]);
  3604  060C  0826               	movf	lcd_str@i,w
  3605  060D  0723               	addwf	lcd_str@str,w
  3606  060E  0084               	movwf	4
  3607  060F  0824               	movf	lcd_str@str+1,w
  3608  0610  1803               	skipnc
  3609  0611  0A24               	incf	lcd_str@str+1,w
  3610  0612  00FF               	movwf	127
  3611  0613  2400               	fcall	stringtab
  3612  0614  261C               	fcall	_lcd_dat
  3613                           
  3614                           ;lcd.c: 92: i++;
  3615  0615  3001               	movlw	1
  3616  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3617  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3618  0618  00A5               	movwf	??_lcd_str
  3619  0619  0825               	movf	??_lcd_str,w
  3620  061A  07A6               	addwf	lcd_str@i,f
  3621  061B  2E01               	goto	l2199
  3622  061C                     __end_of_lcd_str:	
  3623                           
  3624                           	psect	text17
  3625  061C                     __ptext17:	
  3626 ;; *************** function _lcd_dat *****************
  3627 ;; Defined at:
  3628 ;;		line 55 in file "lcd.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  val             1    wreg     unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  val             1    7[COMMON] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2, status,0, pclath, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3642 ;;      Params:         0       0       0       0
  3643 ;;      Locals:         1       0       0       0
  3644 ;;      Temps:          0       0       0       0
  3645 ;;      Totals:         1       0       0       0
  3646 ;;Total ram usage:        1 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    2
  3649 ;; This function calls:
  3650 ;;		_atraso_ms
  3651 ;;		_lcd_wr
  3652 ;; This function is called by:
  3653 ;;		_digitarNome
  3654 ;;		_digitarNumero
  3655 ;;		_lcd_str
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           
  3660                           ;psect for function _lcd_dat
  3661  061C                     _lcd_dat:	
  3662                           
  3663                           ;incstack = 0
  3664                           ; Regs used in _lcd_dat: [wreg+status,2+status,0+pclath+cstack]
  3665                           ;lcd_dat@val stored from wreg
  3666  061C  00F7               	movwf	lcd_dat@val
  3667                           
  3668                           ;lcd.c: 57: RA0=1;
  3669  061D  1283               	bcf	3,5	;RP0=0, select bank0
  3670  061E  1303               	bcf	3,6	;RP1=0, select bank0
  3671  061F  1405               	bsf	5,0	;volatile
  3672                           
  3673                           ;lcd.c: 58: lcd_wr(val);
  3674  0620  0877               	movf	lcd_dat@val,w
  3675  0621  2574               	fcall	_lcd_wr
  3676                           
  3677                           ;lcd.c: 59: RB3=1;
  3678  0622  1283               	bcf	3,5	;RP0=0, select bank0
  3679  0623  1303               	bcf	3,6	;RP1=0, select bank0
  3680  0624  1586               	bsf	6,3	;volatile
  3681                           
  3682                           ;lcd.c: 60: atraso_ms(3);
  3683  0625  3003               	movlw	3
  3684  0626  00F4               	movwf	atraso_ms@valor
  3685  0627  3000               	movlw	0
  3686  0628  00F5               	movwf	atraso_ms@valor+1
  3687  0629  254D               	fcall	_atraso_ms
  3688                           
  3689                           ;lcd.c: 61: RA0=0;
  3690  062A  1283               	bcf	3,5	;RP0=0, select bank0
  3691  062B  1303               	bcf	3,6	;RP1=0, select bank0
  3692  062C  1005               	bcf	5,0	;volatile
  3693                           
  3694                           ;lcd.c: 62: atraso_ms(3);
  3695  062D  3003               	movlw	3
  3696  062E  00F4               	movwf	atraso_ms@valor
  3697  062F  3000               	movlw	0
  3698  0630  00F5               	movwf	atraso_ms@valor+1
  3699  0631  254D               	fcall	_atraso_ms
  3700                           
  3701                           ;lcd.c: 63: RA0=1;
  3702  0632  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0633  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0634  1405               	bsf	5,0	;volatile
  3705  0635  0008               	return
  3706  0636                     __end_of_lcd_dat:	
  3707                           
  3708                           	psect	text18
  3709  06C1                     __ptext18:	
  3710 ;; *************** function _ativaModo *****************
  3711 ;; Defined at:
  3712 ;;		line 138 in file "main.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;		None
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;		None
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  1    wreg      void 
  3719 ;; Registers used:
  3720 ;;		None
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3726 ;;      Params:         0       0       0       0
  3727 ;;      Locals:         0       0       0       0
  3728 ;;      Temps:          0       0       0       0
  3729 ;;      Totals:         0       0       0       0
  3730 ;;Total ram usage:        0 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    1
  3733 ;; This function calls:
  3734 ;;		Nothing
  3735 ;; This function is called by:
  3736 ;;		_adicionar
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           
  3741                           ;psect for function _ativaModo
  3742  06C1                     _ativaModo:	
  3743                           
  3744                           ;main.c: 139: modo = 0b1;
  3745                           
  3746                           ;incstack = 0
  3747                           ; Regs used in _ativaModo: []
  3748  06C1  14F8               	bsf	_modo/(0+8),_modo& (0+7)
  3749  06C2  0008               	return
  3750  06C3                     __end_of_ativaModo:	
  3751                           
  3752                           	psect	text19
  3753  0526                     __ptext19:	
  3754 ;; *************** function _lcd_init *****************
  3755 ;; Defined at:
  3756 ;;		line 66 in file "lcd.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, pclath, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3770 ;;      Params:         0       0       0       0
  3771 ;;      Locals:         0       0       0       0
  3772 ;;      Temps:          0       0       0       0
  3773 ;;      Totals:         0       0       0       0
  3774 ;;Total ram usage:        0 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    3
  3777 ;; This function calls:
  3778 ;;		_atraso_ms
  3779 ;;		_lcd_cmd
  3780 ;; This function is called by:
  3781 ;;		_main
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _lcd_init
  3787  0526                     _lcd_init:	
  3788                           
  3789                           ;lcd.c: 68: RA0=0;
  3790                           
  3791                           ;incstack = 0
  3792                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  3793  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3794  0527  1303               	bcf	3,6	;RP1=0, select bank0
  3795  0528  1005               	bcf	5,0	;volatile
  3796                           
  3797                           ;lcd.c: 69: RB3=0;
  3798  0529  1186               	bcf	6,3	;volatile
  3799                           
  3800                           ;lcd.c: 70: atraso_ms(20);
  3801  052A  3014               	movlw	20
  3802  052B  00F4               	movwf	atraso_ms@valor
  3803  052C  3000               	movlw	0
  3804  052D  00F5               	movwf	atraso_ms@valor+1
  3805  052E  254D               	fcall	_atraso_ms
  3806                           
  3807                           ;lcd.c: 71: RA0=1;
  3808  052F  1283               	bcf	3,5	;RP0=0, select bank0
  3809  0530  1303               	bcf	3,6	;RP1=0, select bank0
  3810  0531  1405               	bsf	5,0	;volatile
  3811                           
  3812                           ;lcd.c: 73: lcd_cmd(0x30);
  3813  0532  3030               	movlw	48
  3814  0533  2636               	fcall	_lcd_cmd
  3815                           
  3816                           ;lcd.c: 74: atraso_ms(5);
  3817  0534  3005               	movlw	5
  3818  0535  00F4               	movwf	atraso_ms@valor
  3819  0536  3000               	movlw	0
  3820  0537  00F5               	movwf	atraso_ms@valor+1
  3821  0538  254D               	fcall	_atraso_ms
  3822                           
  3823                           ;lcd.c: 75: lcd_cmd(0x30);
  3824  0539  3030               	movlw	48
  3825  053A  2636               	fcall	_lcd_cmd
  3826                           
  3827                           ;lcd.c: 76: atraso_ms(1);
  3828  053B  3001               	movlw	1
  3829  053C  00F4               	movwf	atraso_ms@valor
  3830  053D  3000               	movlw	0
  3831  053E  00F5               	movwf	atraso_ms@valor+1
  3832  053F  254D               	fcall	_atraso_ms
  3833                           
  3834                           ;lcd.c: 77: lcd_cmd(0x38);
  3835  0540  3038               	movlw	56
  3836  0541  2636               	fcall	_lcd_cmd
  3837                           
  3838                           ;lcd.c: 78: lcd_cmd(0x08);
  3839  0542  3008               	movlw	8
  3840  0543  2636               	fcall	_lcd_cmd
  3841                           
  3842                           ;lcd.c: 79: lcd_cmd(0x0F);
  3843  0544  300F               	movlw	15
  3844  0545  2636               	fcall	_lcd_cmd
  3845                           
  3846                           ;lcd.c: 80: lcd_cmd(0x01);
  3847  0546  3001               	movlw	1
  3848  0547  2636               	fcall	_lcd_cmd
  3849                           
  3850                           ;lcd.c: 81: lcd_cmd(0x38);
  3851  0548  3038               	movlw	56
  3852  0549  2636               	fcall	_lcd_cmd
  3853                           
  3854                           ;lcd.c: 82: lcd_cmd(0x80);
  3855  054A  3080               	movlw	128
  3856  054B  2636               	fcall	_lcd_cmd
  3857  054C  0008               	return
  3858  054D                     __end_of_lcd_init:	
  3859                           
  3860                           	psect	text20
  3861  0636                     __ptext20:	
  3862 ;; *************** function _lcd_cmd *****************
  3863 ;; Defined at:
  3864 ;;		line 44 in file "lcd.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  val             1    wreg     unsigned char 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  val             1    7[COMMON] unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, pclath, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3878 ;;      Params:         0       0       0       0
  3879 ;;      Locals:         1       0       0       0
  3880 ;;      Temps:          0       0       0       0
  3881 ;;      Totals:         1       0       0       0
  3882 ;;Total ram usage:        1 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    2
  3885 ;; This function calls:
  3886 ;;		_atraso_ms
  3887 ;;		_lcd_wr
  3888 ;; This function is called by:
  3889 ;;		_main
  3890 ;;		_discar
  3891 ;;		_adicionar
  3892 ;;		_digitarNome
  3893 ;;		_digitarNumero
  3894 ;;		_armazenar
  3895 ;;		_chamar
  3896 ;;		_desligar
  3897 ;;		_lcd_init
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           
  3902                           ;psect for function _lcd_cmd
  3903  0636                     _lcd_cmd:	
  3904                           
  3905                           ;incstack = 0
  3906                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  3907                           ;lcd_cmd@val stored from wreg
  3908  0636  00F7               	movwf	lcd_cmd@val
  3909                           
  3910                           ;lcd.c: 46: RA0=1;
  3911  0637  1283               	bcf	3,5	;RP0=0, select bank0
  3912  0638  1303               	bcf	3,6	;RP1=0, select bank0
  3913  0639  1405               	bsf	5,0	;volatile
  3914                           
  3915                           ;lcd.c: 47: lcd_wr(val);
  3916  063A  0877               	movf	lcd_cmd@val,w
  3917  063B  2574               	fcall	_lcd_wr
  3918                           
  3919                           ;lcd.c: 48: RB3=0;
  3920  063C  1283               	bcf	3,5	;RP0=0, select bank0
  3921  063D  1303               	bcf	3,6	;RP1=0, select bank0
  3922  063E  1186               	bcf	6,3	;volatile
  3923                           
  3924                           ;lcd.c: 49: atraso_ms(3);
  3925  063F  3003               	movlw	3
  3926  0640  00F4               	movwf	atraso_ms@valor
  3927  0641  3000               	movlw	0
  3928  0642  00F5               	movwf	atraso_ms@valor+1
  3929  0643  254D               	fcall	_atraso_ms
  3930                           
  3931                           ;lcd.c: 50: RA0=0;
  3932  0644  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0645  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0646  1005               	bcf	5,0	;volatile
  3935                           
  3936                           ;lcd.c: 51: atraso_ms(3);
  3937  0647  3003               	movlw	3
  3938  0648  00F4               	movwf	atraso_ms@valor
  3939  0649  3000               	movlw	0
  3940  064A  00F5               	movwf	atraso_ms@valor+1
  3941  064B  254D               	fcall	_atraso_ms
  3942                           
  3943                           ;lcd.c: 52: RA0=1;
  3944  064C  1283               	bcf	3,5	;RP0=0, select bank0
  3945  064D  1303               	bcf	3,6	;RP1=0, select bank0
  3946  064E  1405               	bsf	5,0	;volatile
  3947  064F  0008               	return
  3948  0650                     __end_of_lcd_cmd:	
  3949                           
  3950                           	psect	text21
  3951  0574                     __ptext21:	
  3952 ;; *************** function _lcd_wr *****************
  3953 ;; Defined at:
  3954 ;;		line 30 in file "lcd.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  val             1    wreg     unsigned char 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  val             1    5[COMMON] unsigned char 
  3959 ;;  i               1    6[COMMON] unsigned char 
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      void 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2, status,0
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3969 ;;      Params:         0       0       0       0
  3970 ;;      Locals:         2       0       0       0
  3971 ;;      Temps:          1       0       0       0
  3972 ;;      Totals:         3       0       0       0
  3973 ;;Total ram usage:        3 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    1
  3976 ;; This function calls:
  3977 ;;		Nothing
  3978 ;; This function is called by:
  3979 ;;		_lcd_cmd
  3980 ;;		_lcd_dat
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function _lcd_wr
  3986  0574                     _lcd_wr:	
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in _lcd_wr: [wreg+status,2+status,0]
  3990                           ;lcd_wr@val stored from wreg
  3991  0574  00F5               	movwf	lcd_wr@val
  3992                           
  3993                           ;lcd.c: 32: unsigned char i;
  3994                           ;lcd.c: 34: RB4=0;
  3995  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3996  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3997  0577  1206               	bcf	6,4	;volatile
  3998                           
  3999                           ;lcd.c: 36: for(i=0;i<8;i++)
  4000  0578  01F6               	clrf	lcd_wr@i
  4001  0579                     L17:	
  4002  0579  3008               	movlw	8
  4003  057A  0276               	subwf	lcd_wr@i,w
  4004  057B  1803               	btfsc	3,0
  4005  057C  0008               	return
  4006                           
  4007                           ;lcd.c: 37: {
  4008                           ;lcd.c: 38: RB3=((val>>(7-i))&0x01);
  4009  057D  0875               	movf	lcd_wr@val,w
  4010  057E  00F4               	movwf	??_lcd_wr
  4011  057F  0376               	decf	lcd_wr@i,w
  4012  0580  3AFF               	xorlw	255
  4013  0581  3E07               	addlw	7
  4014  0582  3E01               	addlw	1
  4015  0583  2D86               	goto	u1404
  4016  0584                     u1405:	
  4017  0584  1003               	clrc
  4018  0585  0CF4               	rrf	??_lcd_wr,f
  4019  0586                     u1404:	
  4020  0586  3EFF               	addlw	-1
  4021  0587  1D03               	skipz
  4022  0588  2D84               	goto	u1405
  4023  0589  1C74               	btfss	??_lcd_wr,0
  4024  058A  2D8F               	goto	u1410
  4025  058B  1283               	bcf	3,5	;RP0=0, select bank0
  4026  058C  1303               	bcf	3,6	;RP1=0, select bank0
  4027  058D  1586               	bsf	6,3	;volatile
  4028  058E  2D92               	goto	l2075
  4029  058F                     u1410:	
  4030  058F  1283               	bcf	3,5	;RP0=0, select bank0
  4031  0590  1303               	bcf	3,6	;RP1=0, select bank0
  4032  0591  1186               	bcf	6,3	;volatile
  4033  0592                     l2075:	
  4034                           
  4035                           ;lcd.c: 39: RB4=1;
  4036  0592  1606               	bsf	6,4	;volatile
  4037                           
  4038                           ;lcd.c: 40: RB4=0;
  4039  0593  1206               	bcf	6,4	;volatile
  4040  0594  3001               	movlw	1
  4041  0595  00F4               	movwf	??_lcd_wr
  4042  0596  0874               	movf	??_lcd_wr,w
  4043  0597  07F6               	addwf	lcd_wr@i,f
  4044  0598  2D79               	goto	L17
  4045  0599                     __end_of_lcd_wr:	
  4046                           
  4047                           	psect	text22
  4048  054D                     __ptext22:	
  4049 ;; *************** function _atraso_ms *****************
  4050 ;; Defined at:
  4051 ;;		line 26 in file "atraso.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  valor           2    4[COMMON] unsigned int 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  i               2    0[BANK0 ] unsigned int 
  4056 ;;  j               1    2[BANK0 ] unsigned char 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, status,2, status,0
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4066 ;;      Params:         2       0       0       0
  4067 ;;      Locals:         0       3       0       0
  4068 ;;      Temps:          1       0       0       0
  4069 ;;      Totals:         3       3       0       0
  4070 ;;Total ram usage:        6 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    1
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_lcd_cmd
  4077 ;;		_lcd_dat
  4078 ;;		_lcd_init
  4079 ;;		_tc_tecla
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           
  4084                           ;psect for function _atraso_ms
  4085  054D                     _atraso_ms:	
  4086                           
  4087                           ;atraso.c: 28: unsigned int i;
  4088                           ;atraso.c: 29: unsigned char j;
  4089                           ;atraso.c: 31: for (i =0; i< valor; i++)
  4090                           
  4091                           ;incstack = 0
  4092                           ; Regs used in _atraso_ms: [wreg+status,2+status,0]
  4093  054D  1283               	bcf	3,5	;RP0=0, select bank0
  4094  054E  1303               	bcf	3,6	;RP1=0, select bank0
  4095  054F  01A0               	clrf	atraso_ms@i
  4096  0550  01A1               	clrf	atraso_ms@i+1
  4097  0551                     l204:	
  4098  0551  0875               	movf	atraso_ms@valor+1,w
  4099  0552  0221               	subwf	atraso_ms@i+1,w
  4100  0553  1D03               	skipz
  4101  0554  2D57               	goto	u1465
  4102  0555  0874               	movf	atraso_ms@valor,w
  4103  0556  0220               	subwf	atraso_ms@i,w
  4104  0557                     u1465:	
  4105  0557  1803               	btfsc	3,0
  4106  0558  0008               	return
  4107                           
  4108                           ;atraso.c: 32: {
  4109                           ;atraso.c: 33: for (j =0 ; j < 200; j++)
  4110  0559  01A2               	clrf	atraso_ms@j
  4111  055A  30C8               	movlw	200
  4112  055B  0222               	subwf	atraso_ms@j,w
  4113  055C  1803               	btfsc	3,0
  4114  055D  2D6D               	goto	l2093
  4115  055E                     l206:	
  4116  055E  0000               	nop	;# 
  4117  055F  0000               	nop	;# 
  4118  0560  0000               	nop	;# 
  4119  0561  0000               	nop	;# 
  4120  0562  0000               	nop	;# 
  4121  0563  3001               	movlw	1
  4122  0564  00F6               	movwf	??_atraso_ms
  4123  0565  0876               	movf	??_atraso_ms,w
  4124  0566  1283               	bcf	3,5	;RP0=0, select bank0
  4125  0567  1303               	bcf	3,6	;RP1=0, select bank0
  4126  0568  07A2               	addwf	atraso_ms@j,f
  4127  0569  30C8               	movlw	200
  4128  056A  0222               	subwf	atraso_ms@j,w
  4129  056B  1C03               	skipc
  4130  056C  2D5E               	goto	l206
  4131  056D                     l2093:	
  4132  056D  3001               	movlw	1
  4133  056E  07A0               	addwf	atraso_ms@i,f
  4134  056F  1803               	skipnc
  4135  0570  0AA1               	incf	atraso_ms@i+1,f
  4136  0571  3000               	movlw	0
  4137  0572  07A1               	addwf	atraso_ms@i+1,f
  4138  0573  2D51               	goto	l204
  4139  0574                     __end_of_atraso_ms:	
  4140                           
  4141                           	psect	text23
  4142  06A4                     __ptext23:	
  4143 ;; *************** function _interrupcao *****************
  4144 ;; Defined at:
  4145 ;;		line 63 in file "main.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;		None
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;		None
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      void 
  4152 ;; Registers used:
  4153 ;;		None
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4159 ;;      Params:         0       0       0       0
  4160 ;;      Locals:         0       0       0       0
  4161 ;;      Temps:          4       0       0       0
  4162 ;;      Totals:         4       0       0       0
  4163 ;;Total ram usage:        4 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		Interrupt level 1
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           
  4173                           ;psect for function _interrupcao
  4174  06A4                     _interrupcao:	
  4175  06A4  0873               	movf	??_interrupcao+3,w
  4176  06A5  00FF               	movwf	127
  4177  06A6  0872               	movf	??_interrupcao+2,w
  4178  06A7  008A               	movwf	10
  4179  06A8  0871               	movf	??_interrupcao+1,w
  4180  06A9  0084               	movwf	4
  4181  06AA  0E70               	swapf	??_interrupcao^(0+-128),w
  4182  06AB  0083               	movwf	3
  4183  06AC  0EFE               	swapf	126,f
  4184  06AD  0E7E               	swapf	126,w
  4185  06AE  0009               	retfie
  4186  06AF                     __end_of_interrupcao:	
  4187  007E                     btemp	set	126	;btemp
  4188  007E                     wtemp0	set	126
  4189                           
  4190                           	psect	intentry
  4191  0004                     __pintentry:	
  4192                           ;incstack = 0
  4193                           ; Regs used in _interrupcao: []
  4194                           
  4195  0004                     interrupt_function:	
  4196  007E                     saved_w	set	btemp
  4197  0004  00FE               	movwf	btemp
  4198  0005  0E03               	swapf	3,w
  4199  0006  00F0               	movwf	??_interrupcao
  4200  0007  0804               	movf	4,w
  4201  0008  00F1               	movwf	??_interrupcao+1
  4202  0009  080A               	movf	10,w
  4203  000A  00F2               	movwf	??_interrupcao+2
  4204  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4205  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4206  000D  087F               	movf	btemp+1,w
  4207  000E  00F3               	movwf	??_interrupcao+3
  4208  000F  2EA4               	ljmp	_interrupcao


Data Sizes:
    Strings     101
    Constant    4
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80     30      54
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_10(CODE[14]), STR_9(CODE[12]), STR_8(CODE[7]), STR_7(CODE[15]), 
		 -> STR_6(CODE[10]), STR_5(CODE[14]), nome(BANK0[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_lcd_cmd
    _maquina->_buscar
    _discar->_lcd_cmd
    _digitarNumero->_lcd_cmd
    _digitarNumero->_lcd_dat
    _digitarNome->_lcd_cmd
    _digitarNome->_lcd_dat
    _desligar->_lcd_cmd
    _chamar->_lcd_cmd
    _buscar->_eeprom_read
    _armazenar->_lcd_cmd
    _adicionar->_lcd_cmd
    _tc_tecla->___bmul
    _lcd_str->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_dat->_lcd_wr
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _lcd_cmd->_lcd_wr

Critical Paths under _interrupcao in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_maquina
    _maquina->_digitarNome
    _discar->_tc_tecla
    _digitarNumero->_tc_tecla
    _digitarNome->_tc_letra
    _tc_letra->_tc_tecla
    _desligar->_lcd_str
    _chamar->_tc_tecla
    _armazenar->_tc_tecla
    _adicionar->_tc_tecla
    _tc_tecla->_atraso_ms
    _lcd_dat->_atraso_ms
    _lcd_init->_atraso_ms
    _lcd_cmd->_atraso_ms

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   40426
                                             28 BANK0      2     2      0
                        _eeprom_read
                       _eeprom_write
                            _lcd_cmd
                           _lcd_init
                            _maquina
 ---------------------------------------------------------------------------------
 (1) _maquina                                              1     1      0   37267
                                             27 BANK0      1     1      0
                          _adicionar
                          _armazenar
                             _buscar
                             _chamar
                           _desligar
                        _digitarNome
                      _digitarNumero
                             _discar
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _discar                                               1     1      0    5060
                                             12 BANK0      1     1      0
                       _desativaModo
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (3) _desativaModo                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _digitarNumero                                        3     3      0    6332
                                             12 BANK0      3     3      0
                            _lcd_cmd
                            _lcd_dat
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _digitarNome                                          3     3      0    7077
                                             24 BANK0      3     3      0
                            _lcd_cmd
                            _lcd_dat
                            _lcd_str
                           _tc_letra
 ---------------------------------------------------------------------------------
 (3) _tc_letra                                            12    10      2    2936
                                             12 BANK0     12    10      2
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _desligar                                             3     3      0    2869
                                              7 BANK0      3     3      0
                            _lcd_cmd
                            _lcd_str
 ---------------------------------------------------------------------------------
 (2) _chamar                                               0     0      0    5060
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (2) _buscar                                               9     9      0     273
                                              6 COMMON     2     2      0
                                              0 BANK0      7     7      0
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _armazenar                                            5     5      0    5514
                                             12 BANK0      5     5      0
                       _eeprom_write
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (3) _eeprom_write                                         3     2      1     256
                                              4 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _adicionar                                            1     1      0    5060
                                             12 BANK0      1     1      0
                          _ativaModo
                            _lcd_cmd
                            _lcd_str
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (3) _tc_tecla                                             9     7      2    2191
                                              3 BANK0      9     7      2
                             ___bmul
                          _atraso_ms
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     251
                                              4 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _lcd_str                                              4     2      2    1857
                                              3 BANK0      4     2      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (4) _lcd_dat                                              1     1      0    1012
                                              7 COMMON     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _ativaModo                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1863
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              1     1      0    1012
                                              7 COMMON     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (5) _lcd_wr                                               3     3      0     130
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _atraso_ms                                            6     4      2     851
                                              4 COMMON     3     1      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupcao                                          4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eeprom_read
   _eeprom_write
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
       _atraso_ms
       _lcd_wr
   _maquina
     _adicionar
       _ativaModo
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _armazenar
       _eeprom_write
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _buscar
       _eeprom_read
     _chamar
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _desligar
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
     _digitarNome
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_letra
         _tc_tecla
           ___bmul
           _atraso_ms
     _digitarNumero
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_dat
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _discar
       _desativaModo
       _lcd_cmd
         _atraso_ms
         _lcd_wr
       _lcd_str
         _lcd_dat
           _atraso_ms
           _lcd_wr
       _tc_tecla
         ___bmul
         _atraso_ms
     _eeprom_read

 _interrupcao (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1E      36       3       67.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      40       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      40      10        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue May 02 21:51:33 2017

      digitarNumero@cont 002D                        pc 0002           ___bmul@product 0076  
            __CFG_CP$OFF 0000                       l96 04A5                       l88 04D0  
                     _RD 04E0                       _WR 04E1                       fsr 0004  
                    l104 04FB                      l204 0551                      l206 055E  
                    l230 023F                      l240 0269                      l233 025E  
                    l154 0348                      l235 0254                      l331 05BE  
                    l228 0249                      l309 067F                      l261 0174  
                    _GIE 005F                      _RA0 0028                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _RB6 0036  
                    _RB7 0037             __CFG_CPD$OFF 0000                      fsr0 0004  
                    indf 0000                     S2611 06B7                     S2613 0650  
                   S2615 0667             __CFG_LVP$OFF 0000                     l2105 022D  
                   l2133 0278                     l2301 04EB                     l2221 0104  
                   l2205 00D8                     l2143 0295                     l2161 02B5  
                   l2153 02A9                     l2241 0143                     l2401 01E1  
                   l2321 0039                     l2075 0592                     l2147 02A1  
                   l2139 0288                     l2307 04F3                     l2251 0151  
                   l2243 0145                     l2093 056D                     l2165 02BE  
                   l2157 02AF                     l2149 02A4                     l2253 0154  
                   l2245 0148                     l2413 0216                     l2341 0075  
                   l2501 04BE                     l1463 0695                     l2167 02C2  
                   l2423 05AD                     l2255 0157                     l2247 014B  
                   l2263 0162                     l2239 0132                     l2407 01FB  
                   l2351 00A0                     l2335 0063                     l2257 015A  
                   l2249 014E                     l2265 0172                     l2345 0086  
                   l1467 069B                     l2099 0228                     l2451 03B8  
                   l2259 015D                     l2363 00C5                     l2283 0490  
                   l2291 049D                     l2445 03A9                     l2437 0386  
                   l2357 00BB                     l2285 0495                     l2199 0601  
                   l2391 01BE                     l2527 0524                     l1841 0308  
                   l2377 0194                     l2609 04C5                     l2299 04E8  
                   l2459 03DB                     l1851 031D                     l1835 02EE  
                   l2491 04B6                     l2483 04AE                     l1829 02D2  
                   l1837 02F4                     l2397 01D0                     l2493 04B8  
                   l2485 04B0                     l1871 0367                     l1863 0343  
                   l2495 04BA                     l2487 04B2                     l1865 02CA  
                   l2497 04BC                     l2489 04B4                     l1859 033F  
                   STR_1 0472                     STR_2 0461                     STR_3 044B  
                   STR_4 0457                     STR_5 0431                     STR_6 0457  
                   STR_7 0414                     STR_8 046B                     STR_9 043F  
                   u1305 031B                     u1410 058F                     u1315 033D  
                   u1404 0586                     u1405 0584                     u1265 02EA  
                   u1275 02FD                     u1465 0557                     u1585 029B  
                   u1905 0384                     u1665 00E5                     u1745 0055  
                   u1915 03A7                     u1835 01B0                     u1925 03B6  
                   u1765 0084                     u1935 03D9                     u1695 0113  
                   u1855 01DF                     u1775 0091                     u1865 01EC  
                   u1785 009E                     u1947 05F2                     u1875 01F9  
                   u1795 00B9                     u1885 0214                     _WREN 04E2  
         ??_eeprom_write 0075                     _main 04FC                     _modo 03C1  
                   _nome 004C                     btemp 007E                     start 0010  
      ___bmul@multiplier 0077                    ?_main 0070                    _EEADR 009B  
                  STR_10 0423            __CFG_WDTE$OFF 0000                    _CARRY 0018  
                  _CMCON 001F                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086              buscar@i_147 0022  
        __end_of_lcd_dat 0636          __end_of_lcd_cmd 0650          __end_of_lcd_str 061C  
            buscar@achou 03C0                    _linha 0410          __end_of_maquina 04D1  
         __pbitbssCOMMON 03C0           __CFG_BOREN$OFF 0000                    pclath 000A  
                  status 0003                    wtemp0 007E           __CFG_MCLRE$OFF 0000  
        __initialization 0011             ?_interrupcao 0070             __end_of_main 0526  
   __end_of_desativaModo 06C1                   ??_main 003C          tc_tecla@timeout 0023  
   __size_of_digitarNome 00A9           armazenar@i_151 002F                   _EEDATA 009A  
                 _EECON1 009C                   _EECON2 009D           __CFG_PWRTE$OFF 0000  
       __end_of_desligar 05FE     __size_of_eeprom_read 0015         __end_of_lcd_init 054D  
                 ___bmul 0693                   _chamar 0599                   _discar 0479  
                 _lcd_wr 0574                   _buscar 02C6                   _estado 0048  
   __end_of_eeprom_write 05DF                   _numero 003E         __end_of_tc_letra 0175  
              ??_lcd_dat 0077                ??_lcd_cmd 0077         __end_of_tc_tecla 02C6  
              ??_lcd_str 0025                ??_maquina 003B            tc_letra@i_200 0031  
                 saved_w 007E  __end_of__initialization 0018          eeprom_read@addr 0075  
    ___bmul@multiplicand 0074       __size_of_adicionar 002B           __pcstackCOMMON 0070  
  __end_of_digitarNumero 00CA            __end_of_linha 0414        eeprom_write@value 0074  
     __size_of_armazenar 008E       __size_of_ativaModo 0002       __size_of_atraso_ms 0027  
            tc_letra@ret 0034              tc_letra@num 0035               __pbssBANK0 003E  
            tc_tecla@ret 002B              tc_tecla@tmp 0027    __size_of_desativaModo 0002  
             __pmaintext 04FC                  ?___bmul 0074                  ?_chamar 0070  
             __pintentry 0004                  ?_discar 0070                  ?_lcd_wr 0070  
   __size_of_interrupcao 000B                  ?_buscar 0070        __end_of_adicionar 04FC  
              ?_desligar 0070                ?_lcd_init 0070               __stringtab 0400  
           _desativaModo 06BF                ?_tc_letra 002C                ?_tc_tecla 0023  
      __end_of_armazenar 03FA    __size_of_eeprom_write 0022        __end_of_ativaModo 06C3  
        __size_of___bmul 0011          __size_of_chamar 0024        __end_of_atraso_ms 0574  
        __size_of_discar 002D          __size_of_lcd_wr 0025          __size_of_buscar 00A6  
                __ptext1 04A6                  __ptext2 0479                  __ptext3 06BF  
                __ptext4 001A                  __ptext5 0175                  __ptext6 00CA  
                __ptext7 05DF                  __ptext8 0599                  __ptext9 02C6  
                _lcd_dat 061C                  _lcd_cmd 0636                  _lcd_str 05FE  
                _entrada 004B                  _maquina 04A6               ??_desligar 0027  
                lcd_wr@i 0076                  clrloop0 06B0                  main@val 003D  
             ??_lcd_init 0078     end_of_initialization 0018                  buscar@i 0025  
           _eeprom_write 05BD               ??_tc_letra 002E               ??_tc_tecla 0025  
          ??_digitarNome 0038               _quantidade 0079               lcd_dat@val 0077  
             lcd_cmd@val 0077               armazenar@i 002D            ??_eeprom_read 0074  
             lcd_str@str 0023           __end_of___bmul 06A4               atraso_ms@i 0020  
             atraso_ms@j 0022           __end_of_chamar 05BD           __end_of_discar 04A6  
         __end_of_lcd_wr 0599           __end_of_buscar 036C      start_initialization 0011  
    __end_of_digitarNome 021E                 ??___bmul 0075      __end_of_eeprom_read 0693  
               ??_chamar 0078                 ??_discar 002C                 ??_lcd_wr 0074  
               ??_buscar 0076             tc_letra@cont 0036             tc_letra@num2 0033  
            __pbssCOMMON 0079                ___latbits 0000            __pcstackBANK0 0020  
 __size_of_digitarNumero 00B0                _adicionar 04D1        __size_of_desligar 001F  
       eeprom_write@addr 0076        __size_of_lcd_init 0027               tc_tecla@to 0028  
          ??_interrupcao 0070        __size_of_tc_letra 00AB        __size_of_tc_tecla 00A8  
              _armazenar 036C                _ativaModo 06C1                __pstrings 0400  
            _digitarNome 0175                __pswtext1 06B7                __pswtext2 0650  
              __pswtext3 0667                 ?_lcd_dat 0070                 ?_lcd_cmd 0070  
               ?_lcd_str 0023                _atraso_ms 054D                 ?_maquina 0070  
             ?_adicionar 0070           atraso_ms@valor 0074        interrupt_function 0004  
              clear_ram0 06AF              _eeprom_read 067E            _digitarNumero 001A  
             ?_armazenar 0070               ?_ativaModo 0070      __end_of_interrupcao 06AF  
            __stringbase 040F               ?_atraso_ms 0074                lcd_wr@val 0075  
              buscar@end 0024                buscar@num 0020           ?_digitarNumero 0070  
     __end_of__stringtab 0410         __size_of_lcd_dat 001A         __size_of_lcd_cmd 001A  
       __size_of_lcd_str 001E                tc_letra@i 002F                tc_tecla@i 002A  
       __size_of_maquina 002B                 __ptext10 067E                 __ptext11 036C  
               __ptext20 0636                 __ptext12 05BD                 __ptext21 0574  
               __ptext13 04D1                 __ptext22 054D                 __ptext14 021E  
               __ptext23 06A4                 __ptext15 0693                 __ptext16 05FE  
               _desligar 05DF                 __ptext17 061C                 __ptext18 06C1  
               __ptext19 0526                 _endereco 004A                 _lcd_init 0526  
            ??_adicionar 002C            __size_of_main 002A                 _tc_letra 00CA  
               _tc_tecla 021E              _interrupcao 06A4              ??_armazenar 002C  
               lcd_str@i 0026              ??_ativaModo 0074              ??_atraso_ms 0076  
          ?_desativaModo 0070                 intlevel1 0000                stringcode 040A  
        ??_digitarNumero 002C             ?_digitarNome 0070          tc_letra@timeout 002C  
               stringdir 040A                 stringtab 0400           ??_desativaModo 0074  
        digitarNome@cont 0039       __CFG_FOSC$EXTRCCLK 0000            ?_eeprom_write 0074  
           ?_eeprom_read 0070  
